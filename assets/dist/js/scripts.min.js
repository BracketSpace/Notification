!function(t,e){"function"==typeof define&&define.amd?define("sifter",e):"object"==typeof exports?module.exports=e():t.Sifter=e()}(this,function(){var t=function(t,e){this.items=t,this.settings=e||{diacritics:!0}};t.prototype.tokenize=function(t){if(t=o(String(t||"").toLowerCase()),!t||!t.length)return[];var e,n,i,s,l=[],c=t.split(/ +/);for(e=0,n=c.length;e<n;e++){if(i=r(c[e]),this.settings.diacritics)for(s in a)a.hasOwnProperty(s)&&(i=i.replace(new RegExp(s,"g"),a[s]));l.push({string:c[e],regex:new RegExp(i,"i")})}return l},t.prototype.iterator=function(t,e){var n;n=s(t)?Array.prototype.forEach||function(t){for(var e=0,n=this.length;e<n;e++)t(this[e],e,this)}:function(t){for(var e in this)this.hasOwnProperty(e)&&t(this[e],e,this)},n.apply(t,[e])},t.prototype.getScoreFunction=function(t,e){var n,o,r,s,a;n=this,t=n.prepareSearch(t,e),r=t.tokens,o=t.options.fields,s=r.length,a=t.options.nesting;var l=function(t,e){var n,i;return t?(t=String(t||""),i=t.search(e.regex),i===-1?0:(n=e.string.length/t.length,0===i&&(n+=.5),n)):0},c=function(){var t=o.length;return t?1===t?function(t,e){return l(i(e,o[0],a),t)}:function(e,n){for(var r=0,s=0;r<t;r++)s+=l(i(n,o[r],a),e);return s/t}:function(){return 0}}();return s?1===s?function(t){return c(r[0],t)}:"and"===t.options.conjunction?function(t){for(var e,n=0,i=0;n<s;n++){if(e=c(r[n],t),e<=0)return 0;i+=e}return i/s}:function(t){for(var e=0,n=0;e<s;e++)n+=c(r[e],t);return n/s}:function(){return 0}},t.prototype.getSortFunction=function(t,n){var o,r,s,a,l,c,u,p,d,f,h;if(s=this,t=s.prepareSearch(t,n),h=!t.query&&n.sort_empty||n.sort,d=function(t,e){return"$score"===t?e.score:i(s.items[e.id],t,n.nesting)},l=[],h)for(o=0,r=h.length;o<r;o++)(t.query||"$score"!==h[o].field)&&l.push(h[o]);if(t.query){for(f=!0,o=0,r=l.length;o<r;o++)if("$score"===l[o].field){f=!1;break}f&&l.unshift({field:"$score",direction:"desc"})}else for(o=0,r=l.length;o<r;o++)if("$score"===l[o].field){l.splice(o,1);break}for(p=[],o=0,r=l.length;o<r;o++)p.push("desc"===l[o].direction?-1:1);return c=l.length,c?1===c?(a=l[0].field,u=p[0],function(t,n){return u*e(d(a,t),d(a,n))}):function(t,n){var i,o,r;for(i=0;i<c;i++)if(r=l[i].field,o=p[i]*e(d(r,t),d(r,n)))return o;return 0}:null},t.prototype.prepareSearch=function(t,e){if("object"==typeof t)return t;e=n({},e);var i=e.fields,o=e.sort,r=e.sort_empty;return i&&!s(i)&&(e.fields=[i]),o&&!s(o)&&(e.sort=[o]),r&&!s(r)&&(e.sort_empty=[r]),{options:e,query:String(t||"").toLowerCase(),tokens:this.tokenize(t),total:0,items:[]}},t.prototype.search=function(t,e){var n,i,o,r,s=this;return i=this.prepareSearch(t,e),e=i.options,t=i.query,r=e.score||s.getScoreFunction(i),t.length?s.iterator(s.items,function(t,o){n=r(t),(e.filter===!1||n>0)&&i.items.push({score:n,id:o})}):s.iterator(s.items,function(t,e){i.items.push({score:1,id:e})}),o=s.getSortFunction(i,e),o&&i.items.sort(o),i.total=i.items.length,"number"==typeof e.limit&&(i.items=i.items.slice(0,e.limit)),i};var e=function(t,e){return"number"==typeof t&&"number"==typeof e?t>e?1:t<e?-1:0:(t=l(String(t||"")),e=l(String(e||"")),t>e?1:e>t?-1:0)},n=function(t,e){var n,i,o,r;for(n=1,i=arguments.length;n<i;n++)if(r=arguments[n])for(o in r)r.hasOwnProperty(o)&&(t[o]=r[o]);return t},i=function(t,e,n){if(t&&e){if(!n)return t[e];for(var i=e.split(".");i.length&&(t=t[i.shift()]););return t}},o=function(t){return(t+"").replace(/^\s+|\s+$|/g,"")},r=function(t){return(t+"").replace(/([.?*+^$[\]\\(){}|-])/g,"\\$1")},s=Array.isArray||"undefined"!=typeof $&&$.isArray||function(t){return"[object Array]"===Object.prototype.toString.call(t)},a={a:"[aḀḁĂăÂâǍǎȺⱥȦȧẠạÄäÀàÁáĀāÃãÅåąĄÃąĄ]",b:"[b␢βΒB฿𐌁ᛒ]",c:"[cĆćĈĉČčĊċC̄c̄ÇçḈḉȻȼƇƈɕᴄＣｃ]",d:"[dĎďḊḋḐḑḌḍḒḓḎḏĐđD̦d̦ƉɖƊɗƋƌᵭᶁᶑȡᴅＤｄð]",e:"[eÉéÈèÊêḘḙĚěĔĕẼẽḚḛẺẻĖėËëĒēȨȩĘęᶒɆɇȄȅẾếỀềỄễỂểḜḝḖḗḔḕȆȇẸẹỆệⱸᴇＥｅɘǝƏƐε]",f:"[fƑƒḞḟ]",g:"[gɢ₲ǤǥĜĝĞğĢģƓɠĠġ]",h:"[hĤĥĦħḨḩẖẖḤḥḢḣɦʰǶƕ]",i:"[iÍíÌìĬĭÎîǏǐÏïḮḯĨĩĮįĪīỈỉȈȉȊȋỊịḬḭƗɨɨ̆ᵻᶖİiIıɪＩｉ]",j:"[jȷĴĵɈɉʝɟʲ]",k:"[kƘƙꝀꝁḰḱǨǩḲḳḴḵκϰ₭]",l:"[lŁłĽľĻļĹĺḶḷḸḹḼḽḺḻĿŀȽƚⱠⱡⱢɫɬᶅɭȴʟＬｌ]",n:"[nŃńǸǹŇňÑñṄṅŅņṆṇṊṋṈṉN̈n̈ƝɲȠƞᵰᶇɳȵɴＮｎŊŋ]",o:"[oØøÖöÓóÒòÔôǑǒŐőŎŏȮȯỌọƟɵƠơỎỏŌōÕõǪǫȌȍՕօ]",p:"[pṔṕṖṗⱣᵽƤƥᵱ]",q:"[qꝖꝗʠɊɋꝘꝙq̃]",r:"[rŔŕɌɍŘřŖŗṘṙȐȑȒȓṚṛⱤɽ]",s:"[sŚśṠṡṢṣꞨꞩŜŝŠšŞşȘșS̈s̈]",t:"[tŤťṪṫŢţṬṭƮʈȚțṰṱṮṯƬƭ]",u:"[uŬŭɄʉỤụÜüÚúÙùÛûǓǔŰűŬŭƯưỦủŪūŨũŲųȔȕ∪]",v:"[vṼṽṾṿƲʋꝞꝟⱱʋ]",w:"[wẂẃẀẁŴŵẄẅẆẇẈẉ]",x:"[xẌẍẊẋχ]",y:"[yÝýỲỳŶŷŸÿỸỹẎẏỴỵɎɏƳƴ]",z:"[zŹźẐẑŽžŻżẒẓẔẕƵƶ]"},l=function(){var t,e,n,i,o="",r={};for(n in a)if(a.hasOwnProperty(n))for(i=a[n].substring(2,a[n].length-1),o+=i,t=0,e=i.length;t<e;t++)r[i.charAt(t)]=n;var s=new RegExp("["+o+"]","g");return function(t){return t.replace(s,function(t){return r[t]}).toLowerCase()}}();return t}),function(t,e){"function"==typeof define&&define.amd?define("microplugin",e):"object"==typeof exports?module.exports=e():t.MicroPlugin=e()}(this,function(){var t={};t.mixin=function(t){t.plugins={},t.prototype.initializePlugins=function(t){var n,i,o,r=this,s=[];if(r.plugins={names:[],settings:{},requested:{},loaded:{}},e.isArray(t))for(n=0,i=t.length;n<i;n++)"string"==typeof t[n]?s.push(t[n]):(r.plugins.settings[t[n].name]=t[n].options,s.push(t[n].name));else if(t)for(o in t)t.hasOwnProperty(o)&&(r.plugins.settings[o]=t[o],s.push(o));for(;s.length;)r.require(s.shift())},t.prototype.loadPlugin=function(e){var n=this,i=n.plugins,o=t.plugins[e];if(!t.plugins.hasOwnProperty(e))throw new Error('Unable to find "'+e+'" plugin');i.requested[e]=!0,i.loaded[e]=o.fn.apply(n,[n.plugins.settings[e]||{}]),i.names.push(e)},t.prototype.require=function(t){var e=this,n=e.plugins;if(!e.plugins.loaded.hasOwnProperty(t)){if(n.requested[t])throw new Error('Plugin has circular dependency ("'+t+'")');e.loadPlugin(t)}return n.loaded[t]},t.define=function(e,n){t.plugins[e]={name:e,fn:n}}};var e={isArray:Array.isArray||function(t){return"[object Array]"===Object.prototype.toString.call(t)}};return t}),function(t,e){"function"==typeof define&&define.amd?define("selectize",["jquery","sifter","microplugin"],e):"object"==typeof exports?module.exports=e(require("jquery"),require("sifter"),require("microplugin")):t.Selectize=e(t.jQuery,t.Sifter,t.MicroPlugin)}(this,function(t,e,n){"use strict";var i=function(t,e){if("string"!=typeof e||e.length){var n="string"==typeof e?new RegExp(e,"i"):e,i=function(t){var e=0;if(3===t.nodeType){var o=t.data.search(n);if(o>=0&&t.data.length>0){var r=t.data.match(n),s=document.createElement("span");s.className="highlight";var a=t.splitText(o),l=(a.splitText(r[0].length),a.cloneNode(!0));s.appendChild(l),a.parentNode.replaceChild(s,a),e=1}}else if(1===t.nodeType&&t.childNodes&&!/(script|style)/i.test(t.tagName))for(var c=0;c<t.childNodes.length;++c)c+=i(t.childNodes[c]);return e};return t.each(function(){i(this)})}};t.fn.removeHighlight=function(){return this.find("span.highlight").each(function(){this.parentNode.firstChild.nodeName;var t=this.parentNode;t.replaceChild(this.firstChild,this),t.normalize()}).end()};var o=function(){};o.prototype={on:function(t,e){this._events=this._events||{},this._events[t]=this._events[t]||[],this._events[t].push(e)},off:function(t,e){var n=arguments.length;return 0===n?delete this._events:1===n?delete this._events[t]:(this._events=this._events||{},void(t in this._events!=!1&&this._events[t].splice(this._events[t].indexOf(e),1)))},trigger:function(t){if(this._events=this._events||{},t in this._events!=!1)for(var e=0;e<this._events[t].length;e++)this._events[t][e].apply(this,Array.prototype.slice.call(arguments,1))}},o.mixin=function(t){for(var e=["on","off","trigger"],n=0;n<e.length;n++)t.prototype[e[n]]=o.prototype[e[n]]};var r=/Mac/.test(navigator.userAgent),s=65,a=13,l=27,c=37,u=38,p=80,d=39,f=40,h=78,g=8,v=46,m=16,y=r?91:17,w=r?18:17,b=9,O=1,C=2,x=!/android/i.test(window.navigator.userAgent)&&!!document.createElement("input").validity,$=function(t){return"undefined"!=typeof t},_=function(t){return"undefined"==typeof t||null===t?null:"boolean"==typeof t?t?"1":"0":t+""},S=function(t){return(t+"").replace(/&/g,"&amp;").replace(/</g,"&lt;").replace(/>/g,"&gt;").replace(/"/g,"&quot;")},k={};k.before=function(t,e,n){var i=t[e];t[e]=function(){return n.apply(t,arguments),i.apply(t,arguments)}},k.after=function(t,e,n){var i=t[e];t[e]=function(){var e=i.apply(t,arguments);return n.apply(t,arguments),e}};var I=function(t){var e=!1;return function(){e||(e=!0,t.apply(this,arguments))}},A=function(t,e){var n;return function(){var i=this,o=arguments;window.clearTimeout(n),n=window.setTimeout(function(){t.apply(i,o)},e)}},F=function(t,e,n){var i,o=t.trigger,r={};t.trigger=function(){var n=arguments[0];return e.indexOf(n)===-1?o.apply(t,arguments):void(r[n]=arguments)},n.apply(t,[]),t.trigger=o;for(i in r)r.hasOwnProperty(i)&&o.apply(t,r[i])},T=function(t,e,n,i){t.on(e,n,function(e){for(var n=e.target;n&&n.parentNode!==t[0];)n=n.parentNode;return e.currentTarget=n,i.apply(this,[e])})},D=function(t){var e={};if("selectionStart"in t)e.start=t.selectionStart,e.length=t.selectionEnd-e.start;else if(document.selection){t.focus();var n=document.selection.createRange(),i=document.selection.createRange().text.length;n.moveStart("character",-t.value.length),e.start=n.text.length-i,e.length=i}return e},E=function(t,e,n){var i,o,r={};if(n)for(i=0,o=n.length;i<o;i++)r[n[i]]=t.css(n[i]);else r=t.css();e.css(r)},P=function(e,n){if(!e)return 0;var i=t("<test>").css({position:"absolute",top:-99999,left:-99999,width:"auto",padding:0,whiteSpace:"pre"}).text(e).appendTo("body");E(n,i,["letterSpacing","fontSize","fontFamily","fontWeight","textTransform"]);var o=i.width();return i.remove(),o},z=function(t){var e=null,n=function(n,i){var o,r,s,a,l,c,u,p;n=n||window.event||{},i=i||{},n.metaKey||n.altKey||(i.force||t.data("grow")!==!1)&&(o=t.val(),n.type&&"keydown"===n.type.toLowerCase()&&(r=n.keyCode,s=r>=97&&r<=122||r>=65&&r<=90||r>=48&&r<=57||32===r,r===v||r===g?(p=D(t[0]),p.length?o=o.substring(0,p.start)+o.substring(p.start+p.length):r===g&&p.start?o=o.substring(0,p.start-1)+o.substring(p.start+1):r===v&&"undefined"!=typeof p.start&&(o=o.substring(0,p.start)+o.substring(p.start+1))):s&&(c=n.shiftKey,u=String.fromCharCode(n.keyCode),u=c?u.toUpperCase():u.toLowerCase(),o+=u)),a=t.attr("placeholder"),!o&&a&&(o=a),l=P(o,t)+4,l!==e&&(e=l,t.width(l),t.triggerHandler("resize")))};t.on("keydown keyup update blur",n),n()},j=function(t){var e=document.createElement("div");return e.appendChild(t.cloneNode(!0)),e.innerHTML},q=function(t,e){e||(e={});var n="Selectize";console.error(n+": "+t),e.explanation&&(console.group&&console.group(),console.error(e.explanation),console.group&&console.groupEnd())},L=function(n,i){var o,r,s,a,l=this;a=n[0],a.selectize=l;var c=window.getComputedStyle&&window.getComputedStyle(a,null);if(s=c?c.getPropertyValue("direction"):a.currentStyle&&a.currentStyle.direction,s=s||n.parents("[dir]:first").attr("dir")||"",t.extend(l,{order:0,settings:i,$input:n,tabIndex:n.attr("tabindex")||"",tagType:"select"===a.tagName.toLowerCase()?O:C,rtl:/rtl/i.test(s),eventNS:".selectize"+ ++L.count,highlightedValue:null,isOpen:!1,isDisabled:!1,isRequired:n.is("[required]"),isInvalid:!1,isLocked:!1,isFocused:!1,isInputHidden:!1,isSetup:!1,isShiftDown:!1,isCmdDown:!1,isCtrlDown:!1,ignoreFocus:!1,ignoreBlur:!1,ignoreHover:!1,hasOptions:!1,currentResults:null,lastValue:"",caretPos:0,loading:0,loadedSearches:{},$activeOption:null,$activeItems:[],optgroups:{},options:{},userOptions:{},items:[],renderCache:{},onSearchChange:null===i.loadThrottle?l.onSearchChange:A(l.onSearchChange,i.loadThrottle)}),l.sifter=new e(this.options,{diacritics:i.diacritics}),l.settings.options){for(o=0,r=l.settings.options.length;o<r;o++)l.registerOption(l.settings.options[o]);delete l.settings.options}if(l.settings.optgroups){for(o=0,r=l.settings.optgroups.length;o<r;o++)l.registerOptionGroup(l.settings.optgroups[o]);delete l.settings.optgroups}l.settings.mode=l.settings.mode||(1===l.settings.maxItems?"single":"multi"),"boolean"!=typeof l.settings.hideSelected&&(l.settings.hideSelected="multi"===l.settings.mode),l.initializePlugins(l.settings.plugins),l.setupCallbacks(),l.setupTemplates(),l.setup()};return o.mixin(L),"undefined"!=typeof n?n.mixin(L):q("Dependency MicroPlugin is missing",{explanation:'Make sure you either: (1) are using the "standalone" version of Selectize, or (2) require MicroPlugin before you load Selectize.'}),t.extend(L.prototype,{setup:function(){var e,n,i,o,s,a,l,c,u,p,d=this,f=d.settings,h=d.eventNS,g=t(window),v=t(document),b=d.$input;if(l=d.settings.mode,c=b.attr("class")||"",e=t("<div>").addClass(f.wrapperClass).addClass(c).addClass(l),n=t("<div>").addClass(f.inputClass).addClass("items").appendTo(e),i=t('<input type="text" autocomplete="off" />').appendTo(n).attr("tabindex",b.is(":disabled")?"-1":d.tabIndex),a=t(f.dropdownParent||e),o=t("<div>").addClass(f.dropdownClass).addClass(l).hide().appendTo(a),s=t("<div>").addClass(f.dropdownContentClass).appendTo(o),(p=b.attr("id"))&&(i.attr("id",p+"-selectized"),t("label[for='"+p+"']").attr("for",p+"-selectized")),d.settings.copyClassesToDropdown&&o.addClass(c),e.css({width:b[0].style.width}),d.plugins.names.length&&(u="plugin-"+d.plugins.names.join(" plugin-"),e.addClass(u),o.addClass(u)),(null===f.maxItems||f.maxItems>1)&&d.tagType===O&&b.attr("multiple","multiple"),d.settings.placeholder&&i.attr("placeholder",f.placeholder),!d.settings.splitOn&&d.settings.delimiter){var C=d.settings.delimiter.replace(/[-\/\\^$*+?.()|[\]{}]/g,"\\$&");d.settings.splitOn=new RegExp("\\s*"+C+"+\\s*")}b.attr("autocorrect")&&i.attr("autocorrect",b.attr("autocorrect")),b.attr("autocapitalize")&&i.attr("autocapitalize",b.attr("autocapitalize")),d.$wrapper=e,d.$control=n,d.$control_input=i,d.$dropdown=o,d.$dropdown_content=s,o.on("mouseenter","[data-selectable]",function(){return d.onOptionHover.apply(d,arguments)}),o.on("mousedown click","[data-selectable]",function(){return d.onOptionSelect.apply(d,arguments)}),T(n,"mousedown","*:not(input)",function(){return d.onItemSelect.apply(d,arguments)}),z(i),n.on({mousedown:function(){return d.onMouseDown.apply(d,arguments)},click:function(){return d.onClick.apply(d,arguments)}}),i.on({mousedown:function(t){t.stopPropagation()},keydown:function(){return d.onKeyDown.apply(d,arguments)},keyup:function(){return d.onKeyUp.apply(d,arguments)},keypress:function(){return d.onKeyPress.apply(d,arguments)},resize:function(){d.positionDropdown.apply(d,[])},blur:function(){return d.onBlur.apply(d,arguments)},focus:function(){return d.ignoreBlur=!1,d.onFocus.apply(d,arguments)},paste:function(){return d.onPaste.apply(d,arguments)}}),v.on("keydown"+h,function(t){d.isCmdDown=t[r?"metaKey":"ctrlKey"],d.isCtrlDown=t[r?"altKey":"ctrlKey"],d.isShiftDown=t.shiftKey}),v.on("keyup"+h,function(t){t.keyCode===w&&(d.isCtrlDown=!1),t.keyCode===m&&(d.isShiftDown=!1),t.keyCode===y&&(d.isCmdDown=!1)}),v.on("mousedown"+h,function(t){if(d.isFocused){if(t.target===d.$dropdown[0]||t.target.parentNode===d.$dropdown[0])return!1;d.$control.has(t.target).length||t.target===d.$control[0]||d.blur(t.target)}}),g.on(["scroll"+h,"resize"+h].join(" "),function(){d.isOpen&&d.positionDropdown.apply(d,arguments)}),g.on("mousemove"+h,function(){d.ignoreHover=!1}),this.revertSettings={$children:b.children().detach(),tabindex:b.attr("tabindex")},b.attr("tabindex",-1).hide().after(d.$wrapper),t.isArray(f.items)&&(d.setValue(f.items),delete f.items),x&&b.on("invalid"+h,function(t){t.preventDefault(),d.isInvalid=!0,d.refreshState()}),d.updateOriginalInput(),d.refreshItems(),d.refreshState(),d.updatePlaceholder(),d.isSetup=!0,b.is(":disabled")&&d.disable(),d.on("change",this.onChange),b.data("selectize",d),b.addClass("selectized"),d.trigger("initialize"),f.preload===!0&&d.onSearchChange("")},setupTemplates:function(){var e=this,n=e.settings.labelField,i=e.settings.optgroupLabelField,o={optgroup:function(t){return'<div class="optgroup">'+t.html+"</div>"},optgroup_header:function(t,e){return'<div class="optgroup-header">'+e(t[i])+"</div>"},option:function(t,e){return'<div class="option">'+e(t[n])+"</div>"},item:function(t,e){return'<div class="item">'+e(t[n])+"</div>"},option_create:function(t,e){return'<div class="create">Add <strong>'+e(t.input)+"</strong>&hellip;</div>"}};e.settings.render=t.extend({},o,e.settings.render)},setupCallbacks:function(){var t,e,n={initialize:"onInitialize",change:"onChange",item_add:"onItemAdd",item_remove:"onItemRemove",clear:"onClear",option_add:"onOptionAdd",option_remove:"onOptionRemove",option_clear:"onOptionClear",optgroup_add:"onOptionGroupAdd",optgroup_remove:"onOptionGroupRemove",optgroup_clear:"onOptionGroupClear",dropdown_open:"onDropdownOpen",dropdown_close:"onDropdownClose",type:"onType",load:"onLoad",focus:"onFocus",blur:"onBlur"};for(t in n)n.hasOwnProperty(t)&&(e=this.settings[n[t]],e&&this.on(t,e))},onClick:function(t){var e=this;e.isFocused||(e.focus(),t.preventDefault())},onMouseDown:function(e){var n=this,i=e.isDefaultPrevented();t(e.target);if(n.isFocused){if(e.target!==n.$control_input[0])return"single"===n.settings.mode?n.isOpen?n.close():n.open():i||n.setActiveItem(null),!1}else i||window.setTimeout(function(){n.focus()},0)},onChange:function(){this.$input.trigger("change")},onPaste:function(e){var n=this;return n.isFull()||n.isInputHidden||n.isLocked?void e.preventDefault():void(n.settings.splitOn&&setTimeout(function(){var e=n.$control_input.val();if(e.match(n.settings.splitOn))for(var i=t.trim(e).split(n.settings.splitOn),o=0,r=i.length;o<r;o++)n.createItem(i[o])},0))},onKeyPress:function(t){if(this.isLocked)return t&&t.preventDefault();var e=String.fromCharCode(t.keyCode||t.which);return this.settings.create&&"multi"===this.settings.mode&&e===this.settings.delimiter?(this.createItem(),t.preventDefault(),!1):void 0},onKeyDown:function(t){var e=(t.target===this.$control_input[0],this);if(e.isLocked)return void(t.keyCode!==b&&t.preventDefault());switch(t.keyCode){case s:if(e.isCmdDown)return void e.selectAll();break;case l:return void(e.isOpen&&(t.preventDefault(),t.stopPropagation(),e.close()));case h:if(!t.ctrlKey||t.altKey)break;case f:if(!e.isOpen&&e.hasOptions)e.open();else if(e.$activeOption){e.ignoreHover=!0;var n=e.getAdjacentOption(e.$activeOption,1);n.length&&e.setActiveOption(n,!0,!0)}return void t.preventDefault();case p:if(!t.ctrlKey||t.altKey)break;case u:if(e.$activeOption){e.ignoreHover=!0;var i=e.getAdjacentOption(e.$activeOption,-1);i.length&&e.setActiveOption(i,!0,!0)}return void t.preventDefault();case a:return void(e.isOpen&&e.$activeOption&&(e.onOptionSelect({currentTarget:e.$activeOption}),t.preventDefault()));case c:return void e.advanceSelection(-1,t);case d:return void e.advanceSelection(1,t);case b:return e.settings.selectOnTab&&e.isOpen&&e.$activeOption&&(e.onOptionSelect({currentTarget:e.$activeOption}),e.isFull()||t.preventDefault()),void(e.settings.create&&e.createItem()&&t.preventDefault());case g:case v:return void e.deleteSelection(t)}return!e.isFull()&&!e.isInputHidden||(r?t.metaKey:t.ctrlKey)?void 0:void t.preventDefault()},onKeyUp:function(t){var e=this;if(e.isLocked)return t&&t.preventDefault();var n=e.$control_input.val()||"";e.lastValue!==n&&(e.lastValue=n,e.onSearchChange(n),e.refreshOptions(),e.trigger("type",n))},onSearchChange:function(t){var e=this,n=e.settings.load;n&&(e.loadedSearches.hasOwnProperty(t)||(e.loadedSearches[t]=!0,e.load(function(i){n.apply(e,[t,i])})))},onFocus:function(t){var e=this,n=e.isFocused;return e.isDisabled?(e.blur(),t&&t.preventDefault(),!1):void(e.ignoreFocus||(e.isFocused=!0,"focus"===e.settings.preload&&e.onSearchChange(""),n||e.trigger("focus"),e.$activeItems.length||(e.showInput(),e.setActiveItem(null),e.refreshOptions(!!e.settings.openOnFocus)),e.refreshState()))},onBlur:function(t,e){var n=this;if(n.isFocused&&(n.isFocused=!1,!n.ignoreFocus)){if(!n.ignoreBlur&&document.activeElement===n.$dropdown_content[0])return n.ignoreBlur=!0,void n.onFocus(t);var i=function(){n.close(),n.setTextboxValue(""),n.setActiveItem(null),n.setActiveOption(null),n.setCaret(n.items.length),n.refreshState(),e&&e.focus&&e.focus(),n.ignoreFocus=!1,n.trigger("blur")};n.ignoreFocus=!0,n.settings.create&&n.settings.createOnBlur?n.createItem(null,!1,i):i()}},onOptionHover:function(t){this.ignoreHover||this.setActiveOption(t.currentTarget,!1)},onOptionSelect:function(e){var n,i,o=this;e.preventDefault&&(e.preventDefault(),e.stopPropagation()),i=t(e.currentTarget),i.hasClass("create")?o.createItem(null,function(){o.settings.closeAfterSelect&&o.close()}):(n=i.attr("data-value"),"undefined"!=typeof n&&(o.lastQuery=null,o.setTextboxValue(""),o.addItem(n),o.settings.closeAfterSelect?o.close():!o.settings.hideSelected&&e.type&&/mouse/.test(e.type)&&o.setActiveOption(o.getOption(n))))},onItemSelect:function(t){var e=this;e.isLocked||"multi"===e.settings.mode&&(t.preventDefault(),e.setActiveItem(t.currentTarget,t))},load:function(t){var e=this,n=e.$wrapper.addClass(e.settings.loadingClass);e.loading++,t.apply(e,[function(t){e.loading=Math.max(e.loading-1,0),t&&t.length&&(e.addOption(t),e.refreshOptions(e.isFocused&&!e.isInputHidden)),e.loading||n.removeClass(e.settings.loadingClass),e.trigger("load",t)}])},setTextboxValue:function(t){var e=this.$control_input,n=e.val()!==t;n&&(e.val(t).triggerHandler("update"),this.lastValue=t)},getValue:function(){return this.tagType===O&&this.$input.attr("multiple")?this.items:this.items.join(this.settings.delimiter)},setValue:function(t,e){var n=e?[]:["change"];F(this,n,function(){this.clear(e),this.addItems(t,e)})},setActiveItem:function(e,n){var i,o,r,s,a,l,c,u,p=this;if("single"!==p.settings.mode){if(e=t(e),!e.length)return t(p.$activeItems).removeClass("active"),p.$activeItems=[],void(p.isFocused&&p.showInput());if(i=n&&n.type.toLowerCase(),"mousedown"===i&&p.isShiftDown&&p.$activeItems.length){for(u=p.$control.children(".active:last"),s=Array.prototype.indexOf.apply(p.$control[0].childNodes,[u[0]]),a=Array.prototype.indexOf.apply(p.$control[0].childNodes,[e[0]]),s>a&&(c=s,s=a,a=c),o=s;o<=a;o++)l=p.$control[0].childNodes[o],p.$activeItems.indexOf(l)===-1&&(t(l).addClass("active"),p.$activeItems.push(l));n.preventDefault()}else"mousedown"===i&&p.isCtrlDown||"keydown"===i&&this.isShiftDown?e.hasClass("active")?(r=p.$activeItems.indexOf(e[0]),p.$activeItems.splice(r,1),e.removeClass("active")):p.$activeItems.push(e.addClass("active")[0]):(t(p.$activeItems).removeClass("active"),p.$activeItems=[e.addClass("active")[0]]);p.hideInput(),this.isFocused||p.focus()}},setActiveOption:function(e,n,i){var o,r,s,a,l,c=this;c.$activeOption&&c.$activeOption.removeClass("active"),c.$activeOption=null,e=t(e),e.length&&(c.$activeOption=e.addClass("active"),!n&&$(n)||(o=c.$dropdown_content.height(),r=c.$activeOption.outerHeight(!0),n=c.$dropdown_content.scrollTop()||0,s=c.$activeOption.offset().top-c.$dropdown_content.offset().top+n,a=s,l=s-o+r,s+r>o+n?c.$dropdown_content.stop().animate({scrollTop:l},i?c.settings.scrollDuration:0):s<n&&c.$dropdown_content.stop().animate({scrollTop:a},i?c.settings.scrollDuration:0)))},selectAll:function(){var t=this;"single"!==t.settings.mode&&(t.$activeItems=Array.prototype.slice.apply(t.$control.children(":not(input)").addClass("active")),t.$activeItems.length&&(t.hideInput(),t.close()),t.focus())},hideInput:function(){var t=this;t.setTextboxValue(""),t.$control_input.css({opacity:0,position:"absolute",left:t.rtl?1e4:-1e4}),t.isInputHidden=!0},showInput:function(){this.$control_input.css({opacity:1,position:"relative",left:0}),this.isInputHidden=!1},focus:function(){var t=this;t.isDisabled||(t.ignoreFocus=!0,t.$control_input[0].focus(),window.setTimeout(function(){t.ignoreFocus=!1,t.onFocus()},0))},blur:function(t){this.$control_input[0].blur(),this.onBlur(null,t)},getScoreFunction:function(t){return this.sifter.getScoreFunction(t,this.getSearchOptions())},getSearchOptions:function(){var t=this.settings,e=t.sortField;return"string"==typeof e&&(e=[{field:e}]),{fields:t.searchField,conjunction:t.searchConjunction,sort:e}},search:function(e){var n,i,o,r=this,s=r.settings,a=this.getSearchOptions();if(s.score&&(o=r.settings.score.apply(this,[e]),"function"!=typeof o))throw new Error('Selectize "score" setting must be a function that returns a function');if(e!==r.lastQuery?(r.lastQuery=e,i=r.sifter.search(e,t.extend(a,{score:o})),r.currentResults=i):i=t.extend(!0,{},r.currentResults),s.hideSelected)for(n=i.items.length-1;n>=0;n--)r.items.indexOf(_(i.items[n].id))!==-1&&i.items.splice(n,1);return i},refreshOptions:function(e){var n,o,r,s,a,l,c,u,p,d,f,h,g,v,m,y;"undefined"==typeof e&&(e=!0);var w=this,b=t.trim(w.$control_input.val()),O=w.search(b),C=w.$dropdown_content,x=w.$activeOption&&_(w.$activeOption.attr("data-value"));for(s=O.items.length,"number"==typeof w.settings.maxOptions&&(s=Math.min(s,w.settings.maxOptions)),a={},l=[],n=0;n<s;n++)for(c=w.options[O.items[n].id],u=w.render("option",c),p=c[w.settings.optgroupField]||"",d=t.isArray(p)?p:[p],o=0,r=d&&d.length;o<r;o++)p=d[o],w.optgroups.hasOwnProperty(p)||(p=""),a.hasOwnProperty(p)||(a[p]=document.createDocumentFragment(),l.push(p)),a[p].appendChild(u);for(this.settings.lockOptgroupOrder&&l.sort(function(t,e){var n=w.optgroups[t].$order||0,i=w.optgroups[e].$order||0;return n-i}),f=document.createDocumentFragment(),n=0,s=l.length;n<s;n++)p=l[n],w.optgroups.hasOwnProperty(p)&&a[p].childNodes.length?(h=document.createDocumentFragment(),h.appendChild(w.render("optgroup_header",w.optgroups[p])),h.appendChild(a[p]),f.appendChild(w.render("optgroup",t.extend({},w.optgroups[p],{html:j(h),dom:h})))):f.appendChild(a[p]);if(C.html(f),w.settings.highlight&&O.query.length&&O.tokens.length)for(C.removeHighlight(),n=0,s=O.tokens.length;n<s;n++)i(C,O.tokens[n].regex);if(!w.settings.hideSelected)for(n=0,s=w.items.length;n<s;n++)w.getOption(w.items[n]).addClass("selected");g=w.canCreate(b),g&&(C.prepend(w.render("option_create",{input:b})),y=t(C[0].childNodes[0])),w.hasOptions=O.items.length>0||g,w.hasOptions?(O.items.length>0?(m=x&&w.getOption(x),m&&m.length?v=m:"single"===w.settings.mode&&w.items.length&&(v=w.getOption(w.items[0])),v&&v.length||(v=y&&!w.settings.addPrecedence?w.getAdjacentOption(y,1):C.find("[data-selectable]:first"))):v=y,w.setActiveOption(v),e&&!w.isOpen&&w.open()):(w.setActiveOption(null),e&&w.isOpen&&w.close())},addOption:function(e){var n,i,o,r=this;if(t.isArray(e))for(n=0,i=e.length;n<i;n++)r.addOption(e[n]);else(o=r.registerOption(e))&&(r.userOptions[o]=!0,r.lastQuery=null,r.trigger("option_add",o,e))},registerOption:function(t){var e=_(t[this.settings.valueField]);return"undefined"!=typeof e&&null!==e&&!this.options.hasOwnProperty(e)&&(t.$order=t.$order||++this.order,this.options[e]=t,e)},registerOptionGroup:function(t){var e=_(t[this.settings.optgroupValueField]);return!!e&&(t.$order=t.$order||++this.order,this.optgroups[e]=t,e)},addOptionGroup:function(t,e){e[this.settings.optgroupValueField]=t,(t=this.registerOptionGroup(e))&&this.trigger("optgroup_add",t,e)},removeOptionGroup:function(t){this.optgroups.hasOwnProperty(t)&&(delete this.optgroups[t],this.renderCache={},this.trigger("optgroup_remove",t))},clearOptionGroups:function(){this.optgroups={},this.renderCache={},this.trigger("optgroup_clear")},updateOption:function(e,n){var i,o,r,s,a,l,c,u=this;if(e=_(e),r=_(n[u.settings.valueField]),null!==e&&u.options.hasOwnProperty(e)){if("string"!=typeof r)throw new Error("Value must be set in option data");c=u.options[e].$order,r!==e&&(delete u.options[e],s=u.items.indexOf(e),s!==-1&&u.items.splice(s,1,r)),n.$order=n.$order||c,u.options[r]=n,a=u.renderCache.item,l=u.renderCache.option,a&&(delete a[e],delete a[r]),l&&(delete l[e],delete l[r]),u.items.indexOf(r)!==-1&&(i=u.getItem(e),o=t(u.render("item",n)),i.hasClass("active")&&o.addClass("active"),i.replaceWith(o)),u.lastQuery=null,u.isOpen&&u.refreshOptions(!1)}},removeOption:function(t,e){var n=this;t=_(t);var i=n.renderCache.item,o=n.renderCache.option;i&&delete i[t],o&&delete o[t],delete n.userOptions[t],delete n.options[t],n.lastQuery=null,n.trigger("option_remove",t),n.removeItem(t,e)},clearOptions:function(){var t=this;t.loadedSearches={},t.userOptions={},t.renderCache={},t.options=t.sifter.items={},t.lastQuery=null,t.trigger("option_clear"),t.clear()},getOption:function(t){return this.getElementWithValue(t,this.$dropdown_content.find("[data-selectable]"))},getAdjacentOption:function(e,n){var i=this.$dropdown.find("[data-selectable]"),o=i.index(e)+n;return o>=0&&o<i.length?i.eq(o):t()},getElementWithValue:function(e,n){if(e=_(e),"undefined"!=typeof e&&null!==e)for(var i=0,o=n.length;i<o;i++)if(n[i].getAttribute("data-value")===e)return t(n[i]);return t()},getItem:function(t){return this.getElementWithValue(t,this.$control.children())},addItems:function(e,n){for(var i=t.isArray(e)?e:[e],o=0,r=i.length;o<r;o++)this.isPending=o<r-1,this.addItem(i[o],n)},addItem:function(e,n){var i=n?[]:["change"];F(this,i,function(){var i,o,r,s,a,l=this,c=l.settings.mode;return e=_(e),l.items.indexOf(e)!==-1?void("single"===c&&l.close()):void(l.options.hasOwnProperty(e)&&("single"===c&&l.clear(n),"multi"===c&&l.isFull()||(i=t(l.render("item",l.options[e])),a=l.isFull(),l.items.splice(l.caretPos,0,e),l.insertAtCaret(i),(!l.isPending||!a&&l.isFull())&&l.refreshState(),l.isSetup&&(r=l.$dropdown_content.find("[data-selectable]"),l.isPending||(o=l.getOption(e),s=l.getAdjacentOption(o,1).attr("data-value"),l.refreshOptions(l.isFocused&&"single"!==c),s&&l.setActiveOption(l.getOption(s))),!r.length||l.isFull()?l.close():l.positionDropdown(),l.updatePlaceholder(),l.trigger("item_add",e,i),l.updateOriginalInput({silent:n})))))})},removeItem:function(e,n){var i,o,r,s=this;i=e instanceof t?e:s.getItem(e),e=_(i.attr("data-value")),o=s.items.indexOf(e),o!==-1&&(i.remove(),i.hasClass("active")&&(r=s.$activeItems.indexOf(i[0]),s.$activeItems.splice(r,1)),s.items.splice(o,1),s.lastQuery=null,!s.settings.persist&&s.userOptions.hasOwnProperty(e)&&s.removeOption(e,n),o<s.caretPos&&s.setCaret(s.caretPos-1),s.refreshState(),s.updatePlaceholder(),s.updateOriginalInput({silent:n}),s.positionDropdown(),s.trigger("item_remove",e,i))},createItem:function(e,n){var i=this,o=i.caretPos;e=e||t.trim(i.$control_input.val()||"");var r=arguments[arguments.length-1];if("function"!=typeof r&&(r=function(){}),"boolean"!=typeof n&&(n=!0),!i.canCreate(e))return r(),!1;i.lock();var s="function"==typeof i.settings.create?this.settings.create:function(t){var e={};return e[i.settings.labelField]=t,e[i.settings.valueField]=t,e},a=I(function(t){if(i.unlock(),!t||"object"!=typeof t)return r();var e=_(t[i.settings.valueField]);return"string"!=typeof e?r():(i.setTextboxValue(""),i.addOption(t),i.setCaret(o),i.addItem(e),i.refreshOptions(n&&"single"!==i.settings.mode),void r(t))}),l=s.apply(this,[e,a]);return"undefined"!=typeof l&&a(l),!0},refreshItems:function(){this.lastQuery=null,this.isSetup&&this.addItem(this.items),this.refreshState(),this.updateOriginalInput()},refreshState:function(){this.refreshValidityState(),this.refreshClasses()},refreshValidityState:function(){if(!this.isRequired)return!1;var t=!this.items.length;this.isInvalid=t,this.$control_input.prop("required",t),this.$input.prop("required",!t)},refreshClasses:function(){var e=this,n=e.isFull(),i=e.isLocked;e.$wrapper.toggleClass("rtl",e.rtl),e.$control.toggleClass("focus",e.isFocused).toggleClass("disabled",e.isDisabled).toggleClass("required",e.isRequired).toggleClass("invalid",e.isInvalid).toggleClass("locked",i).toggleClass("full",n).toggleClass("not-full",!n).toggleClass("input-active",e.isFocused&&!e.isInputHidden).toggleClass("dropdown-active",e.isOpen).toggleClass("has-options",!t.isEmptyObject(e.options)).toggleClass("has-items",e.items.length>0),e.$control_input.data("grow",!n&&!i)},isFull:function(){return null!==this.settings.maxItems&&this.items.length>=this.settings.maxItems},updateOriginalInput:function(t){var e,n,i,o,r=this;if(t=t||{},r.tagType===O){for(i=[],e=0,n=r.items.length;e<n;e++)o=r.options[r.items[e]][r.settings.labelField]||"",i.push('<option value="'+S(r.items[e])+'" selected="selected">'+S(o)+"</option>");i.length||this.$input.attr("multiple")||i.push('<option value="" selected="selected"></option>'),
r.$input.html(i.join(""))}else r.$input.val(r.getValue()),r.$input.attr("value",r.$input.val());r.isSetup&&(t.silent||r.trigger("change",r.$input.val()))},updatePlaceholder:function(){if(this.settings.placeholder){var t=this.$control_input;this.items.length?t.removeAttr("placeholder"):t.attr("placeholder",this.settings.placeholder),t.triggerHandler("update",{force:!0})}},open:function(){var t=this;t.isLocked||t.isOpen||"multi"===t.settings.mode&&t.isFull()||(t.focus(),t.isOpen=!0,t.refreshState(),t.$dropdown.css({visibility:"hidden",display:"block"}),t.positionDropdown(),t.$dropdown.css({visibility:"visible"}),t.trigger("dropdown_open",t.$dropdown))},close:function(){var t=this,e=t.isOpen;"single"===t.settings.mode&&t.items.length&&(t.hideInput(),t.$control_input.blur()),t.isOpen=!1,t.$dropdown.hide(),t.setActiveOption(null),t.refreshState(),e&&t.trigger("dropdown_close",t.$dropdown)},positionDropdown:function(){var t=this.$control,e="body"===this.settings.dropdownParent?t.offset():t.position();e.top+=t.outerHeight(!0),this.$dropdown.css({width:t.outerWidth(),top:e.top,left:e.left})},clear:function(t){var e=this;e.items.length&&(e.$control.children(":not(input)").remove(),e.items=[],e.lastQuery=null,e.setCaret(0),e.setActiveItem(null),e.updatePlaceholder(),e.updateOriginalInput({silent:t}),e.refreshState(),e.showInput(),e.trigger("clear"))},insertAtCaret:function(e){var n=Math.min(this.caretPos,this.items.length);0===n?this.$control.prepend(e):t(this.$control[0].childNodes[n]).before(e),this.setCaret(n+1)},deleteSelection:function(e){var n,i,o,r,s,a,l,c,u,p=this;if(o=e&&e.keyCode===g?-1:1,r=D(p.$control_input[0]),p.$activeOption&&!p.settings.hideSelected&&(l=p.getAdjacentOption(p.$activeOption,-1).attr("data-value")),s=[],p.$activeItems.length){for(u=p.$control.children(".active:"+(o>0?"last":"first")),a=p.$control.children(":not(input)").index(u),o>0&&a++,n=0,i=p.$activeItems.length;n<i;n++)s.push(t(p.$activeItems[n]).attr("data-value"));e&&(e.preventDefault(),e.stopPropagation())}else(p.isFocused||"single"===p.settings.mode)&&p.items.length&&(o<0&&0===r.start&&0===r.length?s.push(p.items[p.caretPos-1]):o>0&&r.start===p.$control_input.val().length&&s.push(p.items[p.caretPos]));if(!s.length||"function"==typeof p.settings.onDelete&&p.settings.onDelete.apply(p,[s])===!1)return!1;for("undefined"!=typeof a&&p.setCaret(a);s.length;)p.removeItem(s.pop());return p.showInput(),p.positionDropdown(),p.refreshOptions(!0),l&&(c=p.getOption(l),c.length&&p.setActiveOption(c)),!0},advanceSelection:function(t,e){var n,i,o,r,s,a,l=this;0!==t&&(l.rtl&&(t*=-1),n=t>0?"last":"first",i=D(l.$control_input[0]),l.isFocused&&!l.isInputHidden?(r=l.$control_input.val().length,s=t<0?0===i.start&&0===i.length:i.start===r,s&&!r&&l.advanceCaret(t,e)):(a=l.$control.children(".active:"+n),a.length&&(o=l.$control.children(":not(input)").index(a),l.setActiveItem(null),l.setCaret(t>0?o+1:o))))},advanceCaret:function(t,e){var n,i,o=this;0!==t&&(n=t>0?"next":"prev",o.isShiftDown?(i=o.$control_input[n](),i.length&&(o.hideInput(),o.setActiveItem(i),e&&e.preventDefault())):o.setCaret(o.caretPos+t))},setCaret:function(e){var n=this;if(e="single"===n.settings.mode?n.items.length:Math.max(0,Math.min(n.items.length,e)),!n.isPending){var i,o,r,s;for(r=n.$control.children(":not(input)"),i=0,o=r.length;i<o;i++)s=t(r[i]).detach(),i<e?n.$control_input.before(s):n.$control.append(s)}n.caretPos=e},lock:function(){this.close(),this.isLocked=!0,this.refreshState()},unlock:function(){this.isLocked=!1,this.refreshState()},disable:function(){var t=this;t.$input.prop("disabled",!0),t.$control_input.prop("disabled",!0).prop("tabindex",-1),t.isDisabled=!0,t.lock()},enable:function(){var t=this;t.$input.prop("disabled",!1),t.$control_input.prop("disabled",!1).prop("tabindex",t.tabIndex),t.isDisabled=!1,t.unlock()},destroy:function(){var e=this,n=e.eventNS,i=e.revertSettings;e.trigger("destroy"),e.off(),e.$wrapper.remove(),e.$dropdown.remove(),e.$input.html("").append(i.$children).removeAttr("tabindex").removeClass("selectized").attr({tabindex:i.tabindex}).show(),e.$control_input.removeData("grow"),e.$input.removeData("selectize"),t(window).off(n),t(document).off(n),t(document.body).off(n),delete e.$input[0].selectize},render:function(e,n){var i,o,r="",s=!1,a=this;return"option"!==e&&"item"!==e||(i=_(n[a.settings.valueField]),s=!!i),s&&($(a.renderCache[e])||(a.renderCache[e]={}),a.renderCache[e].hasOwnProperty(i))?a.renderCache[e][i]:(r=t(a.settings.render[e].apply(this,[n,S])),"option"===e||"option_create"===e?r.attr("data-selectable",""):"optgroup"===e&&(o=n[a.settings.optgroupValueField]||"",r.attr("data-group",o)),"option"!==e&&"item"!==e||r.attr("data-value",i||""),s&&(a.renderCache[e][i]=r[0]),r[0])},clearCache:function(t){var e=this;"undefined"==typeof t?e.renderCache={}:delete e.renderCache[t]},canCreate:function(t){var e=this;if(!e.settings.create)return!1;var n=e.settings.createFilter;return t.length&&("function"!=typeof n||n.apply(e,[t]))&&("string"!=typeof n||new RegExp(n).test(t))&&(!(n instanceof RegExp)||n.test(t))}}),L.count=0,L.defaults={options:[],optgroups:[],plugins:[],delimiter:",",splitOn:null,persist:!0,diacritics:!0,create:!1,createOnBlur:!1,createFilter:null,highlight:!0,openOnFocus:!0,maxOptions:1e3,maxItems:null,hideSelected:null,addPrecedence:!1,selectOnTab:!1,preload:!1,allowEmptyOption:!1,closeAfterSelect:!1,scrollDuration:60,loadThrottle:300,loadingClass:"loading",dataAttr:"data-data",optgroupField:"optgroup",valueField:"value",labelField:"text",optgroupLabelField:"label",optgroupValueField:"value",lockOptgroupOrder:!1,sortField:"$order",searchField:["text"],searchConjunction:"and",mode:null,wrapperClass:"selectize-control",inputClass:"selectize-input",dropdownClass:"selectize-dropdown",dropdownContentClass:"selectize-dropdown-content",dropdownParent:null,copyClassesToDropdown:!0,render:{}},t.fn.selectize=function(e){var n=t.fn.selectize.defaults,i=t.extend({},n,e),o=i.dataAttr,r=i.labelField,s=i.valueField,a=i.optgroupField,l=i.optgroupLabelField,c=i.optgroupValueField,u=function(e,n){var a,l,c,u,p=e.attr(o);if(p)for(n.options=JSON.parse(p),a=0,l=n.options.length;a<l;a++)n.items.push(n.options[a][s]);else{var d=t.trim(e.val()||"");if(!i.allowEmptyOption&&!d.length)return;for(c=d.split(i.delimiter),a=0,l=c.length;a<l;a++)u={},u[r]=c[a],u[s]=c[a],n.options.push(u);n.items=c}},p=function(e,n){var u,p,d,f,h=n.options,g={},v=function(t){var e=o&&t.attr(o);return"string"==typeof e&&e.length?JSON.parse(e):null},m=function(e,o){e=t(e);var l=_(e.val());if(l||i.allowEmptyOption)if(g.hasOwnProperty(l)){if(o){var c=g[l][a];c?t.isArray(c)?c.push(o):g[l][a]=[c,o]:g[l][a]=o}}else{var u=v(e)||{};u[r]=u[r]||e.text(),u[s]=u[s]||l,u[a]=u[a]||o,g[l]=u,h.push(u),e.is(":selected")&&n.items.push(l)}},y=function(e){var i,o,r,s,a;for(e=t(e),r=e.attr("label"),r&&(s=v(e)||{},s[l]=r,s[c]=r,n.optgroups.push(s)),a=t("option",e),i=0,o=a.length;i<o;i++)m(a[i],r)};for(n.maxItems=e.attr("multiple")?null:1,f=e.children(),u=0,p=f.length;u<p;u++)d=f[u].tagName.toLowerCase(),"optgroup"===d?y(f[u]):"option"===d&&m(f[u])};return this.each(function(){if(!this.selectize){var o,r=t(this),s=this.tagName.toLowerCase(),a=r.attr("placeholder")||r.attr("data-placeholder");a||i.allowEmptyOption||(a=r.children('option[value=""]').text());var l={placeholder:a,options:[],optgroups:[],items:[]};"select"===s?p(r,l):u(r,l),o=new L(r,t.extend(!0,{},n,l,e))}})},t.fn.selectize.defaults=L.defaults,t.fn.selectize.support={validity:x},L.define("drag_drop",function(e){if(!t.fn.sortable)throw new Error('The "drag_drop" plugin requires jQuery UI "sortable".');if("multi"===this.settings.mode){var n=this;n.lock=function(){var t=n.lock;return function(){var e=n.$control.data("sortable");return e&&e.disable(),t.apply(n,arguments)}}(),n.unlock=function(){var t=n.unlock;return function(){var e=n.$control.data("sortable");return e&&e.enable(),t.apply(n,arguments)}}(),n.setup=function(){var e=n.setup;return function(){e.apply(this,arguments);var i=n.$control.sortable({items:"[data-value]",forcePlaceholderSize:!0,disabled:n.isLocked,start:function(t,e){e.placeholder.css("width",e.helper.css("width")),i.css({overflow:"visible"})},stop:function(){i.css({overflow:"hidden"});var e=n.$activeItems?n.$activeItems.slice():null,o=[];i.children("[data-value]").each(function(){o.push(t(this).attr("data-value"))}),n.setValue(o),n.setActiveItem(e)}})}}()}}),L.define("dropdown_header",function(e){var n=this;e=t.extend({title:"Untitled",headerClass:"selectize-dropdown-header",titleRowClass:"selectize-dropdown-header-title",labelClass:"selectize-dropdown-header-label",closeClass:"selectize-dropdown-header-close",html:function(t){return'<div class="'+t.headerClass+'"><div class="'+t.titleRowClass+'"><span class="'+t.labelClass+'">'+t.title+'</span><a href="javascript:void(0)" class="'+t.closeClass+'">&times;</a></div></div>'}},e),n.setup=function(){var i=n.setup;return function(){i.apply(n,arguments),n.$dropdown_header=t(e.html(e)),n.$dropdown.prepend(n.$dropdown_header)}}()}),L.define("optgroup_columns",function(e){var n=this;e=t.extend({equalizeWidth:!0,equalizeHeight:!0},e),this.getAdjacentOption=function(e,n){var i=e.closest("[data-group]").find("[data-selectable]"),o=i.index(e)+n;return o>=0&&o<i.length?i.eq(o):t()},this.onKeyDown=function(){var t=n.onKeyDown;return function(e){var i,o,r,s;return!this.isOpen||e.keyCode!==c&&e.keyCode!==d?t.apply(this,arguments):(n.ignoreHover=!0,s=this.$activeOption.closest("[data-group]"),i=s.find("[data-selectable]").index(this.$activeOption),s=e.keyCode===c?s.prev("[data-group]"):s.next("[data-group]"),r=s.find("[data-selectable]"),o=r.eq(Math.min(r.length-1,i)),void(o.length&&this.setActiveOption(o)))}}();var i=function(){var t,e=i.width,n=document;return"undefined"==typeof e&&(t=n.createElement("div"),t.innerHTML='<div style="width:50px;height:50px;position:absolute;left:-50px;top:-50px;overflow:auto;"><div style="width:1px;height:100px;"></div></div>',t=t.firstChild,n.body.appendChild(t),e=i.width=t.offsetWidth-t.clientWidth,n.body.removeChild(t)),e},o=function(){var o,r,s,a,l,c,u;if(u=t("[data-group]",n.$dropdown_content),r=u.length,r&&n.$dropdown_content.width()){if(e.equalizeHeight){for(s=0,o=0;o<r;o++)s=Math.max(s,u.eq(o).height());u.css({height:s})}e.equalizeWidth&&(c=n.$dropdown_content.innerWidth()-i(),a=Math.round(c/r),u.css({width:a}),r>1&&(l=c-a*(r-1),u.eq(r-1).css({width:l})))}};(e.equalizeHeight||e.equalizeWidth)&&(k.after(this,"positionDropdown",o),k.after(this,"refreshOptions",o))}),L.define("remove_button",function(e){e=t.extend({label:"&times;",title:"Remove",className:"remove",append:!0},e);var n=function(e,n){n.className="remove-single";var i=e,o='<a href="javascript:void(0)" class="'+n.className+'" tabindex="-1" title="'+S(n.title)+'">'+n.label+"</a>",r=function(t,e){return t+e};e.setup=function(){var s=i.setup;return function(){if(n.append){var a=t(i.$input.context).attr("id"),l=(t("#"+a),i.settings.render.item);i.settings.render.item=function(t){return r(l.apply(e,arguments),o)}}s.apply(e,arguments),e.$control.on("click","."+n.className,function(t){t.preventDefault(),i.isLocked||i.clear()})}}()},i=function(e,n){var i=e,o='<a href="javascript:void(0)" class="'+n.className+'" tabindex="-1" title="'+S(n.title)+'">'+n.label+"</a>",r=function(t,e){var n=t.search(/(<\/[^>]+>\s*)$/);return t.substring(0,n)+e+t.substring(n)};e.setup=function(){var s=i.setup;return function(){if(n.append){var a=i.settings.render.item;i.settings.render.item=function(t){return r(a.apply(e,arguments),o)}}s.apply(e,arguments),e.$control.on("click","."+n.className,function(e){if(e.preventDefault(),!i.isLocked){var n=t(e.currentTarget).parent();i.setActiveItem(n),i.deleteSelection()&&i.setCaret(i.items.length)}})}}()};return"single"===this.settings.mode?void n(this,e):void i(this,e)}),L.define("restore_on_backspace",function(t){var e=this;t.text=t.text||function(t){return t[this.settings.labelField]},this.onKeyDown=function(){var n=e.onKeyDown;return function(e){var i,o;return e.keyCode===g&&""===this.$control_input.val()&&!this.$activeItems.length&&(i=this.caretPos-1,i>=0&&i<this.items.length)?(o=this.options[this.items[i]],this.deleteSelection(e)&&(this.setTextboxValue(t.text.apply(this,[o])),this.refreshOptions(!0)),void e.preventDefault()):n.apply(this,arguments)}}()}),L}),function(t){if("object"==typeof exports&&"undefined"!=typeof module)module.exports=t();else if("function"==typeof define&&define.amd)define([],t);else{var e;e="undefined"!=typeof window?window:"undefined"!=typeof global?global:"undefined"!=typeof self?self:this,e.Clipboard=t()}}(function(){var t;return function t(e,n,i){function o(s,a){if(!n[s]){if(!e[s]){var l="function"==typeof require&&require;if(!a&&l)return l(s,!0);if(r)return r(s,!0);var c=new Error("Cannot find module '"+s+"'");throw c.code="MODULE_NOT_FOUND",c}var u=n[s]={exports:{}};e[s][0].call(u.exports,function(t){var n=e[s][1][t];return o(n?n:t)},u,u.exports,t,e,n,i)}return n[s].exports}for(var r="function"==typeof require&&require,s=0;s<i.length;s++)o(i[s]);return o}({1:[function(t,e,n){var i=t("matches-selector");e.exports=function(t,e,n){for(var o=n?t:t.parentNode;o&&o!==document;){if(i(o,e))return o;o=o.parentNode}}},{"matches-selector":5}],2:[function(t,e,n){function i(t,e,n,i,r){var s=o.apply(this,arguments);return t.addEventListener(n,s,r),{destroy:function(){t.removeEventListener(n,s,r)}}}function o(t,e,n,i){return function(n){n.delegateTarget=r(n.target,e,!0),n.delegateTarget&&i.call(t,n)}}var r=t("closest");e.exports=i},{closest:1}],3:[function(t,e,n){n.node=function(t){return void 0!==t&&t instanceof HTMLElement&&1===t.nodeType},n.nodeList=function(t){var e=Object.prototype.toString.call(t);return void 0!==t&&("[object NodeList]"===e||"[object HTMLCollection]"===e)&&"length"in t&&(0===t.length||n.node(t[0]))},n.string=function(t){return"string"==typeof t||t instanceof String},n.fn=function(t){var e=Object.prototype.toString.call(t);return"[object Function]"===e}},{}],4:[function(t,e,n){function i(t,e,n){if(!t&&!e&&!n)throw new Error("Missing required arguments");if(!a.string(e))throw new TypeError("Second argument must be a String");if(!a.fn(n))throw new TypeError("Third argument must be a Function");if(a.node(t))return o(t,e,n);if(a.nodeList(t))return r(t,e,n);if(a.string(t))return s(t,e,n);throw new TypeError("First argument must be a String, HTMLElement, HTMLCollection, or NodeList")}function o(t,e,n){return t.addEventListener(e,n),{destroy:function(){t.removeEventListener(e,n)}}}function r(t,e,n){return Array.prototype.forEach.call(t,function(t){t.addEventListener(e,n)}),{destroy:function(){Array.prototype.forEach.call(t,function(t){t.removeEventListener(e,n)})}}}function s(t,e,n){return l(document.body,t,e,n)}var a=t("./is"),l=t("delegate");e.exports=i},{"./is":3,delegate:2}],5:[function(t,e,n){function i(t,e){if(r)return r.call(t,e);for(var n=t.parentNode.querySelectorAll(e),i=0;i<n.length;++i)if(n[i]==t)return!0;return!1}var o=Element.prototype,r=o.matchesSelector||o.webkitMatchesSelector||o.mozMatchesSelector||o.msMatchesSelector||o.oMatchesSelector;e.exports=i},{}],6:[function(t,e,n){function i(t){var e;if("INPUT"===t.nodeName||"TEXTAREA"===t.nodeName)t.focus(),t.setSelectionRange(0,t.value.length),e=t.value;else{t.hasAttribute("contenteditable")&&t.focus();var n=window.getSelection(),i=document.createRange();i.selectNodeContents(t),n.removeAllRanges(),n.addRange(i),e=n.toString()}return e}e.exports=i},{}],7:[function(t,e,n){function i(){}i.prototype={on:function(t,e,n){var i=this.e||(this.e={});return(i[t]||(i[t]=[])).push({fn:e,ctx:n}),this},once:function(t,e,n){function i(){o.off(t,i),e.apply(n,arguments)}var o=this;return i._=e,this.on(t,i,n)},emit:function(t){var e=[].slice.call(arguments,1),n=((this.e||(this.e={}))[t]||[]).slice(),i=0,o=n.length;for(i;i<o;i++)n[i].fn.apply(n[i].ctx,e);return this},off:function(t,e){var n=this.e||(this.e={}),i=n[t],o=[];if(i&&e)for(var r=0,s=i.length;r<s;r++)i[r].fn!==e&&i[r].fn._!==e&&o.push(i[r]);return o.length?n[t]=o:delete n[t],this}},e.exports=i},{}],8:[function(e,n,i){!function(o,r){if("function"==typeof t&&t.amd)t(["module","select"],r);else if("undefined"!=typeof i)r(n,e("select"));else{var s={exports:{}};r(s,o.select),o.clipboardAction=s.exports}}(this,function(t,e){"use strict";function n(t){return t&&t.__esModule?t:{default:t}}function i(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}var o=n(e),r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol?"symbol":typeof t},s=function(){function t(t,e){for(var n=0;n<e.length;n++){var i=e[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}return function(e,n,i){return n&&t(e.prototype,n),i&&t(e,i),e}}(),a=function(){function t(e){i(this,t),this.resolveOptions(e),this.initSelection()}return t.prototype.resolveOptions=function(){var t=arguments.length<=0||void 0===arguments[0]?{}:arguments[0];this.action=t.action,this.emitter=t.emitter,this.target=t.target,this.text=t.text,this.trigger=t.trigger,this.selectedText=""},t.prototype.initSelection=function(){this.text?this.selectFake():this.target&&this.selectTarget()},t.prototype.selectFake=function(){var t=this,e="rtl"==document.documentElement.getAttribute("dir");this.removeFake(),this.fakeHandlerCallback=function(){return t.removeFake()},this.fakeHandler=document.body.addEventListener("click",this.fakeHandlerCallback)||!0,this.fakeElem=document.createElement("textarea"),this.fakeElem.style.fontSize="12pt",this.fakeElem.style.border="0",this.fakeElem.style.padding="0",this.fakeElem.style.margin="0",this.fakeElem.style.position="absolute",this.fakeElem.style[e?"right":"left"]="-9999px",this.fakeElem.style.top=(window.pageYOffset||document.documentElement.scrollTop)+"px",this.fakeElem.setAttribute("readonly",""),this.fakeElem.value=this.text,document.body.appendChild(this.fakeElem),this.selectedText=(0,o.default)(this.fakeElem),this.copyText()},t.prototype.removeFake=function(){this.fakeHandler&&(document.body.removeEventListener("click",this.fakeHandlerCallback),this.fakeHandler=null,this.fakeHandlerCallback=null),this.fakeElem&&(document.body.removeChild(this.fakeElem),this.fakeElem=null)},t.prototype.selectTarget=function(){this.selectedText=(0,o.default)(this.target),this.copyText()},t.prototype.copyText=function(){var t=void 0;try{t=document.execCommand(this.action)}catch(e){t=!1}this.handleResult(t)},t.prototype.handleResult=function(t){t?this.emitter.emit("success",{action:this.action,text:this.selectedText,trigger:this.trigger,clearSelection:this.clearSelection.bind(this)}):this.emitter.emit("error",{action:this.action,trigger:this.trigger,clearSelection:this.clearSelection.bind(this)})},t.prototype.clearSelection=function(){this.target&&this.target.blur(),window.getSelection().removeAllRanges()},t.prototype.destroy=function(){this.removeFake()},s(t,[{key:"action",set:function(){var t=arguments.length<=0||void 0===arguments[0]?"copy":arguments[0];if(this._action=t,"copy"!==this._action&&"cut"!==this._action)throw new Error('Invalid "action" value, use either "copy" or "cut"')},get:function(){return this._action}},{key:"target",set:function(t){if(void 0!==t){if(!t||"object"!==("undefined"==typeof t?"undefined":r(t))||1!==t.nodeType)throw new Error('Invalid "target" value, use a valid Element');if("copy"===this.action&&t.hasAttribute("disabled"))throw new Error('Invalid "target" attribute. Please use "readonly" instead of "disabled" attribute');if("cut"===this.action&&(t.hasAttribute("readonly")||t.hasAttribute("disabled")))throw new Error('Invalid "target" attribute. You can\'t cut text from elements with "readonly" or "disabled" attributes');this._target=t}},get:function(){return this._target}}]),t}();t.exports=a})},{select:6}],9:[function(e,n,i){!function(o,r){if("function"==typeof t&&t.amd)t(["module","./clipboard-action","tiny-emitter","good-listener"],r);else if("undefined"!=typeof i)r(n,e("./clipboard-action"),e("tiny-emitter"),e("good-listener"));else{var s={exports:{}};r(s,o.clipboardAction,o.tinyEmitter,o.goodListener),o.clipboard=s.exports}}(this,function(t,e,n,i){"use strict";function o(t){return t&&t.__esModule?t:{default:t}}function r(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function s(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}function a(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}function l(t,e){var n="data-clipboard-"+t;if(e.hasAttribute(n))return e.getAttribute(n)}var c=o(e),u=o(n),p=o(i),d=function(t){function e(n,i){r(this,e);var o=s(this,t.call(this));return o.resolveOptions(i),o.listenClick(n),o}return a(e,t),e.prototype.resolveOptions=function(){var t=arguments.length<=0||void 0===arguments[0]?{}:arguments[0];this.action="function"==typeof t.action?t.action:this.defaultAction,this.target="function"==typeof t.target?t.target:this.defaultTarget,this.text="function"==typeof t.text?t.text:this.defaultText},e.prototype.listenClick=function(t){var e=this;this.listener=(0,p.default)(t,"click",function(t){return e.onClick(t)})},e.prototype.onClick=function(t){var e=t.delegateTarget||t.currentTarget;this.clipboardAction&&(this.clipboardAction=null),this.clipboardAction=new c.default({action:this.action(e),target:this.target(e),text:this.text(e),trigger:e,emitter:this})},e.prototype.defaultAction=function(t){return l("action",t)},e.prototype.defaultTarget=function(t){var e=l("target",t);if(e)return document.querySelector(e)},e.prototype.defaultText=function(t){return l("text",t)},e.prototype.destroy=function(){this.listener.destroy(),this.clipboardAction&&(this.clipboardAction.destroy(),this.clipboardAction=null)},e}(u.default);t.exports=d})},{"./clipboard-action":8,"good-listener":4,"tiny-emitter":7}]},{},[9])(9)}),function(t,e){"use strict";var n=function(){function t(t,e,n,i){return"string"==typeof t&&"function"==typeof e&&(n=parseInt(n||10,10),a("actions",t,e,n,i)),p}function e(){var t=u.call(arguments),e=t.shift();return"string"==typeof e&&c("actions",e,t),p}function n(t,e){return"string"==typeof t&&s("actions",t,e),p}function i(t,e,n,i){return"string"==typeof t&&"function"==typeof e&&(n=parseInt(n||10,10),a("filters",t,e,n,i)),p}function o(){var t=u.call(arguments),e=t.shift();return"string"==typeof e?c("filters",e,t):p}function r(t,e){return"string"==typeof t&&s("filters",t,e),p}function s(t,e,n,i){var o,r,s;if(d[t][e])if(n)if(o=d[t][e],i)for(s=o.length;s--;)r=o[s],r.callback===n&&r.context===i&&o.splice(s,1);else for(s=o.length;s--;)o[s].callback===n&&o.splice(s,1);else d[t][e]=[]}function a(t,e,n,i,o){var r={callback:n,priority:i,context:o},s=d[t][e];s?(s.push(r),s=l(s)):s=[r],d[t][e]=s}function l(t){for(var e,n,i,o=1,r=t.length;o<r;o++){for(e=t[o],n=o;(i=t[n-1])&&i.priority>e.priority;)t[n]=t[n-1],--n;t[n]=e}return t}function c(t,e,n){var i,o,r=d[t][e];if(!r)return"filters"===t&&n[0];if(o=r.length,"filters"===t)for(i=0;i<o;i++)n[0]=r[i].callback.apply(r[i].context,n);else for(i=0;i<o;i++)r[i].callback.apply(r[i].context,n);return"filters"!==t||n[0]}var u=Array.prototype.slice,p={removeFilter:r,applyFilters:o,addFilter:i,removeAction:n,doAction:e,addAction:t},d={actions:{},filters:{}};return p};t.wp=t.wp||{},t.wp.hooks=new n}(window),function(t){t(".pretty-select").selectize();var e=new Clipboard("#notification_merge_tags .inside ul li code");e.on("success",function(e){var n=t(e.trigger),i=n.text();n.text(notification.copied),setTimeout(function(){n.text(i)},800)}),t("#notification_trigger_select").selectize().change(function(){var e=t(this),n=t("#notification_merge_tags .inside"),i=t("#notification_merge_tags");i.fadeTo(200,.5);var o={action:"notification_get_merge_tags",trigger:e.val()};t.post(ajaxurl,o,function(o){if(0==o.success){n.html("<p>"+o.data+"</p>");var r={}}else{ul=t("<ul>");var r=o.data;t.each(r,function(t,e){ul.append('<li><code data-clipboard-text="{'+e+'}">{'+e+"}</code></li>")}),n.html(ul)}wp.hooks.doAction("notification.changed_trigger",e.val(),r),i.fadeTo(200,1)})});var n=function(){var e=0;if(1==t("#notification_recipients .recipient").length)var n=!0;else var n=!1;t("#notification_recipients .recipient").each(function(){var i=t(this),o=i.find(".actions .dashicons-trash"),r=i.find("input, select");n?o.addClass("disabled"):o.removeClass("disabled"),r.each(function(){var n=t(this),i=n.attr("name");n.attr("name",i.replace(/notification_recipient\[[0-9]+\]/,"notification_recipient["+e+"]"))}),e++})},i=function(e,i){e="undefined"!=typeof e?e:"",i="undefined"!=typeof i?i:"";var o=t("#notification_recipients .recipients");o.fadeTo(200,.5);var r={action:"notification_add_recipient",type:e,value:i};t.post(ajaxurl,r,function(e){if(0==e.success)alert(e.data);else{var i=t(e.data);o.append(i)}o.fadeTo(200,1),n()})};t("#notification_recipients").on("click","#notification_add_recipient",function(t){t.preventDefault(),i()}),t("#notification_recipients").on("click",".recipient .actions .dashicons-trash",function(e){e.preventDefault();var i=t(this),o=i.parents(".recipient").first();return!i.hasClass("disabled")&&void o.animate({left:"50px",opacity:0},400,"linear",function(){t(this).remove(),n()})}),t("#notification_recipients").on("change",".recipient .group select",function(){var e=t(this),i=e.parent().next(".value").find("input, select").first(),o=i.parent();o.fadeTo(200,.5);var r={action:"notification_get_recipient_input",recipient_name:e.val()};t.post(ajaxurl,r,function(e){if(0==e.success)alert(e.data);else{var i=t(e.data);o.html(i),"undefined"!=typeof i.data("update")&&wp.hooks.doAction("notification.update_input",i,i.data("value"),i.data("update"))}o.fadeTo(200,1),n()})});var o=function(){t("#notification_recipients .recipient").each(function(){var e=t(this).find(".field.value select, .field.value input");"undefined"!=typeof e.data("update")&&wp.hooks.doAction("notification.update_input",e,e.data("value"),e.data("update"))})};t(document).ready(o),wp.hooks.addAction("notification.changed_trigger",o),wp.hooks.addAction("notification.update_input",function(e,n,i){if("email_merge_tags"==i){var o=t("#notification_trigger_select").val(),r=e.parent();r.fadeTo(200,.5);var s={action:"notification_get_email_merge_tags",trigger:o};t.post(ajaxurl,s,function(i){0==i.success?alert(i.data):(e.find("option").remove(),e.append(t("<option>")),t.each(i.data,function(i,o){var r={value:i,text:o};i==n&&(r.selected="selected"),e.append(t("<option>",r))})),r.fadeTo(200,1)})}}),wp.hooks.addAction("notification.changed_trigger",function(e,n){if(""==tinymce.activeEditor.getContent()){var o={action:"notification_get_defaults",trigger:e};t.post(ajaxurl,o,function(e){if(0==e.success)alert(e.data);else{var n=e.data;n.title&&t("#title").val(n.title).focus(),n.template&&tinymce.activeEditor.setContent(n.template),n.recipients&&(t("#notification_recipients .recipients .recipient").first().remove(),t.each(n.recipients,function(t,e){i(t,e)}))}})}}),t(".notification-notice").on("click",".dismiss-beg-message",function(e){e.preventDefault();var n=t(this),i={action:"notification_dismiss_beg_message",nonce:n.data("nonce")};t.post(ajaxurl,i,function(t){n.parents(".notification-notice").slideUp()})}),t('#the-list tr[data-slug="notification"] .deactivate a').click(function(t){t.preventDefault()}),t("body").on("submit","#notification-plugin-feedback-form",function(e){e.preventDefault();var n=t(this);n.find(".spinner").addClass("is-active");var i={action:"notification_send_feedback",form:n.serializeArray()};t.post(ajaxurl,i,function(e){window.location.href=t('#the-list tr[data-slug="notification"] .deactivate a').data("deactivate")})})}(jQuery);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInZlbmRvci9zZWxlY3RpemUuanMiLCJ2ZW5kb3IvY2xpcGJvYXJkLmpzIiwidmVuZG9yL2V2ZW50LW1hbmFnZXIuanMiLCJhZG1pbi5qcyJdLCJuYW1lcyI6WyJyb290IiwiZmFjdG9yeSIsImRlZmluZSIsImFtZCIsImV4cG9ydHMiLCJtb2R1bGUiLCJTaWZ0ZXIiLCJ0aGlzIiwiaXRlbXMiLCJzZXR0aW5ncyIsImRpYWNyaXRpY3MiLCJwcm90b3R5cGUiLCJ0b2tlbml6ZSIsInF1ZXJ5IiwidHJpbSIsIlN0cmluZyIsInRvTG93ZXJDYXNlIiwibGVuZ3RoIiwiaSIsIm4iLCJyZWdleCIsImxldHRlciIsInRva2VucyIsIndvcmRzIiwic3BsaXQiLCJlc2NhcGVfcmVnZXgiLCJESUFDUklUSUNTIiwiaGFzT3duUHJvcGVydHkiLCJyZXBsYWNlIiwiUmVnRXhwIiwicHVzaCIsInN0cmluZyIsIml0ZXJhdG9yIiwib2JqZWN0IiwiY2FsbGJhY2siLCJpc19hcnJheSIsIkFycmF5IiwiZm9yRWFjaCIsImtleSIsImFwcGx5IiwiZ2V0U2NvcmVGdW5jdGlvbiIsInNlYXJjaCIsIm9wdGlvbnMiLCJzZWxmIiwiZmllbGRzIiwidG9rZW5fY291bnQiLCJuZXN0aW5nIiwicHJlcGFyZVNlYXJjaCIsInNjb3JlVmFsdWUiLCJ2YWx1ZSIsInRva2VuIiwic2NvcmUiLCJwb3MiLCJzY29yZU9iamVjdCIsImZpZWxkX2NvdW50IiwiZGF0YSIsImdldGF0dHIiLCJzdW0iLCJjb25qdW5jdGlvbiIsImdldFNvcnRGdW5jdGlvbiIsImZpZWxkIiwiZmllbGRzX2NvdW50IiwibXVsdGlwbGllciIsIm11bHRpcGxpZXJzIiwiZ2V0X2ZpZWxkIiwiaW1wbGljaXRfc2NvcmUiLCJzb3J0Iiwic29ydF9lbXB0eSIsIm5hbWUiLCJyZXN1bHQiLCJpZCIsInVuc2hpZnQiLCJkaXJlY3Rpb24iLCJzcGxpY2UiLCJhIiwiYiIsImNtcCIsImV4dGVuZCIsIm9wdGlvbl9maWVsZHMiLCJvcHRpb25fc29ydCIsIm9wdGlvbl9zb3J0X2VtcHR5IiwidG90YWwiLCJmbl9zb3J0IiwiZm5fc2NvcmUiLCJpdGVtIiwiZmlsdGVyIiwibGltaXQiLCJzbGljZSIsImFzY2lpZm9sZCIsImsiLCJhcmd1bWVudHMiLCJvYmoiLCJuYW1lcyIsInNoaWZ0Iiwic3RyIiwiaXNBcnJheSIsIiQiLCJPYmplY3QiLCJ0b1N0cmluZyIsImNhbGwiLCJjIiwiZCIsImUiLCJmIiwiZyIsImgiLCJqIiwibCIsIm8iLCJwIiwicSIsInIiLCJzIiwidCIsInUiLCJ2IiwidyIsIngiLCJ5IiwieiIsImNodW5rIiwiZm9yZWlnbmxldHRlcnMiLCJsb29rdXAiLCJzdWJzdHJpbmciLCJjaGFyQXQiLCJyZWdleHAiLCJmb3JlaWdubGV0dGVyIiwiTWljcm9QbHVnaW4iLCJtaXhpbiIsIkludGVyZmFjZSIsInBsdWdpbnMiLCJpbml0aWFsaXplUGx1Z2lucyIsInF1ZXVlIiwicmVxdWVzdGVkIiwibG9hZGVkIiwidXRpbHMiLCJyZXF1aXJlIiwibG9hZFBsdWdpbiIsInBsdWdpbiIsIkVycm9yIiwiZm4iLCJ2QXJnIiwiU2VsZWN0aXplIiwialF1ZXJ5IiwiaGlnaGxpZ2h0IiwiJGVsZW1lbnQiLCJwYXR0ZXJuIiwibm9kZSIsInNraXAiLCJub2RlVHlwZSIsIm1hdGNoIiwic3Bhbm5vZGUiLCJkb2N1bWVudCIsImNyZWF0ZUVsZW1lbnQiLCJjbGFzc05hbWUiLCJtaWRkbGViaXQiLCJzcGxpdFRleHQiLCJtaWRkbGVjbG9uZSIsImNsb25lTm9kZSIsImFwcGVuZENoaWxkIiwicGFyZW50Tm9kZSIsInJlcGxhY2VDaGlsZCIsImNoaWxkTm9kZXMiLCJ0ZXN0IiwidGFnTmFtZSIsImVhY2giLCJyZW1vdmVIaWdobGlnaHQiLCJmaW5kIiwiZmlyc3RDaGlsZCIsIm5vZGVOYW1lIiwicGFyZW50Iiwibm9ybWFsaXplIiwiZW5kIiwiTWljcm9FdmVudCIsIm9uIiwiZXZlbnQiLCJmY3QiLCJfZXZlbnRzIiwib2ZmIiwiaW5kZXhPZiIsInRyaWdnZXIiLCJkZXN0T2JqZWN0IiwicHJvcHMiLCJJU19NQUMiLCJuYXZpZ2F0b3IiLCJ1c2VyQWdlbnQiLCJLRVlfQSIsIktFWV9SRVRVUk4iLCJLRVlfRVNDIiwiS0VZX0xFRlQiLCJLRVlfVVAiLCJLRVlfUCIsIktFWV9SSUdIVCIsIktFWV9ET1dOIiwiS0VZX04iLCJLRVlfQkFDS1NQQUNFIiwiS0VZX0RFTEVURSIsIktFWV9TSElGVCIsIktFWV9DTUQiLCJLRVlfQ1RSTCIsIktFWV9UQUIiLCJUQUdfU0VMRUNUIiwiVEFHX0lOUFVUIiwiU1VQUE9SVFNfVkFMSURJVFlfQVBJIiwid2luZG93IiwidmFsaWRpdHkiLCJpc3NldCIsImhhc2hfa2V5IiwiZXNjYXBlX2h0bWwiLCJob29rIiwiYmVmb3JlIiwibWV0aG9kIiwib3JpZ2luYWwiLCJhZnRlciIsIm9uY2UiLCJjYWxsZWQiLCJkZWJvdW5jZSIsImRlbGF5IiwidGltZW91dCIsImFyZ3MiLCJjbGVhclRpbWVvdXQiLCJzZXRUaW1lb3V0IiwiZGVib3VuY2VfZXZlbnRzIiwidHlwZXMiLCJ0eXBlIiwiZXZlbnRfYXJncyIsIndhdGNoQ2hpbGRFdmVudCIsIiRwYXJlbnQiLCJzZWxlY3RvciIsImNoaWxkIiwidGFyZ2V0IiwiY3VycmVudFRhcmdldCIsImdldFNlbGVjdGlvbiIsImlucHV0Iiwic3RhcnQiLCJzZWxlY3Rpb25TdGFydCIsInNlbGVjdGlvbkVuZCIsInNlbGVjdGlvbiIsImZvY3VzIiwic2VsIiwiY3JlYXRlUmFuZ2UiLCJzZWxMZW4iLCJ0ZXh0IiwibW92ZVN0YXJ0IiwidHJhbnNmZXJTdHlsZXMiLCIkZnJvbSIsIiR0byIsInByb3BlcnRpZXMiLCJzdHlsZXMiLCJjc3MiLCJtZWFzdXJlU3RyaW5nIiwiJHRlc3QiLCJwb3NpdGlvbiIsInRvcCIsImxlZnQiLCJ3aWR0aCIsInBhZGRpbmciLCJ3aGl0ZVNwYWNlIiwiYXBwZW5kVG8iLCJyZW1vdmUiLCJhdXRvR3JvdyIsIiRpbnB1dCIsImN1cnJlbnRXaWR0aCIsInVwZGF0ZSIsImtleUNvZGUiLCJwcmludGFibGUiLCJwbGFjZWhvbGRlciIsImNoYXJhY3RlciIsIm1ldGFLZXkiLCJhbHRLZXkiLCJmb3JjZSIsInZhbCIsInNoaWZ0S2V5IiwiZnJvbUNoYXJDb2RlIiwidG9VcHBlckNhc2UiLCJhdHRyIiwidHJpZ2dlckhhbmRsZXIiLCJkb21Ub1N0cmluZyIsInRtcCIsImlubmVySFRNTCIsImxvZ0Vycm9yIiwibWVzc2FnZSIsImNvbXBvbmVudCIsImNvbnNvbGUiLCJlcnJvciIsImV4cGxhbmF0aW9uIiwiZ3JvdXAiLCJncm91cEVuZCIsImRpciIsInNlbGVjdGl6ZSIsImNvbXB1dGVkU3R5bGUiLCJnZXRDb21wdXRlZFN0eWxlIiwiZ2V0UHJvcGVydHlWYWx1ZSIsImN1cnJlbnRTdHlsZSIsInBhcmVudHMiLCJvcmRlciIsInRhYkluZGV4IiwidGFnVHlwZSIsInJ0bCIsImV2ZW50TlMiLCJjb3VudCIsImhpZ2hsaWdodGVkVmFsdWUiLCJpc09wZW4iLCJpc0Rpc2FibGVkIiwiaXNSZXF1aXJlZCIsImlzIiwiaXNJbnZhbGlkIiwiaXNMb2NrZWQiLCJpc0ZvY3VzZWQiLCJpc0lucHV0SGlkZGVuIiwiaXNTZXR1cCIsImlzU2hpZnREb3duIiwiaXNDbWREb3duIiwiaXNDdHJsRG93biIsImlnbm9yZUZvY3VzIiwiaWdub3JlQmx1ciIsImlnbm9yZUhvdmVyIiwiaGFzT3B0aW9ucyIsImN1cnJlbnRSZXN1bHRzIiwibGFzdFZhbHVlIiwiY2FyZXRQb3MiLCJsb2FkaW5nIiwibG9hZGVkU2VhcmNoZXMiLCIkYWN0aXZlT3B0aW9uIiwiJGFjdGl2ZUl0ZW1zIiwib3B0Z3JvdXBzIiwidXNlck9wdGlvbnMiLCJyZW5kZXJDYWNoZSIsIm9uU2VhcmNoQ2hhbmdlIiwibG9hZFRocm90dGxlIiwic2lmdGVyIiwicmVnaXN0ZXJPcHRpb24iLCJyZWdpc3Rlck9wdGlvbkdyb3VwIiwibW9kZSIsIm1heEl0ZW1zIiwiaGlkZVNlbGVjdGVkIiwic2V0dXBDYWxsYmFja3MiLCJzZXR1cFRlbXBsYXRlcyIsInNldHVwIiwiJHdyYXBwZXIiLCIkY29udHJvbCIsIiRjb250cm9sX2lucHV0IiwiJGRyb3Bkb3duIiwiJGRyb3Bkb3duX2NvbnRlbnQiLCIkZHJvcGRvd25fcGFyZW50IiwiaW5wdXRNb2RlIiwiY2xhc3NlcyIsImNsYXNzZXNfcGx1Z2lucyIsImlucHV0SWQiLCIkd2luZG93IiwiJGRvY3VtZW50IiwiYWRkQ2xhc3MiLCJ3cmFwcGVyQ2xhc3MiLCJpbnB1dENsYXNzIiwiZHJvcGRvd25QYXJlbnQiLCJkcm9wZG93bkNsYXNzIiwiaGlkZSIsImRyb3Bkb3duQ29udGVudENsYXNzIiwiY29weUNsYXNzZXNUb0Ryb3Bkb3duIiwic3R5bGUiLCJqb2luIiwic3BsaXRPbiIsImRlbGltaXRlciIsImRlbGltaXRlckVzY2FwZWQiLCJvbk9wdGlvbkhvdmVyIiwib25PcHRpb25TZWxlY3QiLCJvbkl0ZW1TZWxlY3QiLCJtb3VzZWRvd24iLCJvbk1vdXNlRG93biIsImNsaWNrIiwib25DbGljayIsInN0b3BQcm9wYWdhdGlvbiIsImtleWRvd24iLCJvbktleURvd24iLCJrZXl1cCIsIm9uS2V5VXAiLCJrZXlwcmVzcyIsIm9uS2V5UHJlc3MiLCJyZXNpemUiLCJwb3NpdGlvbkRyb3Bkb3duIiwiYmx1ciIsIm9uQmx1ciIsIm9uRm9jdXMiLCJwYXN0ZSIsIm9uUGFzdGUiLCJoYXMiLCJyZXZlcnRTZXR0aW5ncyIsIiRjaGlsZHJlbiIsImNoaWxkcmVuIiwiZGV0YWNoIiwidGFiaW5kZXgiLCJzZXRWYWx1ZSIsInByZXZlbnREZWZhdWx0IiwicmVmcmVzaFN0YXRlIiwidXBkYXRlT3JpZ2luYWxJbnB1dCIsInJlZnJlc2hJdGVtcyIsInVwZGF0ZVBsYWNlaG9sZGVyIiwiZGlzYWJsZSIsIm9uQ2hhbmdlIiwicHJlbG9hZCIsImZpZWxkX2xhYmVsIiwibGFiZWxGaWVsZCIsImZpZWxkX29wdGdyb3VwIiwib3B0Z3JvdXBMYWJlbEZpZWxkIiwidGVtcGxhdGVzIiwib3B0Z3JvdXAiLCJodG1sIiwib3B0Z3JvdXBfaGVhZGVyIiwiZXNjYXBlIiwib3B0aW9uIiwib3B0aW9uX2NyZWF0ZSIsInJlbmRlciIsImNhbGxiYWNrcyIsImluaXRpYWxpemUiLCJjaGFuZ2UiLCJpdGVtX2FkZCIsIml0ZW1fcmVtb3ZlIiwiY2xlYXIiLCJvcHRpb25fYWRkIiwib3B0aW9uX3JlbW92ZSIsIm9wdGlvbl9jbGVhciIsIm9wdGdyb3VwX2FkZCIsIm9wdGdyb3VwX3JlbW92ZSIsIm9wdGdyb3VwX2NsZWFyIiwiZHJvcGRvd25fb3BlbiIsImRyb3Bkb3duX2Nsb3NlIiwibG9hZCIsImRlZmF1bHRQcmV2ZW50ZWQiLCJpc0RlZmF1bHRQcmV2ZW50ZWQiLCJjbG9zZSIsIm9wZW4iLCJzZXRBY3RpdmVJdGVtIiwiaXNGdWxsIiwicGFzdGVkVGV4dCIsInNwbGl0SW5wdXQiLCJjcmVhdGVJdGVtIiwid2hpY2giLCJjcmVhdGUiLCJzZWxlY3RBbGwiLCJjdHJsS2V5IiwiJG5leHQiLCJnZXRBZGphY2VudE9wdGlvbiIsInNldEFjdGl2ZU9wdGlvbiIsIiRwcmV2IiwiYWR2YW5jZVNlbGVjdGlvbiIsInNlbGVjdE9uVGFiIiwiZGVsZXRlU2VsZWN0aW9uIiwicmVmcmVzaE9wdGlvbnMiLCJ3YXNGb2N1c2VkIiwic2hvd0lucHV0Iiwib3Blbk9uRm9jdXMiLCJkZXN0IiwiYWN0aXZlRWxlbWVudCIsImRlYWN0aXZhdGUiLCJzZXRUZXh0Ym94VmFsdWUiLCJzZXRDYXJldCIsImNyZWF0ZU9uQmx1ciIsIiR0YXJnZXQiLCJoYXNDbGFzcyIsImNsb3NlQWZ0ZXJTZWxlY3QiLCJsYXN0UXVlcnkiLCJhZGRJdGVtIiwiZ2V0T3B0aW9uIiwibG9hZGluZ0NsYXNzIiwicmVzdWx0cyIsIk1hdGgiLCJtYXgiLCJhZGRPcHRpb24iLCJyZW1vdmVDbGFzcyIsImNoYW5nZWQiLCJnZXRWYWx1ZSIsInNpbGVudCIsImV2ZW50cyIsImFkZEl0ZW1zIiwiJGl0ZW0iLCJldmVudE5hbWUiLCJpZHgiLCJiZWdpbiIsInN3YXAiLCIkbGFzdCIsImhpZGVJbnB1dCIsIiRvcHRpb24iLCJzY3JvbGwiLCJhbmltYXRlIiwiaGVpZ2h0X21lbnUiLCJoZWlnaHRfaXRlbSIsInNjcm9sbF90b3AiLCJzY3JvbGxfYm90dG9tIiwiaGVpZ2h0Iiwib3V0ZXJIZWlnaHQiLCJzY3JvbGxUb3AiLCJvZmZzZXQiLCJzdG9wIiwic2Nyb2xsRHVyYXRpb24iLCJvcGFjaXR5IiwiZ2V0U2VhcmNoT3B0aW9ucyIsInNvcnRGaWVsZCIsInNlYXJjaEZpZWxkIiwic2VhcmNoQ29uanVuY3Rpb24iLCJjYWxjdWxhdGVTY29yZSIsInRyaWdnZXJEcm9wZG93biIsImdyb3VwcyIsImdyb3Vwc19vcmRlciIsIm9wdGlvbl9odG1sIiwiaHRtbF9jaGlsZHJlbiIsImhhc19jcmVhdGVfb3B0aW9uIiwiJGFjdGl2ZSIsIiRhY3RpdmVfYmVmb3JlIiwiJGNyZWF0ZSIsImFjdGl2ZV9iZWZvcmUiLCJtYXhPcHRpb25zIiwibWluIiwib3B0Z3JvdXBGaWVsZCIsImNyZWF0ZURvY3VtZW50RnJhZ21lbnQiLCJsb2NrT3B0Z3JvdXBPcmRlciIsImFfb3JkZXIiLCIkb3JkZXIiLCJiX29yZGVyIiwiZG9tIiwiY2FuQ3JlYXRlIiwicHJlcGVuZCIsImFkZFByZWNlZGVuY2UiLCJ2YWx1ZUZpZWxkIiwib3B0Z3JvdXBWYWx1ZUZpZWxkIiwiYWRkT3B0aW9uR3JvdXAiLCJyZW1vdmVPcHRpb25Hcm91cCIsImNsZWFyT3B0aW9uR3JvdXBzIiwidXBkYXRlT3B0aW9uIiwiJGl0ZW1fbmV3IiwidmFsdWVfbmV3IiwiaW5kZXhfaXRlbSIsImNhY2hlX2l0ZW1zIiwiY2FjaGVfb3B0aW9ucyIsIm9yZGVyX29sZCIsImdldEl0ZW0iLCJyZXBsYWNlV2l0aCIsInJlbW92ZU9wdGlvbiIsInJlbW92ZUl0ZW0iLCJjbGVhck9wdGlvbnMiLCJnZXRFbGVtZW50V2l0aFZhbHVlIiwiJG9wdGlvbnMiLCJpbmRleCIsImVxIiwiJGVscyIsImdldEF0dHJpYnV0ZSIsInZhbHVlcyIsImlzUGVuZGluZyIsInZhbHVlX25leHQiLCJ3YXNGdWxsIiwiaW5zZXJ0QXRDYXJldCIsInBlcnNpc3QiLCJjYXJldCIsImxvY2siLCJ1bmxvY2siLCJvdXRwdXQiLCJyZWZyZXNoVmFsaWRpdHlTdGF0ZSIsInJlZnJlc2hDbGFzc2VzIiwiaW52YWxpZCIsInByb3AiLCJ0b2dnbGVDbGFzcyIsImlzRW1wdHlPYmplY3QiLCJvcHRzIiwibGFiZWwiLCJyZW1vdmVBdHRyIiwidmlzaWJpbGl0eSIsImRpc3BsYXkiLCJvdXRlcldpZHRoIiwiJGVsIiwib3B0aW9uX3NlbGVjdCIsIiRvcHRpb25fc2VsZWN0IiwiJHRhaWwiLCJvbkRlbGV0ZSIsInBvcCIsInRhaWwiLCJ2YWx1ZUxlbmd0aCIsImN1cnNvckF0RWRnZSIsImFkdmFuY2VDYXJldCIsIiRhZGoiLCIkY2hpbGQiLCJhcHBlbmQiLCJlbmFibGUiLCJkZXN0cm95Iiwic2hvdyIsInJlbW92ZURhdGEiLCJib2R5IiwidGVtcGxhdGVOYW1lIiwiY2FjaGUiLCJjbGVhckNhY2hlIiwiY3JlYXRlRmlsdGVyIiwiZGVmYXVsdHMiLCJhbGxvd0VtcHR5T3B0aW9uIiwiZGF0YUF0dHIiLCJzZXR0aW5nc191c2VyIiwiYXR0cl9kYXRhIiwiZmllbGRfdmFsdWUiLCJmaWVsZF9vcHRncm91cF9sYWJlbCIsImZpZWxkX29wdGdyb3VwX3ZhbHVlIiwiaW5pdF90ZXh0Ym94Iiwic2V0dGluZ3NfZWxlbWVudCIsImRhdGFfcmF3IiwiSlNPTiIsInBhcnNlIiwiaW5pdF9zZWxlY3QiLCJvcHRpb25zTWFwIiwicmVhZERhdGEiLCJhcnIiLCJhZGRHcm91cCIsIiRvcHRncm91cCIsImluc3RhbmNlIiwidGFnX25hbWUiLCJzdXBwb3J0Iiwic29ydGFibGUiLCJmb3JjZVBsYWNlaG9sZGVyU2l6ZSIsImRpc2FibGVkIiwidWkiLCJoZWxwZXIiLCJvdmVyZmxvdyIsImFjdGl2ZSIsInRpdGxlIiwiaGVhZGVyQ2xhc3MiLCJ0aXRsZVJvd0NsYXNzIiwibGFiZWxDbGFzcyIsImNsb3NlQ2xhc3MiLCIkZHJvcGRvd25faGVhZGVyIiwiZXF1YWxpemVXaWR0aCIsImVxdWFsaXplSGVpZ2h0IiwiY2xvc2VzdCIsInByZXYiLCJuZXh0IiwiZ2V0U2Nyb2xsYmFyV2lkdGgiLCJkaXYiLCJkb2MiLCJvZmZzZXRXaWR0aCIsImNsaWVudFdpZHRoIiwicmVtb3ZlQ2hpbGQiLCJlcXVhbGl6ZVNpemVzIiwiaGVpZ2h0X21heCIsIndpZHRoX2xhc3QiLCJ3aWR0aF9wYXJlbnQiLCIkb3B0Z3JvdXBzIiwiaW5uZXJXaWR0aCIsInJvdW5kIiwic2luZ2xlQ2xvc2UiLCJ0aGlzUmVmIiwiaHRtbF9jb250YWluZXIiLCJodG1sX2VsZW1lbnQiLCJjb250ZXh0IiwicmVuZGVyX2l0ZW0iLCJtdWx0aUNsb3NlIiwiZ2xvYmFsIiwiQ2xpcGJvYXJkIiwiY29kZSIsIjEiLCJtYXRjaGVzIiwiZWxlbWVudCIsImNoZWNrWW9TZWxmIiwibWF0Y2hlcy1zZWxlY3RvciIsIjIiLCJkZWxlZ2F0ZSIsInVzZUNhcHR1cmUiLCJsaXN0ZW5lckZuIiwibGlzdGVuZXIiLCJhZGRFdmVudExpc3RlbmVyIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsImRlbGVnYXRlVGFyZ2V0IiwiMyIsInVuZGVmaW5lZCIsIkhUTUxFbGVtZW50Iiwibm9kZUxpc3QiLCI0IiwibGlzdGVuIiwiVHlwZUVycm9yIiwibGlzdGVuTm9kZSIsImxpc3Rlbk5vZGVMaXN0IiwibGlzdGVuU2VsZWN0b3IiLCIuL2lzIiwiNSIsImVsIiwidmVuZG9yIiwibm9kZXMiLCJxdWVyeVNlbGVjdG9yQWxsIiwicHJvdG8iLCJFbGVtZW50IiwibWF0Y2hlc1NlbGVjdG9yIiwid2Via2l0TWF0Y2hlc1NlbGVjdG9yIiwibW96TWF0Y2hlc1NlbGVjdG9yIiwibXNNYXRjaGVzU2VsZWN0b3IiLCJvTWF0Y2hlc1NlbGVjdG9yIiwiNiIsInNlbGVjdCIsInNlbGVjdGVkVGV4dCIsInNldFNlbGVjdGlvblJhbmdlIiwiaGFzQXR0cmlidXRlIiwicmFuZ2UiLCJzZWxlY3ROb2RlQ29udGVudHMiLCJyZW1vdmVBbGxSYW5nZXMiLCJhZGRSYW5nZSIsIjciLCJFIiwiY3R4IiwiXyIsImVtaXQiLCJldnRBcnIiLCJsZW4iLCJldnRzIiwibGl2ZUV2ZW50cyIsIjgiLCJtb2QiLCJjbGlwYm9hcmRBY3Rpb24iLCJfc2VsZWN0IiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsIl9fZXNNb2R1bGUiLCJkZWZhdWx0IiwiX2NsYXNzQ2FsbENoZWNrIiwiQ29uc3RydWN0b3IiLCJfc2VsZWN0MiIsIl90eXBlb2YiLCJTeW1ib2wiLCJjb25zdHJ1Y3RvciIsIl9jcmVhdGVDbGFzcyIsImRlZmluZVByb3BlcnRpZXMiLCJkZXNjcmlwdG9yIiwiZW51bWVyYWJsZSIsImNvbmZpZ3VyYWJsZSIsIndyaXRhYmxlIiwiZGVmaW5lUHJvcGVydHkiLCJwcm90b1Byb3BzIiwic3RhdGljUHJvcHMiLCJDbGlwYm9hcmRBY3Rpb24iLCJyZXNvbHZlT3B0aW9ucyIsImluaXRTZWxlY3Rpb24iLCJhY3Rpb24iLCJlbWl0dGVyIiwic2VsZWN0RmFrZSIsInNlbGVjdFRhcmdldCIsIl90aGlzIiwiaXNSVEwiLCJkb2N1bWVudEVsZW1lbnQiLCJyZW1vdmVGYWtlIiwiZmFrZUhhbmRsZXJDYWxsYmFjayIsImZha2VIYW5kbGVyIiwiZmFrZUVsZW0iLCJmb250U2l6ZSIsImJvcmRlciIsIm1hcmdpbiIsInBhZ2VZT2Zmc2V0Iiwic2V0QXR0cmlidXRlIiwiY29weVRleHQiLCJzdWNjZWVkZWQiLCJleGVjQ29tbWFuZCIsImVyciIsImhhbmRsZVJlc3VsdCIsImNsZWFyU2VsZWN0aW9uIiwiYmluZCIsInNldCIsIl9hY3Rpb24iLCJnZXQiLCJfdGFyZ2V0IiwiOSIsInRpbnlFbWl0dGVyIiwiZ29vZExpc3RlbmVyIiwiY2xpcGJvYXJkIiwiX2NsaXBib2FyZEFjdGlvbiIsIl90aW55RW1pdHRlciIsIl9nb29kTGlzdGVuZXIiLCJfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybiIsIlJlZmVyZW5jZUVycm9yIiwiX2luaGVyaXRzIiwic3ViQ2xhc3MiLCJzdXBlckNsYXNzIiwic2V0UHJvdG90eXBlT2YiLCJfX3Byb3RvX18iLCJnZXRBdHRyaWJ1dGVWYWx1ZSIsInN1ZmZpeCIsImF0dHJpYnV0ZSIsIl9jbGlwYm9hcmRBY3Rpb24yIiwiX3RpbnlFbWl0dGVyMiIsIl9nb29kTGlzdGVuZXIyIiwiX0VtaXR0ZXIiLCJsaXN0ZW5DbGljayIsImRlZmF1bHRBY3Rpb24iLCJkZWZhdWx0VGFyZ2V0IiwiZGVmYXVsdFRleHQiLCJfdGhpczIiLCJxdWVyeVNlbGVjdG9yIiwiLi9jbGlwYm9hcmQtYWN0aW9uIiwiZ29vZC1saXN0ZW5lciIsInRpbnktZW1pdHRlciIsIkV2ZW50TWFuYWdlciIsImFkZEFjdGlvbiIsInByaW9yaXR5IiwicGFyc2VJbnQiLCJfYWRkSG9vayIsIk1ldGhvZHNBdmFpbGFibGUiLCJkb0FjdGlvbiIsIl9ydW5Ib29rIiwicmVtb3ZlQWN0aW9uIiwiX3JlbW92ZUhvb2siLCJhZGRGaWx0ZXIiLCJhcHBseUZpbHRlcnMiLCJyZW1vdmVGaWx0ZXIiLCJoYW5kbGVycyIsImhhbmRsZXIiLCJTVE9SQUdFIiwiaG9va09iamVjdCIsImhvb2tzIiwiX2hvb2tJbnNlcnRTb3J0IiwidG1wSG9vayIsInByZXZIb29rIiwiYWN0aW9ucyIsImZpbHRlcnMiLCJ3cCIsIm1lcmdlX3RhZ19jbGlwYm9hcmQiLCIkY29kZSIsInRhZyIsIm5vdGlmaWNhdGlvbiIsImNvcGllZCIsIiRzZWxlY3QiLCIkY29udGFpbmVyIiwiJG1ldGFib3giLCJmYWRlVG8iLCJwb3N0IiwiYWpheHVybCIsInJlc3BvbnNlIiwic3VjY2VzcyIsInRhZ3MiLCJ1bCIsInVwZGF0ZV9yZWNpcGllbnRzIiwiJHJvdyIsIiRyZW1vdmVfYnV0dG9uIiwiJGlucHV0cyIsInBhcnRfbmFtZSIsImFkZF9yZWNpcGllbnQiLCJhbGVydCIsIiRidXR0b24iLCJmaXJzdCIsInJlY2lwaWVudF9uYW1lIiwidXBkYXRlX2FsbF9pbnB1dHMiLCJyZWFkeSIsInVwZGF0ZV90eXBlIiwidGFnX3ZhbHVlIiwiYXR0cyIsInNlbGVjdGVkIiwidHJpZ2dlcl9zbHVnIiwidGlueW1jZSIsImFjdGl2ZUVkaXRvciIsImdldENvbnRlbnQiLCJ0ZW1wbGF0ZSIsInNldENvbnRlbnQiLCJyZWNpcGllbnRzIiwibm9uY2UiLCJzbGlkZVVwIiwiJGZvcm0iLCJmb3JtIiwic2VyaWFsaXplQXJyYXkiLCJsb2NhdGlvbiIsImhyZWYiXSwibWFwcGluZ3MiOiJDQWdCQSxTQUFBQSxFQUFBQyxHQUNBLGtCQUFBQyxTQUFBQSxPQUFBQyxJQUNBRCxPQUFBLFNBQUFELEdBQ0EsZ0JBQUFHLFNBQ0FDLE9BQUFELFFBQUFILElBRUFELEVBQUFNLE9BQUFMLEtBRUFNLEtBQUEsV0FXQSxHQUFBRCxHQUFBLFNBQUFFLEVBQUFDLEdBQ0FGLEtBQUFDLE1BQUFBLEVBQ0FELEtBQUFFLFNBQUFBLElBQUFDLFlBQUEsR0FVQUosR0FBQUssVUFBQUMsU0FBQSxTQUFBQyxHQUVBLEdBREFBLEVBQUFDLEVBQUFDLE9BQUFGLEdBQUEsSUFBQUcsZ0JBQ0FILElBQUFBLEVBQUFJLE9BQUEsUUFFQSxJQUFBQyxHQUFBQyxFQUFBQyxFQUFBQyxFQUNBQyxLQUNBQyxFQUFBVixFQUFBVyxNQUFBLEtBRUEsS0FBQU4sRUFBQSxFQUFBQyxFQUFBSSxFQUFBTixPQUFBQyxFQUFBQyxFQUFBRCxJQUFBLENBRUEsR0FEQUUsRUFBQUssRUFBQUYsRUFBQUwsSUFDQVgsS0FBQUUsU0FBQUMsV0FDQSxJQUFBVyxJQUFBSyxHQUNBQSxFQUFBQyxlQUFBTixLQUNBRCxFQUFBQSxFQUFBUSxRQUFBLEdBQUFDLFFBQUFSLEVBQUEsS0FBQUssRUFBQUwsSUFJQUMsR0FBQVEsTUFDQUMsT0FBQVIsRUFBQUwsR0FDQUUsTUFBQSxHQUFBUyxRQUFBVCxFQUFBLE9BSUEsTUFBQUUsSUFjQWhCLEVBQUFLLFVBQUFxQixTQUFBLFNBQUFDLEVBQUFDLEdBQ0EsR0FBQUYsRUFFQUEsR0FEQUcsRUFBQUYsR0FDQUcsTUFBQXpCLFVBQUEwQixT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aEIsR0FBQTZCLE9BQ0ExZ0IsRUFBQSxVQUFBK0ssSUFBQThULEVBQUE2QixPQUFBNVgsUUFHQStWLEVBQUFrUSxVQUNBSCxRQUFBQyxhQUFBRyxXQUFBblEsRUFBQWtRLFVBR0FsUSxFQUFBb1EsYUFFQWp2QixFQUFBLG1EQUFBbXVCLFFBQUFoa0IsU0FFQW5LLEVBQUFxRSxLQUFBd2EsRUFBQW9RLFdBQUEsU0FBQWpuQixFQUFBL0ssR0FDQSt3QixFQUFBaG1CLEVBQUEvSyxZQWVBK0MsRUFBQSx3QkFBQThFLEdBQUEsUUFBQSx1QkFBQSxTQUFBQyxHQUVBQSxFQUFBeU4sZ0JBRUEsSUFBQTBiLEdBQUFsdUIsRUFBQXpGLE1BRUFnRCxHQUNBb3FCLE9BQUEsbUNBQ0F1SCxNQUFBaEIsRUFBQTN3QixLQUFBLFNBR0F5QyxHQUFBcXRCLEtBQUFDLFFBQUEvdkIsRUFBQSxTQUFBZ3dCLEdBQ0FXLEVBQUE1aEIsUUFBQSx3QkFBQTZpQixjQU9BbnZCLEVBQUEsd0RBQUFpUixNQUFBLFNBQUFsTSxHQUNBQSxFQUFBeU4sbUJBR0F4UyxFQUFBLFFBQUE4RSxHQUFBLFNBQUEscUNBQUEsU0FBQUMsR0FFQUEsRUFBQXlOLGdCQUVBLElBQUE0YyxHQUFBcHZCLEVBQUF6RixLQUVBNjBCLEdBQUE3cUIsS0FBQSxZQUFBd0wsU0FBQSxZQUVBLElBQUF4UyxJQUNBb3FCLE9BQUEsNkJBQ0EwSCxLQUFBRCxFQUFBRSxpQkFHQXR2QixHQUFBcXRCLEtBQUFDLFFBQUEvdkIsRUFBQSxTQUFBZ3dCLEdBQ0EzbUIsT0FBQTJvQixTQUFBQyxLQUFBeHZCLEVBQUEsd0RBQUF6QyxLQUFBLG1CQUtBd0YiLCJmaWxlIjoic2NyaXB0cy5taW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIHNpZnRlci5qc1xuICogQ29weXJpZ2h0IChjKSAyMDEzIEJyaWFuIFJlYXZpcyAmIGNvbnRyaWJ1dG9yc1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7IHlvdSBtYXkgbm90IHVzZSB0aGlzXG4gKiBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdDpcbiAqIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmUgZGlzdHJpYnV0ZWQgdW5kZXJcbiAqIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUywgV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0ZcbiAqIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZVxuICogZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZCBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqXG4gKiBAYXV0aG9yIEJyaWFuIFJlYXZpcyA8YnJpYW5AdGhpcmRyb3V0ZS5jb20+XG4gKi9cblxuKGZ1bmN0aW9uKHJvb3QsIGZhY3RvcnkpIHtcblx0aWYgKHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCkge1xuXHRcdGRlZmluZSgnc2lmdGVyJywgZmFjdG9yeSk7XG5cdH0gZWxzZSBpZiAodHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnKSB7XG5cdFx0bW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KCk7XG5cdH0gZWxzZSB7XG5cdFx0cm9vdC5TaWZ0ZXIgPSBmYWN0b3J5KCk7XG5cdH1cbn0odGhpcywgZnVuY3Rpb24oKSB7XG5cblx0LyoqXG5cdCAqIFRleHR1YWxseSBzZWFyY2hlcyBhcnJheXMgYW5kIGhhc2hlcyBvZiBvYmplY3RzXG5cdCAqIGJ5IHByb3BlcnR5IChvciBtdWx0aXBsZSBwcm9wZXJ0aWVzKS4gRGVzaWduZWRcblx0ICogc3BlY2lmaWNhbGx5IGZvciBhdXRvY29tcGxldGUuXG5cdCAqXG5cdCAqIEBjb25zdHJ1Y3RvclxuXHQgKiBAcGFyYW0ge2FycmF5fG9iamVjdH0gaXRlbXNcblx0ICogQHBhcmFtIHtvYmplY3R9IGl0ZW1zXG5cdCAqL1xuXHR2YXIgU2lmdGVyID0gZnVuY3Rpb24oaXRlbXMsIHNldHRpbmdzKSB7XG5cdFx0dGhpcy5pdGVtcyA9IGl0ZW1zO1xuXHRcdHRoaXMuc2V0dGluZ3MgPSBzZXR0aW5ncyB8fCB7ZGlhY3JpdGljczogdHJ1ZX07XG5cdH07XG5cblx0LyoqXG5cdCAqIFNwbGl0cyBhIHNlYXJjaCBzdHJpbmcgaW50byBhbiBhcnJheSBvZiBpbmRpdmlkdWFsXG5cdCAqIHJlZ2V4cHMgdG8gYmUgdXNlZCB0byBtYXRjaCByZXN1bHRzLlxuXHQgKlxuXHQgKiBAcGFyYW0ge3N0cmluZ30gcXVlcnlcblx0ICogQHJldHVybnMge2FycmF5fVxuXHQgKi9cblx0U2lmdGVyLnByb3RvdHlwZS50b2tlbml6ZSA9IGZ1bmN0aW9uKHF1ZXJ5KSB7XG5cdFx0cXVlcnkgPSB0cmltKFN0cmluZyhxdWVyeSB8fCAnJykudG9Mb3dlckNhc2UoKSk7XG5cdFx0aWYgKCFxdWVyeSB8fCAhcXVlcnkubGVuZ3RoKSByZXR1cm4gW107XG5cblx0XHR2YXIgaSwgbiwgcmVnZXgsIGxldHRlcjtcblx0XHR2YXIgdG9rZW5zID0gW107XG5cdFx0dmFyIHdvcmRzID0gcXVlcnkuc3BsaXQoLyArLyk7XG5cblx0XHRmb3IgKGkgPSAwLCBuID0gd29yZHMubGVuZ3RoOyBpIDwgbjsgaSsrKSB7XG5cdFx0XHRyZWdleCA9IGVzY2FwZV9yZWdleCh3b3Jkc1tpXSk7XG5cdFx0XHRpZiAodGhpcy5zZXR0aW5ncy5kaWFjcml0aWNzKSB7XG5cdFx0XHRcdGZvciAobGV0dGVyIGluIERJQUNSSVRJQ1MpIHtcblx0XHRcdFx0XHRpZiAoRElBQ1JJVElDUy5oYXNPd25Qcm9wZXJ0eShsZXR0ZXIpKSB7XG5cdFx0XHRcdFx0XHRyZWdleCA9IHJlZ2V4LnJlcGxhY2UobmV3IFJlZ0V4cChsZXR0ZXIsICdnJyksIERJQUNSSVRJQ1NbbGV0dGVyXSk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHR0b2tlbnMucHVzaCh7XG5cdFx0XHRcdHN0cmluZyA6IHdvcmRzW2ldLFxuXHRcdFx0XHRyZWdleCAgOiBuZXcgUmVnRXhwKHJlZ2V4LCAnaScpXG5cdFx0XHR9KTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdG9rZW5zO1xuXHR9O1xuXG5cdC8qKlxuXHQgKiBJdGVyYXRlcyBvdmVyIGFycmF5cyBhbmQgaGFzaGVzLlxuXHQgKlxuXHQgKiBgYGBcblx0ICogdGhpcy5pdGVyYXRvcih0aGlzLml0ZW1zLCBmdW5jdGlvbihpdGVtLCBpZCkge1xuXHQgKiAgICAvLyBpbnZva2VkIGZvciBlYWNoIGl0ZW1cblx0ICogfSk7XG5cdCAqIGBgYFxuXHQgKlxuXHQgKiBAcGFyYW0ge2FycmF5fG9iamVjdH0gb2JqZWN0XG5cdCAqL1xuXHRTaWZ0ZXIucHJvdG90eXBlLml0ZXJhdG9yID0gZnVuY3Rpb24ob2JqZWN0LCBjYWxsYmFjaykge1xuXHRcdHZhciBpdGVyYXRvcjtcblx0XHRpZiAoaXNfYXJyYXkob2JqZWN0KSkge1xuXHRcdFx0aXRlcmF0b3IgPSBBcnJheS5wcm90b3R5cGUuZm9yRWFjaCB8fCBmdW5jdGlvbihjYWxsYmFjaykge1xuXHRcdFx0XHRmb3IgKHZhciBpID0gMCwgbiA9IHRoaXMubGVuZ3RoOyBpIDwgbjsgaSsrKSB7XG5cdFx0XHRcdFx0Y2FsbGJhY2sodGhpc1tpXSwgaSwgdGhpcyk7XG5cdFx0XHRcdH1cblx0XHRcdH07XG5cdFx0fSBlbHNlIHtcblx0XHRcdGl0ZXJhdG9yID0gZnVuY3Rpb24oY2FsbGJhY2spIHtcblx0XHRcdFx0Zm9yICh2YXIga2V5IGluIHRoaXMpIHtcblx0XHRcdFx0XHRpZiAodGhpcy5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XG5cdFx0XHRcdFx0XHRjYWxsYmFjayh0aGlzW2tleV0sIGtleSwgdGhpcyk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9O1xuXHRcdH1cblxuXHRcdGl0ZXJhdG9yLmFwcGx5KG9iamVjdCwgW2NhbGxiYWNrXSk7XG5cdH07XG5cblx0LyoqXG5cdCAqIFJldHVybnMgYSBmdW5jdGlvbiB0byBiZSB1c2VkIHRvIHNjb3JlIGluZGl2aWR1YWwgcmVzdWx0cy5cblx0ICpcblx0ICogR29vZCBtYXRjaGVzIHdpbGwgaGF2ZSBhIGhpZ2hlciBzY29yZSB0aGFuIHBvb3IgbWF0Y2hlcy5cblx0ICogSWYgYW4gaXRlbSBpcyBub3QgYSBtYXRjaCwgMCB3aWxsIGJlIHJldHVybmVkIGJ5IHRoZSBmdW5jdGlvbi5cblx0ICpcblx0ICogQHBhcmFtIHtvYmplY3R8c3RyaW5nfSBzZWFyY2hcblx0ICogQHBhcmFtIHtvYmplY3R9IG9wdGlvbnMgKG9wdGlvbmFsKVxuXHQgKiBAcmV0dXJucyB7ZnVuY3Rpb259XG5cdCAqL1xuXHRTaWZ0ZXIucHJvdG90eXBlLmdldFNjb3JlRnVuY3Rpb24gPSBmdW5jdGlvbihzZWFyY2gsIG9wdGlvbnMpIHtcblx0XHR2YXIgc2VsZiwgZmllbGRzLCB0b2tlbnMsIHRva2VuX2NvdW50LCBuZXN0aW5nO1xuXG5cdFx0c2VsZiAgICAgICAgPSB0aGlzO1xuXHRcdHNlYXJjaCAgICAgID0gc2VsZi5wcmVwYXJlU2VhcmNoKHNlYXJjaCwgb3B0aW9ucyk7XG5cdFx0dG9rZW5zICAgICAgPSBzZWFyY2gudG9rZW5zO1xuXHRcdGZpZWxkcyAgICAgID0gc2VhcmNoLm9wdGlvbnMuZmllbGRzO1xuXHRcdHRva2VuX2NvdW50ID0gdG9rZW5zLmxlbmd0aDtcblx0XHRuZXN0aW5nICAgICA9IHNlYXJjaC5vcHRpb25zLm5lc3Rpbmc7XG5cblx0XHQvKipcblx0XHQgKiBDYWxjdWxhdGVzIGhvdyBjbG9zZSBvZiBhIG1hdGNoIHRoZVxuXHRcdCAqIGdpdmVuIHZhbHVlIGlzIGFnYWluc3QgYSBzZWFyY2ggdG9rZW4uXG5cdFx0ICpcblx0XHQgKiBAcGFyYW0ge21peGVkfSB2YWx1ZVxuXHRcdCAqIEBwYXJhbSB7b2JqZWN0fSB0b2tlblxuXHRcdCAqIEByZXR1cm4ge251bWJlcn1cblx0XHQgKi9cblx0XHR2YXIgc2NvcmVWYWx1ZSA9IGZ1bmN0aW9uKHZhbHVlLCB0b2tlbikge1xuXHRcdFx0dmFyIHNjb3JlLCBwb3M7XG5cblx0XHRcdGlmICghdmFsdWUpIHJldHVybiAwO1xuXHRcdFx0dmFsdWUgPSBTdHJpbmcodmFsdWUgfHwgJycpO1xuXHRcdFx0cG9zID0gdmFsdWUuc2VhcmNoKHRva2VuLnJlZ2V4KTtcblx0XHRcdGlmIChwb3MgPT09IC0xKSByZXR1cm4gMDtcblx0XHRcdHNjb3JlID0gdG9rZW4uc3RyaW5nLmxlbmd0aCAvIHZhbHVlLmxlbmd0aDtcblx0XHRcdGlmIChwb3MgPT09IDApIHNjb3JlICs9IDAuNTtcblx0XHRcdHJldHVybiBzY29yZTtcblx0XHR9O1xuXG5cdFx0LyoqXG5cdFx0ICogQ2FsY3VsYXRlcyB0aGUgc2NvcmUgb2YgYW4gb2JqZWN0XG5cdFx0ICogYWdhaW5zdCB0aGUgc2VhcmNoIHF1ZXJ5LlxuXHRcdCAqXG5cdFx0ICogQHBhcmFtIHtvYmplY3R9IHRva2VuXG5cdFx0ICogQHBhcmFtIHtvYmplY3R9IGRhdGFcblx0XHQgKiBAcmV0dXJuIHtudW1iZXJ9XG5cdFx0ICovXG5cdFx0dmFyIHNjb3JlT2JqZWN0ID0gKGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIGZpZWxkX2NvdW50ID0gZmllbGRzLmxlbmd0aDtcblx0XHRcdGlmICghZmllbGRfY291bnQpIHtcblx0XHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCkgeyByZXR1cm4gMDsgfTtcblx0XHRcdH1cblx0XHRcdGlmIChmaWVsZF9jb3VudCA9PT0gMSkge1xuXHRcdFx0XHRyZXR1cm4gZnVuY3Rpb24odG9rZW4sIGRhdGEpIHtcblx0XHRcdFx0XHRyZXR1cm4gc2NvcmVWYWx1ZShnZXRhdHRyKGRhdGEsIGZpZWxkc1swXSwgbmVzdGluZyksIHRva2VuKTtcblx0XHRcdFx0fTtcblx0XHRcdH1cblx0XHRcdHJldHVybiBmdW5jdGlvbih0b2tlbiwgZGF0YSkge1xuXHRcdFx0XHRmb3IgKHZhciBpID0gMCwgc3VtID0gMDsgaSA8IGZpZWxkX2NvdW50OyBpKyspIHtcblx0XHRcdFx0XHRzdW0gKz0gc2NvcmVWYWx1ZShnZXRhdHRyKGRhdGEsIGZpZWxkc1tpXSwgbmVzdGluZyksIHRva2VuKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gc3VtIC8gZmllbGRfY291bnQ7XG5cdFx0XHR9O1xuXHRcdH0pKCk7XG5cblx0XHRpZiAoIXRva2VuX2NvdW50KSB7XG5cdFx0XHRyZXR1cm4gZnVuY3Rpb24oKSB7IHJldHVybiAwOyB9O1xuXHRcdH1cblx0XHRpZiAodG9rZW5fY291bnQgPT09IDEpIHtcblx0XHRcdHJldHVybiBmdW5jdGlvbihkYXRhKSB7XG5cdFx0XHRcdHJldHVybiBzY29yZU9iamVjdCh0b2tlbnNbMF0sIGRhdGEpO1xuXHRcdFx0fTtcblx0XHR9XG5cblx0XHRpZiAoc2VhcmNoLm9wdGlvbnMuY29uanVuY3Rpb24gPT09ICdhbmQnKSB7XG5cdFx0XHRyZXR1cm4gZnVuY3Rpb24oZGF0YSkge1xuXHRcdFx0XHR2YXIgc2NvcmU7XG5cdFx0XHRcdGZvciAodmFyIGkgPSAwLCBzdW0gPSAwOyBpIDwgdG9rZW5fY291bnQ7IGkrKykge1xuXHRcdFx0XHRcdHNjb3JlID0gc2NvcmVPYmplY3QodG9rZW5zW2ldLCBkYXRhKTtcblx0XHRcdFx0XHRpZiAoc2NvcmUgPD0gMCkgcmV0dXJuIDA7XG5cdFx0XHRcdFx0c3VtICs9IHNjb3JlO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiBzdW0gLyB0b2tlbl9jb3VudDtcblx0XHRcdH07XG5cdFx0fSBlbHNlIHtcblx0XHRcdHJldHVybiBmdW5jdGlvbihkYXRhKSB7XG5cdFx0XHRcdGZvciAodmFyIGkgPSAwLCBzdW0gPSAwOyBpIDwgdG9rZW5fY291bnQ7IGkrKykge1xuXHRcdFx0XHRcdHN1bSArPSBzY29yZU9iamVjdCh0b2tlbnNbaV0sIGRhdGEpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiBzdW0gLyB0b2tlbl9jb3VudDtcblx0XHRcdH07XG5cdFx0fVxuXHR9O1xuXG5cdC8qKlxuXHQgKiBSZXR1cm5zIGEgZnVuY3Rpb24gdGhhdCBjYW4gYmUgdXNlZCB0byBjb21wYXJlIHR3b1xuXHQgKiByZXN1bHRzLCBmb3Igc29ydGluZyBwdXJwb3Nlcy4gSWYgbm8gc29ydGluZyBzaG91bGRcblx0ICogYmUgcGVyZm9ybWVkLCBgbnVsbGAgd2lsbCBiZSByZXR1cm5lZC5cblx0ICpcblx0ICogQHBhcmFtIHtzdHJpbmd8b2JqZWN0fSBzZWFyY2hcblx0ICogQHBhcmFtIHtvYmplY3R9IG9wdGlvbnNcblx0ICogQHJldHVybiBmdW5jdGlvbihhLGIpXG5cdCAqL1xuXHRTaWZ0ZXIucHJvdG90eXBlLmdldFNvcnRGdW5jdGlvbiA9IGZ1bmN0aW9uKHNlYXJjaCwgb3B0aW9ucykge1xuXHRcdHZhciBpLCBuLCBzZWxmLCBmaWVsZCwgZmllbGRzLCBmaWVsZHNfY291bnQsIG11bHRpcGxpZXIsIG11bHRpcGxpZXJzLCBnZXRfZmllbGQsIGltcGxpY2l0X3Njb3JlLCBzb3J0O1xuXG5cdFx0c2VsZiAgID0gdGhpcztcblx0XHRzZWFyY2ggPSBzZWxmLnByZXBhcmVTZWFyY2goc2VhcmNoLCBvcHRpb25zKTtcblx0XHRzb3J0ICAgPSAoIXNlYXJjaC5xdWVyeSAmJiBvcHRpb25zLnNvcnRfZW1wdHkpIHx8IG9wdGlvbnMuc29ydDtcblxuXHRcdC8qKlxuXHRcdCAqIEZldGNoZXMgdGhlIHNwZWNpZmllZCBzb3J0IGZpZWxkIHZhbHVlXG5cdFx0ICogZnJvbSBhIHNlYXJjaCByZXN1bHQgaXRlbS5cblx0XHQgKlxuXHRcdCAqIEBwYXJhbSAge3N0cmluZ30gbmFtZVxuXHRcdCAqIEBwYXJhbSAge29iamVjdH0gcmVzdWx0XG5cdFx0ICogQHJldHVybiB7bWl4ZWR9XG5cdFx0ICovXG5cdFx0Z2V0X2ZpZWxkID0gZnVuY3Rpb24obmFtZSwgcmVzdWx0KSB7XG5cdFx0XHRpZiAobmFtZSA9PT0gJyRzY29yZScpIHJldHVybiByZXN1bHQuc2NvcmU7XG5cdFx0XHRyZXR1cm4gZ2V0YXR0cihzZWxmLml0ZW1zW3Jlc3VsdC5pZF0sIG5hbWUsIG9wdGlvbnMubmVzdGluZyk7XG5cdFx0fTtcblxuXHRcdC8vIHBhcnNlIG9wdGlvbnNcblx0XHRmaWVsZHMgPSBbXTtcblx0XHRpZiAoc29ydCkge1xuXHRcdFx0Zm9yIChpID0gMCwgbiA9IHNvcnQubGVuZ3RoOyBpIDwgbjsgaSsrKSB7XG5cdFx0XHRcdGlmIChzZWFyY2gucXVlcnkgfHwgc29ydFtpXS5maWVsZCAhPT0gJyRzY29yZScpIHtcblx0XHRcdFx0XHRmaWVsZHMucHVzaChzb3J0W2ldKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIHRoZSBcIiRzY29yZVwiIGZpZWxkIGlzIGltcGxpZWQgdG8gYmUgdGhlIHByaW1hcnlcblx0XHQvLyBzb3J0IGZpZWxkLCB1bmxlc3MgaXQncyBtYW51YWxseSBzcGVjaWZpZWRcblx0XHRpZiAoc2VhcmNoLnF1ZXJ5KSB7XG5cdFx0XHRpbXBsaWNpdF9zY29yZSA9IHRydWU7XG5cdFx0XHRmb3IgKGkgPSAwLCBuID0gZmllbGRzLmxlbmd0aDsgaSA8IG47IGkrKykge1xuXHRcdFx0XHRpZiAoZmllbGRzW2ldLmZpZWxkID09PSAnJHNjb3JlJykge1xuXHRcdFx0XHRcdGltcGxpY2l0X3Njb3JlID0gZmFsc2U7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdGlmIChpbXBsaWNpdF9zY29yZSkge1xuXHRcdFx0XHRmaWVsZHMudW5zaGlmdCh7ZmllbGQ6ICckc2NvcmUnLCBkaXJlY3Rpb246ICdkZXNjJ30pO1xuXHRcdFx0fVxuXHRcdH0gZWxzZSB7XG5cdFx0XHRmb3IgKGkgPSAwLCBuID0gZmllbGRzLmxlbmd0aDsgaSA8IG47IGkrKykge1xuXHRcdFx0XHRpZiAoZmllbGRzW2ldLmZpZWxkID09PSAnJHNjb3JlJykge1xuXHRcdFx0XHRcdGZpZWxkcy5zcGxpY2UoaSwgMSk7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRtdWx0aXBsaWVycyA9IFtdO1xuXHRcdGZvciAoaSA9IDAsIG4gPSBmaWVsZHMubGVuZ3RoOyBpIDwgbjsgaSsrKSB7XG5cdFx0XHRtdWx0aXBsaWVycy5wdXNoKGZpZWxkc1tpXS5kaXJlY3Rpb24gPT09ICdkZXNjJyA/IC0xIDogMSk7XG5cdFx0fVxuXG5cdFx0Ly8gYnVpbGQgZnVuY3Rpb25cblx0XHRmaWVsZHNfY291bnQgPSBmaWVsZHMubGVuZ3RoO1xuXHRcdGlmICghZmllbGRzX2NvdW50KSB7XG5cdFx0XHRyZXR1cm4gbnVsbDtcblx0XHR9IGVsc2UgaWYgKGZpZWxkc19jb3VudCA9PT0gMSkge1xuXHRcdFx0ZmllbGQgPSBmaWVsZHNbMF0uZmllbGQ7XG5cdFx0XHRtdWx0aXBsaWVyID0gbXVsdGlwbGllcnNbMF07XG5cdFx0XHRyZXR1cm4gZnVuY3Rpb24oYSwgYikge1xuXHRcdFx0XHRyZXR1cm4gbXVsdGlwbGllciAqIGNtcChcblx0XHRcdFx0XHRnZXRfZmllbGQoZmllbGQsIGEpLFxuXHRcdFx0XHRcdGdldF9maWVsZChmaWVsZCwgYilcblx0XHRcdFx0KTtcblx0XHRcdH07XG5cdFx0fSBlbHNlIHtcblx0XHRcdHJldHVybiBmdW5jdGlvbihhLCBiKSB7XG5cdFx0XHRcdHZhciBpLCByZXN1bHQsIGFfdmFsdWUsIGJfdmFsdWUsIGZpZWxkO1xuXHRcdFx0XHRmb3IgKGkgPSAwOyBpIDwgZmllbGRzX2NvdW50OyBpKyspIHtcblx0XHRcdFx0XHRmaWVsZCA9IGZpZWxkc1tpXS5maWVsZDtcblx0XHRcdFx0XHRyZXN1bHQgPSBtdWx0aXBsaWVyc1tpXSAqIGNtcChcblx0XHRcdFx0XHRcdGdldF9maWVsZChmaWVsZCwgYSksXG5cdFx0XHRcdFx0XHRnZXRfZmllbGQoZmllbGQsIGIpXG5cdFx0XHRcdFx0KTtcblx0XHRcdFx0XHRpZiAocmVzdWx0KSByZXR1cm4gcmVzdWx0O1xuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiAwO1xuXHRcdFx0fTtcblx0XHR9XG5cdH07XG5cblx0LyoqXG5cdCAqIFBhcnNlcyBhIHNlYXJjaCBxdWVyeSBhbmQgcmV0dXJucyBhbiBvYmplY3Rcblx0ICogd2l0aCB0b2tlbnMgYW5kIGZpZWxkcyByZWFkeSB0byBiZSBwb3B1bGF0ZWRcblx0ICogd2l0aCByZXN1bHRzLlxuXHQgKlxuXHQgKiBAcGFyYW0ge3N0cmluZ30gcXVlcnlcblx0ICogQHBhcmFtIHtvYmplY3R9IG9wdGlvbnNcblx0ICogQHJldHVybnMge29iamVjdH1cblx0ICovXG5cdFNpZnRlci5wcm90b3R5cGUucHJlcGFyZVNlYXJjaCA9IGZ1bmN0aW9uKHF1ZXJ5LCBvcHRpb25zKSB7XG5cdFx0aWYgKHR5cGVvZiBxdWVyeSA9PT0gJ29iamVjdCcpIHJldHVybiBxdWVyeTtcblxuXHRcdG9wdGlvbnMgPSBleHRlbmQoe30sIG9wdGlvbnMpO1xuXG5cdFx0dmFyIG9wdGlvbl9maWVsZHMgICAgID0gb3B0aW9ucy5maWVsZHM7XG5cdFx0dmFyIG9wdGlvbl9zb3J0ICAgICAgID0gb3B0aW9ucy5zb3J0O1xuXHRcdHZhciBvcHRpb25fc29ydF9lbXB0eSA9IG9wdGlvbnMuc29ydF9lbXB0eTtcblxuXHRcdGlmIChvcHRpb25fZmllbGRzICYmICFpc19hcnJheShvcHRpb25fZmllbGRzKSkgb3B0aW9ucy5maWVsZHMgPSBbb3B0aW9uX2ZpZWxkc107XG5cdFx0aWYgKG9wdGlvbl9zb3J0ICYmICFpc19hcnJheShvcHRpb25fc29ydCkpIG9wdGlvbnMuc29ydCA9IFtvcHRpb25fc29ydF07XG5cdFx0aWYgKG9wdGlvbl9zb3J0X2VtcHR5ICYmICFpc19hcnJheShvcHRpb25fc29ydF9lbXB0eSkpIG9wdGlvbnMuc29ydF9lbXB0eSA9IFtvcHRpb25fc29ydF9lbXB0eV07XG5cblx0XHRyZXR1cm4ge1xuXHRcdFx0b3B0aW9ucyA6IG9wdGlvbnMsXG5cdFx0XHRxdWVyeSAgIDogU3RyaW5nKHF1ZXJ5IHx8ICcnKS50b0xvd2VyQ2FzZSgpLFxuXHRcdFx0dG9rZW5zICA6IHRoaXMudG9rZW5pemUocXVlcnkpLFxuXHRcdFx0dG90YWwgICA6IDAsXG5cdFx0XHRpdGVtcyAgIDogW11cblx0XHR9O1xuXHR9O1xuXG5cdC8qKlxuXHQgKiBTZWFyY2hlcyB0aHJvdWdoIGFsbCBpdGVtcyBhbmQgcmV0dXJucyBhIHNvcnRlZCBhcnJheSBvZiBtYXRjaGVzLlxuXHQgKlxuXHQgKiBUaGUgYG9wdGlvbnNgIHBhcmFtZXRlciBjYW4gY29udGFpbjpcblx0ICpcblx0ICogICAtIGZpZWxkcyB7c3RyaW5nfGFycmF5fVxuXHQgKiAgIC0gc29ydCB7YXJyYXl9XG5cdCAqICAgLSBzY29yZSB7ZnVuY3Rpb259XG5cdCAqICAgLSBmaWx0ZXIge2Jvb2x9XG5cdCAqICAgLSBsaW1pdCB7aW50ZWdlcn1cblx0ICpcblx0ICogUmV0dXJucyBhbiBvYmplY3QgY29udGFpbmluZzpcblx0ICpcblx0ICogICAtIG9wdGlvbnMge29iamVjdH1cblx0ICogICAtIHF1ZXJ5IHtzdHJpbmd9XG5cdCAqICAgLSB0b2tlbnMge2FycmF5fVxuXHQgKiAgIC0gdG90YWwge2ludH1cblx0ICogICAtIGl0ZW1zIHthcnJheX1cblx0ICpcblx0ICogQHBhcmFtIHtzdHJpbmd9IHF1ZXJ5XG5cdCAqIEBwYXJhbSB7b2JqZWN0fSBvcHRpb25zXG5cdCAqIEByZXR1cm5zIHtvYmplY3R9XG5cdCAqL1xuXHRTaWZ0ZXIucHJvdG90eXBlLnNlYXJjaCA9IGZ1bmN0aW9uKHF1ZXJ5LCBvcHRpb25zKSB7XG5cdFx0dmFyIHNlbGYgPSB0aGlzLCB2YWx1ZSwgc2NvcmUsIHNlYXJjaCwgY2FsY3VsYXRlU2NvcmU7XG5cdFx0dmFyIGZuX3NvcnQ7XG5cdFx0dmFyIGZuX3Njb3JlO1xuXG5cdFx0c2VhcmNoICA9IHRoaXMucHJlcGFyZVNlYXJjaChxdWVyeSwgb3B0aW9ucyk7XG5cdFx0b3B0aW9ucyA9IHNlYXJjaC5vcHRpb25zO1xuXHRcdHF1ZXJ5ICAgPSBzZWFyY2gucXVlcnk7XG5cblx0XHQvLyBnZW5lcmF0ZSByZXN1bHQgc2NvcmluZyBmdW5jdGlvblxuXHRcdGZuX3Njb3JlID0gb3B0aW9ucy5zY29yZSB8fCBzZWxmLmdldFNjb3JlRnVuY3Rpb24oc2VhcmNoKTtcblxuXHRcdC8vIHBlcmZvcm0gc2VhcmNoIGFuZCBzb3J0XG5cdFx0aWYgKHF1ZXJ5Lmxlbmd0aCkge1xuXHRcdFx0c2VsZi5pdGVyYXRvcihzZWxmLml0ZW1zLCBmdW5jdGlvbihpdGVtLCBpZCkge1xuXHRcdFx0XHRzY29yZSA9IGZuX3Njb3JlKGl0ZW0pO1xuXHRcdFx0XHRpZiAob3B0aW9ucy5maWx0ZXIgPT09IGZhbHNlIHx8IHNjb3JlID4gMCkge1xuXHRcdFx0XHRcdHNlYXJjaC5pdGVtcy5wdXNoKHsnc2NvcmUnOiBzY29yZSwgJ2lkJzogaWR9KTtcblx0XHRcdFx0fVxuXHRcdFx0fSk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHNlbGYuaXRlcmF0b3Ioc2VsZi5pdGVtcywgZnVuY3Rpb24oaXRlbSwgaWQpIHtcblx0XHRcdFx0c2VhcmNoLml0ZW1zLnB1c2goeydzY29yZSc6IDEsICdpZCc6IGlkfSk7XG5cdFx0XHR9KTtcblx0XHR9XG5cblx0XHRmbl9zb3J0ID0gc2VsZi5nZXRTb3J0RnVuY3Rpb24oc2VhcmNoLCBvcHRpb25zKTtcblx0XHRpZiAoZm5fc29ydCkgc2VhcmNoLml0ZW1zLnNvcnQoZm5fc29ydCk7XG5cblx0XHQvLyBhcHBseSBsaW1pdHNcblx0XHRzZWFyY2gudG90YWwgPSBzZWFyY2guaXRlbXMubGVuZ3RoO1xuXHRcdGlmICh0eXBlb2Ygb3B0aW9ucy5saW1pdCA9PT0gJ251bWJlcicpIHtcblx0XHRcdHNlYXJjaC5pdGVtcyA9IHNlYXJjaC5pdGVtcy5zbGljZSgwLCBvcHRpb25zLmxpbWl0KTtcblx0XHR9XG5cblx0XHRyZXR1cm4gc2VhcmNoO1xuXHR9O1xuXG5cdC8vIHV0aWxpdGllc1xuXHQvLyAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtXG5cblx0dmFyIGNtcCA9IGZ1bmN0aW9uKGEsIGIpIHtcblx0XHRpZiAodHlwZW9mIGEgPT09ICdudW1iZXInICYmIHR5cGVvZiBiID09PSAnbnVtYmVyJykge1xuXHRcdFx0cmV0dXJuIGEgPiBiID8gMSA6IChhIDwgYiA/IC0xIDogMCk7XG5cdFx0fVxuXHRcdGEgPSBhc2NpaWZvbGQoU3RyaW5nKGEgfHwgJycpKTtcblx0XHRiID0gYXNjaWlmb2xkKFN0cmluZyhiIHx8ICcnKSk7XG5cdFx0aWYgKGEgPiBiKSByZXR1cm4gMTtcblx0XHRpZiAoYiA+IGEpIHJldHVybiAtMTtcblx0XHRyZXR1cm4gMDtcblx0fTtcblxuXHR2YXIgZXh0ZW5kID0gZnVuY3Rpb24oYSwgYikge1xuXHRcdHZhciBpLCBuLCBrLCBvYmplY3Q7XG5cdFx0Zm9yIChpID0gMSwgbiA9IGFyZ3VtZW50cy5sZW5ndGg7IGkgPCBuOyBpKyspIHtcblx0XHRcdG9iamVjdCA9IGFyZ3VtZW50c1tpXTtcblx0XHRcdGlmICghb2JqZWN0KSBjb250aW51ZTtcblx0XHRcdGZvciAoayBpbiBvYmplY3QpIHtcblx0XHRcdFx0aWYgKG9iamVjdC5oYXNPd25Qcm9wZXJ0eShrKSkge1xuXHRcdFx0XHRcdGFba10gPSBvYmplY3Rba107XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdFx0cmV0dXJuIGE7XG5cdH07XG5cblx0LyoqXG5cdCAqIEEgcHJvcGVydHkgZ2V0dGVyIHJlc29sdmluZyBkb3Qtbm90YXRpb25cblx0ICogQHBhcmFtICB7T2JqZWN0fSAgb2JqICAgICBUaGUgcm9vdCBvYmplY3QgdG8gZmV0Y2ggcHJvcGVydHkgb25cblx0ICogQHBhcmFtICB7U3RyaW5nfSAgbmFtZSAgICBUaGUgb3B0aW9uYWxseSBkb3R0ZWQgcHJvcGVydHkgbmFtZSB0byBmZXRjaFxuXHQgKiBAcGFyYW0gIHtCb29sZWFufSBuZXN0aW5nIEhhbmRsZSBuZXN0aW5nIG9yIG5vdFxuXHQgKiBAcmV0dXJuIHtPYmplY3R9ICAgICAgICAgIFRoZSByZXNvbHZlZCBwcm9wZXJ0eSB2YWx1ZVxuXHQgKi9cblx0dmFyIGdldGF0dHIgPSBmdW5jdGlvbihvYmosIG5hbWUsIG5lc3RpbmcpIHtcblx0ICAgIGlmICghb2JqIHx8ICFuYW1lKSByZXR1cm47XG5cdCAgICBpZiAoIW5lc3RpbmcpIHJldHVybiBvYmpbbmFtZV07XG5cdCAgICB2YXIgbmFtZXMgPSBuYW1lLnNwbGl0KFwiLlwiKTtcblx0ICAgIHdoaWxlKG5hbWVzLmxlbmd0aCAmJiAob2JqID0gb2JqW25hbWVzLnNoaWZ0KCldKSk7XG5cdCAgICByZXR1cm4gb2JqO1xuXHR9O1xuXG5cdHZhciB0cmltID0gZnVuY3Rpb24oc3RyKSB7XG5cdFx0cmV0dXJuIChzdHIgKyAnJykucmVwbGFjZSgvXlxccyt8XFxzKyR8L2csICcnKTtcblx0fTtcblxuXHR2YXIgZXNjYXBlX3JlZ2V4ID0gZnVuY3Rpb24oc3RyKSB7XG5cdFx0cmV0dXJuIChzdHIgKyAnJykucmVwbGFjZSgvKFsuPyorXiRbXFxdXFxcXCgpe318LV0pL2csICdcXFxcJDEnKTtcblx0fTtcblxuXHR2YXIgaXNfYXJyYXkgPSBBcnJheS5pc0FycmF5IHx8ICh0eXBlb2YgJCAhPT0gJ3VuZGVmaW5lZCcgJiYgJC5pc0FycmF5KSB8fCBmdW5jdGlvbihvYmplY3QpIHtcblx0XHRyZXR1cm4gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG9iamVjdCkgPT09ICdbb2JqZWN0IEFycmF5XSc7XG5cdH07XG5cblx0dmFyIERJQUNSSVRJQ1MgPSB7XG5cdFx0J2EnOiAnW2HhuIDhuIHEgsSDw4LDoseNx47IuuKxpcimyKfhuqDhuqHDhMOkw4DDoMOBw6HEgMSBw4PDo8OFw6XEhcSEw4PEhcSEXScsXG5cdFx0J2InOiAnW2LikKLOss6SQuC4v/CQjIHhm5JdJyxcblx0XHQnYyc6ICdbY8SGxIfEiMSJxIzEjcSKxItDzIRjzITDh8On4biI4biJyLvIvMaHxojJleG0hO+8o++9g10nLFxuXHRcdCdkJzogJ1tkxI7Ej+G4iuG4i+G4kOG4keG4jOG4jeG4kuG4k+G4juG4j8SQxJFEzKZkzKbGicmWxorJl8aLxozhta3htoHhtpHIoeG0he+8pO+9hMOwXScsXG5cdFx0J2UnOiAnW2XDicOpw4jDqMOKw6rhuJjhuJnEmsSbxJTEleG6vOG6veG4muG4m+G6uuG6u8SWxJfDi8OrxJLEk8ioyKnEmMSZ4baSyYbJh8iEyIXhur7hur/hu4Dhu4Hhu4Thu4Xhu4Lhu4PhuJzhuJ3huJbhuJfhuJThuJXIhsiH4bq44bq54buG4buH4rG44bSH77yl772FyZjHncaPxpDOtV0nLFxuXHRcdCdmJzogJ1tmxpHGkuG4nuG4n10nLFxuXHRcdCdnJzogJ1tnyaLigrLHpMelxJzEncSexJ/EosSjxpPJoMSgxKFdJyxcblx0XHQnaCc6ICdbaMSkxKXEpsSn4bio4bip4bqW4bqW4bik4bil4bii4bijyabKsMe2xpVdJyxcblx0XHQnaSc6ICdbacONw63DjMOsxKzErcOOw67Hj8eQw4/Dr+G4ruG4r8SoxKnErsSvxKrEq+G7iOG7iciIyInIisiL4buK4buL4bis4bitxpfJqMmozIbhtbvhtpbEsGlJxLHJqu+8qe+9iV0nLFxuXHRcdCdqJzogJ1tqyLfEtMS1yYjJicqdyZ/Ksl0nLFxuXHRcdCdrJzogJ1trxpjGmeqdgOqdgeG4sOG4sceox6nhuLLhuLPhuLThuLXOus+w4oKtXScsXG5cdFx0J2wnOiAnW2zFgcWCxL3EvsS7xLzEucS64bi24bi34bi44bi54bi84bi94bi64bi7xL/FgMi9xprisaDisaHisaLJq8ms4baFya3ItMqf77ys772MXScsXG5cdFx0J24nOiAnW27Fg8WEx7jHucWHxYjDkcOx4bmE4bmFxYXFhuG5huG5h+G5iuG5i+G5iOG5iU7MiG7MiMadybLIoMae4bWw4baHybPItcm077yu772OxYrFi10nLFxuXHRcdCdvJzogJ1tvw5jDuMOWw7bDk8Ozw5LDssOUw7THkceSxZDFkcWOxY/Irsiv4buM4buNxp/JtcagxqHhu47hu4/FjMWNw5XDtceqx6vIjMiN1ZXWhV0nLFxuXHRcdCdwJzogJ1tw4bmU4bmV4bmW4bmX4rGj4bW9xqTGpeG1sV0nLFxuXHRcdCdxJzogJ1tx6p2W6p2XyqDJismL6p2Y6p2ZccyDXScsXG5cdFx0J3InOiAnW3LFlMWVyYzJjcWYxZnFlsWX4bmY4bmZyJDIkciSyJPhuZrhuZvisaTJvV0nLFxuXHRcdCdzJzogJ1tzxZrFm+G5oOG5oeG5ouG5o+qeqOqeqcWcxZ3FoMWhxZ7Fn8iYyJlTzIhzzIhdJyxcblx0XHQndCc6ICdbdMWkxaXhuarhuavFosWj4bms4bmtxq7KiMiayJvhubDhubHhua7hua/GrMatXScsXG5cdFx0J3UnOiAnW3XFrMWtyYTKieG7pOG7pcOcw7zDmsO6w5nDucObw7vHk8eUxbDFscWsxa3Gr8aw4bum4bunxarFq8WoxanFssWzyJTIleKIql0nLFxuXHRcdCd2JzogJ1t24bm84bm94bm+4bm/xrLKi+qdnuqdn+KxscqLXScsXG5cdFx0J3cnOiAnW3fhuoLhuoPhuoDhuoHFtMW14bqE4bqF4bqG4bqH4bqI4bqJXScsXG5cdFx0J3gnOiAnW3jhuozhuo3huorhuovPh10nLFxuXHRcdCd5JzogJ1t5w53DveG7suG7s8W2xbfFuMO/4bu44bu54bqO4bqP4bu04bu1yY7Jj8azxrRdJyxcblx0XHQneic6ICdbesW5xbrhupDhupHFvcW+xbvFvOG6kuG6k+G6lOG6lca1xrZdJ1xuXHR9O1xuXG5cdHZhciBhc2NpaWZvbGQgPSAoZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGksIG4sIGssIGNodW5rO1xuXHRcdHZhciBmb3JlaWdubGV0dGVycyA9ICcnO1xuXHRcdHZhciBsb29rdXAgPSB7fTtcblx0XHRmb3IgKGsgaW4gRElBQ1JJVElDUykge1xuXHRcdFx0aWYgKERJQUNSSVRJQ1MuaGFzT3duUHJvcGVydHkoaykpIHtcblx0XHRcdFx0Y2h1bmsgPSBESUFDUklUSUNTW2tdLnN1YnN0cmluZygyLCBESUFDUklUSUNTW2tdLmxlbmd0aCAtIDEpO1xuXHRcdFx0XHRmb3JlaWdubGV0dGVycyArPSBjaHVuaztcblx0XHRcdFx0Zm9yIChpID0gMCwgbiA9IGNodW5rLmxlbmd0aDsgaSA8IG47IGkrKykge1xuXHRcdFx0XHRcdGxvb2t1cFtjaHVuay5jaGFyQXQoaSldID0gaztcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0XHR2YXIgcmVnZXhwID0gbmV3IFJlZ0V4cCgnWycgKyAgZm9yZWlnbmxldHRlcnMgKyAnXScsICdnJyk7XG5cdFx0cmV0dXJuIGZ1bmN0aW9uKHN0cikge1xuXHRcdFx0cmV0dXJuIHN0ci5yZXBsYWNlKHJlZ2V4cCwgZnVuY3Rpb24oZm9yZWlnbmxldHRlcikge1xuXHRcdFx0XHRyZXR1cm4gbG9va3VwW2ZvcmVpZ25sZXR0ZXJdO1xuXHRcdFx0fSkudG9Mb3dlckNhc2UoKTtcblx0XHR9O1xuXHR9KSgpO1xuXG5cblx0Ly8gZXhwb3J0XG5cdC8vIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC1cblxuXHRyZXR1cm4gU2lmdGVyO1xufSkpO1xuXG5cblxuLyoqXG4gKiBtaWNyb3BsdWdpbi5qc1xuICogQ29weXJpZ2h0IChjKSAyMDEzIEJyaWFuIFJlYXZpcyAmIGNvbnRyaWJ1dG9yc1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7IHlvdSBtYXkgbm90IHVzZSB0aGlzXG4gKiBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdDpcbiAqIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmUgZGlzdHJpYnV0ZWQgdW5kZXJcbiAqIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUywgV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0ZcbiAqIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZVxuICogZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZCBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqXG4gKiBAYXV0aG9yIEJyaWFuIFJlYXZpcyA8YnJpYW5AdGhpcmRyb3V0ZS5jb20+XG4gKi9cblxuKGZ1bmN0aW9uKHJvb3QsIGZhY3RvcnkpIHtcblx0aWYgKHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCkge1xuXHRcdGRlZmluZSgnbWljcm9wbHVnaW4nLCBmYWN0b3J5KTtcblx0fSBlbHNlIGlmICh0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcpIHtcblx0XHRtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkoKTtcblx0fSBlbHNlIHtcblx0XHRyb290Lk1pY3JvUGx1Z2luID0gZmFjdG9yeSgpO1xuXHR9XG59KHRoaXMsIGZ1bmN0aW9uKCkge1xuXHR2YXIgTWljcm9QbHVnaW4gPSB7fTtcblxuXHRNaWNyb1BsdWdpbi5taXhpbiA9IGZ1bmN0aW9uKEludGVyZmFjZSkge1xuXHRcdEludGVyZmFjZS5wbHVnaW5zID0ge307XG5cblx0XHQvKipcblx0XHQgKiBJbml0aWFsaXplcyB0aGUgbGlzdGVkIHBsdWdpbnMgKHdpdGggb3B0aW9ucykuXG5cdFx0ICogQWNjZXB0YWJsZSBmb3JtYXRzOlxuXHRcdCAqXG5cdFx0ICogTGlzdCAod2l0aG91dCBvcHRpb25zKTpcblx0XHQgKiAgIFsnYScsICdiJywgJ2MnXVxuXHRcdCAqXG5cdFx0ICogTGlzdCAod2l0aCBvcHRpb25zKTpcblx0XHQgKiAgIFt7J25hbWUnOiAnYScsIG9wdGlvbnM6IHt9fSwgeyduYW1lJzogJ2InLCBvcHRpb25zOiB7fX1dXG5cdFx0ICpcblx0XHQgKiBIYXNoICh3aXRoIG9wdGlvbnMpOlxuXHRcdCAqICAgeydhJzogeyAuLi4gfSwgJ2InOiB7IC4uLiB9LCAnYyc6IHsgLi4uIH19XG5cdFx0ICpcblx0XHQgKiBAcGFyYW0ge21peGVkfSBwbHVnaW5zXG5cdFx0ICovXG5cdFx0SW50ZXJmYWNlLnByb3RvdHlwZS5pbml0aWFsaXplUGx1Z2lucyA9IGZ1bmN0aW9uKHBsdWdpbnMpIHtcblx0XHRcdHZhciBpLCBuLCBrZXk7XG5cdFx0XHR2YXIgc2VsZiAgPSB0aGlzO1xuXHRcdFx0dmFyIHF1ZXVlID0gW107XG5cblx0XHRcdHNlbGYucGx1Z2lucyA9IHtcblx0XHRcdFx0bmFtZXMgICAgIDogW10sXG5cdFx0XHRcdHNldHRpbmdzICA6IHt9LFxuXHRcdFx0XHRyZXF1ZXN0ZWQgOiB7fSxcblx0XHRcdFx0bG9hZGVkICAgIDoge31cblx0XHRcdH07XG5cblx0XHRcdGlmICh1dGlscy5pc0FycmF5KHBsdWdpbnMpKSB7XG5cdFx0XHRcdGZvciAoaSA9IDAsIG4gPSBwbHVnaW5zLmxlbmd0aDsgaSA8IG47IGkrKykge1xuXHRcdFx0XHRcdGlmICh0eXBlb2YgcGx1Z2luc1tpXSA9PT0gJ3N0cmluZycpIHtcblx0XHRcdFx0XHRcdHF1ZXVlLnB1c2gocGx1Z2luc1tpXSk7XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdHNlbGYucGx1Z2lucy5zZXR0aW5nc1twbHVnaW5zW2ldLm5hbWVdID0gcGx1Z2luc1tpXS5vcHRpb25zO1xuXHRcdFx0XHRcdFx0cXVldWUucHVzaChwbHVnaW5zW2ldLm5hbWUpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIGlmIChwbHVnaW5zKSB7XG5cdFx0XHRcdGZvciAoa2V5IGluIHBsdWdpbnMpIHtcblx0XHRcdFx0XHRpZiAocGx1Z2lucy5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XG5cdFx0XHRcdFx0XHRzZWxmLnBsdWdpbnMuc2V0dGluZ3Nba2V5XSA9IHBsdWdpbnNba2V5XTtcblx0XHRcdFx0XHRcdHF1ZXVlLnB1c2goa2V5KTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0d2hpbGUgKHF1ZXVlLmxlbmd0aCkge1xuXHRcdFx0XHRzZWxmLnJlcXVpcmUocXVldWUuc2hpZnQoKSk7XG5cdFx0XHR9XG5cdFx0fTtcblxuXHRcdEludGVyZmFjZS5wcm90b3R5cGUubG9hZFBsdWdpbiA9IGZ1bmN0aW9uKG5hbWUpIHtcblx0XHRcdHZhciBzZWxmICAgID0gdGhpcztcblx0XHRcdHZhciBwbHVnaW5zID0gc2VsZi5wbHVnaW5zO1xuXHRcdFx0dmFyIHBsdWdpbiAgPSBJbnRlcmZhY2UucGx1Z2luc1tuYW1lXTtcblxuXHRcdFx0aWYgKCFJbnRlcmZhY2UucGx1Z2lucy5oYXNPd25Qcm9wZXJ0eShuYW1lKSkge1xuXHRcdFx0XHR0aHJvdyBuZXcgRXJyb3IoJ1VuYWJsZSB0byBmaW5kIFwiJyArICBuYW1lICsgJ1wiIHBsdWdpbicpO1xuXHRcdFx0fVxuXG5cdFx0XHRwbHVnaW5zLnJlcXVlc3RlZFtuYW1lXSA9IHRydWU7XG5cdFx0XHRwbHVnaW5zLmxvYWRlZFtuYW1lXSA9IHBsdWdpbi5mbi5hcHBseShzZWxmLCBbc2VsZi5wbHVnaW5zLnNldHRpbmdzW25hbWVdIHx8IHt9XSk7XG5cdFx0XHRwbHVnaW5zLm5hbWVzLnB1c2gobmFtZSk7XG5cdFx0fTtcblxuXHRcdC8qKlxuXHRcdCAqIEluaXRpYWxpemVzIGEgcGx1Z2luLlxuXHRcdCAqXG5cdFx0ICogQHBhcmFtIHtzdHJpbmd9IG5hbWVcblx0XHQgKi9cblx0XHRJbnRlcmZhY2UucHJvdG90eXBlLnJlcXVpcmUgPSBmdW5jdGlvbihuYW1lKSB7XG5cdFx0XHR2YXIgc2VsZiA9IHRoaXM7XG5cdFx0XHR2YXIgcGx1Z2lucyA9IHNlbGYucGx1Z2lucztcblxuXHRcdFx0aWYgKCFzZWxmLnBsdWdpbnMubG9hZGVkLmhhc093blByb3BlcnR5KG5hbWUpKSB7XG5cdFx0XHRcdGlmIChwbHVnaW5zLnJlcXVlc3RlZFtuYW1lXSkge1xuXHRcdFx0XHRcdHRocm93IG5ldyBFcnJvcignUGx1Z2luIGhhcyBjaXJjdWxhciBkZXBlbmRlbmN5IChcIicgKyBuYW1lICsgJ1wiKScpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHNlbGYubG9hZFBsdWdpbihuYW1lKTtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIHBsdWdpbnMubG9hZGVkW25hbWVdO1xuXHRcdH07XG5cblx0XHQvKipcblx0XHQgKiBSZWdpc3RlcnMgYSBwbHVnaW4uXG5cdFx0ICpcblx0XHQgKiBAcGFyYW0ge3N0cmluZ30gbmFtZVxuXHRcdCAqIEBwYXJhbSB7ZnVuY3Rpb259IGZuXG5cdFx0ICovXG5cdFx0SW50ZXJmYWNlLmRlZmluZSA9IGZ1bmN0aW9uKG5hbWUsIGZuKSB7XG5cdFx0XHRJbnRlcmZhY2UucGx1Z2luc1tuYW1lXSA9IHtcblx0XHRcdFx0J25hbWUnIDogbmFtZSxcblx0XHRcdFx0J2ZuJyAgIDogZm5cblx0XHRcdH07XG5cdFx0fTtcblx0fTtcblxuXHR2YXIgdXRpbHMgPSB7XG5cdFx0aXNBcnJheTogQXJyYXkuaXNBcnJheSB8fCBmdW5jdGlvbih2QXJnKSB7XG5cdFx0XHRyZXR1cm4gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHZBcmcpID09PSAnW29iamVjdCBBcnJheV0nO1xuXHRcdH1cblx0fTtcblxuXHRyZXR1cm4gTWljcm9QbHVnaW47XG59KSk7XG5cbi8qKlxuICogc2VsZWN0aXplLmpzICh2MC4xMi40KVxuICogQ29weXJpZ2h0IChjKSAyMDEz4oCTMjAxNSBCcmlhbiBSZWF2aXMgJiBjb250cmlidXRvcnNcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpOyB5b3UgbWF5IG5vdCB1c2UgdGhpc1xuICogZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXQ6XG4gKiBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlIGRpc3RyaWJ1dGVkIHVuZGVyXG4gKiB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GXG4gKiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2VcbiAqIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQgbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKlxuICogQGF1dGhvciBCcmlhbiBSZWF2aXMgPGJyaWFuQHRoaXJkcm91dGUuY29tPlxuICovXG5cbi8qanNoaW50IGN1cmx5OmZhbHNlICovXG4vKmpzaGludCBicm93c2VyOnRydWUgKi9cblxuKGZ1bmN0aW9uKHJvb3QsIGZhY3RvcnkpIHtcblx0aWYgKHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCkge1xuXHRcdGRlZmluZSgnc2VsZWN0aXplJywgWydqcXVlcnknLCdzaWZ0ZXInLCdtaWNyb3BsdWdpbiddLCBmYWN0b3J5KTtcblx0fSBlbHNlIGlmICh0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcpIHtcblx0XHRtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkocmVxdWlyZSgnanF1ZXJ5JyksIHJlcXVpcmUoJ3NpZnRlcicpLCByZXF1aXJlKCdtaWNyb3BsdWdpbicpKTtcblx0fSBlbHNlIHtcblx0XHRyb290LlNlbGVjdGl6ZSA9IGZhY3Rvcnkocm9vdC5qUXVlcnksIHJvb3QuU2lmdGVyLCByb290Lk1pY3JvUGx1Z2luKTtcblx0fVxufSh0aGlzLCBmdW5jdGlvbigkLCBTaWZ0ZXIsIE1pY3JvUGx1Z2luKSB7XG5cdCd1c2Ugc3RyaWN0JztcblxuXHR2YXIgaGlnaGxpZ2h0ID0gZnVuY3Rpb24oJGVsZW1lbnQsIHBhdHRlcm4pIHtcblx0XHRpZiAodHlwZW9mIHBhdHRlcm4gPT09ICdzdHJpbmcnICYmICFwYXR0ZXJuLmxlbmd0aCkgcmV0dXJuO1xuXHRcdHZhciByZWdleCA9ICh0eXBlb2YgcGF0dGVybiA9PT0gJ3N0cmluZycpID8gbmV3IFJlZ0V4cChwYXR0ZXJuLCAnaScpIDogcGF0dGVybjtcblx0XG5cdFx0dmFyIGhpZ2hsaWdodCA9IGZ1bmN0aW9uKG5vZGUpIHtcblx0XHRcdHZhciBza2lwID0gMDtcblx0XHRcdGlmIChub2RlLm5vZGVUeXBlID09PSAzKSB7XG5cdFx0XHRcdHZhciBwb3MgPSBub2RlLmRhdGEuc2VhcmNoKHJlZ2V4KTtcblx0XHRcdFx0aWYgKHBvcyA+PSAwICYmIG5vZGUuZGF0YS5sZW5ndGggPiAwKSB7XG5cdFx0XHRcdFx0dmFyIG1hdGNoID0gbm9kZS5kYXRhLm1hdGNoKHJlZ2V4KTtcblx0XHRcdFx0XHR2YXIgc3Bhbm5vZGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzcGFuJyk7XG5cdFx0XHRcdFx0c3Bhbm5vZGUuY2xhc3NOYW1lID0gJ2hpZ2hsaWdodCc7XG5cdFx0XHRcdFx0dmFyIG1pZGRsZWJpdCA9IG5vZGUuc3BsaXRUZXh0KHBvcyk7XG5cdFx0XHRcdFx0dmFyIGVuZGJpdCA9IG1pZGRsZWJpdC5zcGxpdFRleHQobWF0Y2hbMF0ubGVuZ3RoKTtcblx0XHRcdFx0XHR2YXIgbWlkZGxlY2xvbmUgPSBtaWRkbGViaXQuY2xvbmVOb2RlKHRydWUpO1xuXHRcdFx0XHRcdHNwYW5ub2RlLmFwcGVuZENoaWxkKG1pZGRsZWNsb25lKTtcblx0XHRcdFx0XHRtaWRkbGViaXQucGFyZW50Tm9kZS5yZXBsYWNlQ2hpbGQoc3Bhbm5vZGUsIG1pZGRsZWJpdCk7XG5cdFx0XHRcdFx0c2tpcCA9IDE7XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSBpZiAobm9kZS5ub2RlVHlwZSA9PT0gMSAmJiBub2RlLmNoaWxkTm9kZXMgJiYgIS8oc2NyaXB0fHN0eWxlKS9pLnRlc3Qobm9kZS50YWdOYW1lKSkge1xuXHRcdFx0XHRmb3IgKHZhciBpID0gMDsgaSA8IG5vZGUuY2hpbGROb2Rlcy5sZW5ndGg7ICsraSkge1xuXHRcdFx0XHRcdGkgKz0gaGlnaGxpZ2h0KG5vZGUuY2hpbGROb2Rlc1tpXSk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdHJldHVybiBza2lwO1xuXHRcdH07XG5cdFxuXHRcdHJldHVybiAkZWxlbWVudC5lYWNoKGZ1bmN0aW9uKCkge1xuXHRcdFx0aGlnaGxpZ2h0KHRoaXMpO1xuXHRcdH0pO1xuXHR9O1xuXHRcblx0LyoqXG5cdCAqIHJlbW92ZUhpZ2hsaWdodCBmbiBjb3BpZWQgZnJvbSBoaWdobGlnaHQgdjUgYW5kXG5cdCAqIGVkaXRlZCB0byByZW1vdmUgd2l0aCgpIGFuZCBwYXNzIGpzIHN0cmljdCBtb2RlXG5cdCAqL1xuXHQkLmZuLnJlbW92ZUhpZ2hsaWdodCA9IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLmZpbmQoXCJzcGFuLmhpZ2hsaWdodFwiKS5lYWNoKGZ1bmN0aW9uKCkge1xuXHRcdFx0dGhpcy5wYXJlbnROb2RlLmZpcnN0Q2hpbGQubm9kZU5hbWU7XG5cdFx0XHR2YXIgcGFyZW50ID0gdGhpcy5wYXJlbnROb2RlO1xuXHRcdFx0cGFyZW50LnJlcGxhY2VDaGlsZCh0aGlzLmZpcnN0Q2hpbGQsIHRoaXMpO1xuXHRcdFx0cGFyZW50Lm5vcm1hbGl6ZSgpO1xuXHRcdH0pLmVuZCgpO1xuXHR9O1xuXHRcblx0XG5cdHZhciBNaWNyb0V2ZW50ID0gZnVuY3Rpb24oKSB7fTtcblx0TWljcm9FdmVudC5wcm90b3R5cGUgPSB7XG5cdFx0b246IGZ1bmN0aW9uKGV2ZW50LCBmY3Qpe1xuXHRcdFx0dGhpcy5fZXZlbnRzID0gdGhpcy5fZXZlbnRzIHx8IHt9O1xuXHRcdFx0dGhpcy5fZXZlbnRzW2V2ZW50XSA9IHRoaXMuX2V2ZW50c1tldmVudF0gfHwgW107XG5cdFx0XHR0aGlzLl9ldmVudHNbZXZlbnRdLnB1c2goZmN0KTtcblx0XHR9LFxuXHRcdG9mZjogZnVuY3Rpb24oZXZlbnQsIGZjdCl7XG5cdFx0XHR2YXIgbiA9IGFyZ3VtZW50cy5sZW5ndGg7XG5cdFx0XHRpZiAobiA9PT0gMCkgcmV0dXJuIGRlbGV0ZSB0aGlzLl9ldmVudHM7XG5cdFx0XHRpZiAobiA9PT0gMSkgcmV0dXJuIGRlbGV0ZSB0aGlzLl9ldmVudHNbZXZlbnRdO1xuXHRcblx0XHRcdHRoaXMuX2V2ZW50cyA9IHRoaXMuX2V2ZW50cyB8fCB7fTtcblx0XHRcdGlmIChldmVudCBpbiB0aGlzLl9ldmVudHMgPT09IGZhbHNlKSByZXR1cm47XG5cdFx0XHR0aGlzLl9ldmVudHNbZXZlbnRdLnNwbGljZSh0aGlzLl9ldmVudHNbZXZlbnRdLmluZGV4T2YoZmN0KSwgMSk7XG5cdFx0fSxcblx0XHR0cmlnZ2VyOiBmdW5jdGlvbihldmVudCAvKiAsIGFyZ3MuLi4gKi8pe1xuXHRcdFx0dGhpcy5fZXZlbnRzID0gdGhpcy5fZXZlbnRzIHx8IHt9O1xuXHRcdFx0aWYgKGV2ZW50IGluIHRoaXMuX2V2ZW50cyA9PT0gZmFsc2UpIHJldHVybjtcblx0XHRcdGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5fZXZlbnRzW2V2ZW50XS5sZW5ndGg7IGkrKyl7XG5cdFx0XHRcdHRoaXMuX2V2ZW50c1tldmVudF1baV0uYXBwbHkodGhpcywgQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLCAxKSk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9O1xuXHRcblx0LyoqXG5cdCAqIE1peGluIHdpbGwgZGVsZWdhdGUgYWxsIE1pY3JvRXZlbnQuanMgZnVuY3Rpb24gaW4gdGhlIGRlc3RpbmF0aW9uIG9iamVjdC5cblx0ICpcblx0ICogLSBNaWNyb0V2ZW50Lm1peGluKEZvb2Jhcikgd2lsbCBtYWtlIEZvb2JhciBhYmxlIHRvIHVzZSBNaWNyb0V2ZW50XG5cdCAqXG5cdCAqIEBwYXJhbSB7b2JqZWN0fSB0aGUgb2JqZWN0IHdoaWNoIHdpbGwgc3VwcG9ydCBNaWNyb0V2ZW50XG5cdCAqL1xuXHRNaWNyb0V2ZW50Lm1peGluID0gZnVuY3Rpb24oZGVzdE9iamVjdCl7XG5cdFx0dmFyIHByb3BzID0gWydvbicsICdvZmYnLCAndHJpZ2dlciddO1xuXHRcdGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspe1xuXHRcdFx0ZGVzdE9iamVjdC5wcm90b3R5cGVbcHJvcHNbaV1dID0gTWljcm9FdmVudC5wcm90b3R5cGVbcHJvcHNbaV1dO1xuXHRcdH1cblx0fTtcblx0XG5cdHZhciBJU19NQUMgICAgICAgID0gL01hYy8udGVzdChuYXZpZ2F0b3IudXNlckFnZW50KTtcblx0XG5cdHZhciBLRVlfQSAgICAgICAgID0gNjU7XG5cdHZhciBLRVlfQ09NTUEgICAgID0gMTg4O1xuXHR2YXIgS0VZX1JFVFVSTiAgICA9IDEzO1xuXHR2YXIgS0VZX0VTQyAgICAgICA9IDI3O1xuXHR2YXIgS0VZX0xFRlQgICAgICA9IDM3O1xuXHR2YXIgS0VZX1VQICAgICAgICA9IDM4O1xuXHR2YXIgS0VZX1AgICAgICAgICA9IDgwO1xuXHR2YXIgS0VZX1JJR0hUICAgICA9IDM5O1xuXHR2YXIgS0VZX0RPV04gICAgICA9IDQwO1xuXHR2YXIgS0VZX04gICAgICAgICA9IDc4O1xuXHR2YXIgS0VZX0JBQ0tTUEFDRSA9IDg7XG5cdHZhciBLRVlfREVMRVRFICAgID0gNDY7XG5cdHZhciBLRVlfU0hJRlQgICAgID0gMTY7XG5cdHZhciBLRVlfQ01EICAgICAgID0gSVNfTUFDID8gOTEgOiAxNztcblx0dmFyIEtFWV9DVFJMICAgICAgPSBJU19NQUMgPyAxOCA6IDE3O1xuXHR2YXIgS0VZX1RBQiAgICAgICA9IDk7XG5cdFxuXHR2YXIgVEFHX1NFTEVDVCAgICA9IDE7XG5cdHZhciBUQUdfSU5QVVQgICAgID0gMjtcblx0XG5cdC8vIGZvciBub3csIGFuZHJvaWQgc3VwcG9ydCBpbiBnZW5lcmFsIGlzIHRvbyBzcG90dHkgdG8gc3VwcG9ydCB2YWxpZGl0eVxuXHR2YXIgU1VQUE9SVFNfVkFMSURJVFlfQVBJID0gIS9hbmRyb2lkL2kudGVzdCh3aW5kb3cubmF2aWdhdG9yLnVzZXJBZ2VudCkgJiYgISFkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdpbnB1dCcpLnZhbGlkaXR5O1xuXHRcblx0XG5cdHZhciBpc3NldCA9IGZ1bmN0aW9uKG9iamVjdCkge1xuXHRcdHJldHVybiB0eXBlb2Ygb2JqZWN0ICE9PSAndW5kZWZpbmVkJztcblx0fTtcblx0XG5cdC8qKlxuXHQgKiBDb252ZXJ0cyBhIHNjYWxhciB0byBpdHMgYmVzdCBzdHJpbmcgcmVwcmVzZW50YXRpb25cblx0ICogZm9yIGhhc2gga2V5cyBhbmQgSFRNTCBhdHRyaWJ1dGUgdmFsdWVzLlxuXHQgKlxuXHQgKiBUcmFuc2Zvcm1hdGlvbnM6XG5cdCAqICAgJ3N0cicgICAgIC0+ICdzdHInXG5cdCAqICAgbnVsbCAgICAgIC0+ICcnXG5cdCAqICAgdW5kZWZpbmVkIC0+ICcnXG5cdCAqICAgdHJ1ZSAgICAgIC0+ICcxJ1xuXHQgKiAgIGZhbHNlICAgICAtPiAnMCdcblx0ICogICAwICAgICAgICAgLT4gJzAnXG5cdCAqICAgMSAgICAgICAgIC0+ICcxJ1xuXHQgKlxuXHQgKiBAcGFyYW0ge3N0cmluZ30gdmFsdWVcblx0ICogQHJldHVybnMge3N0cmluZ3xudWxsfVxuXHQgKi9cblx0dmFyIGhhc2hfa2V5ID0gZnVuY3Rpb24odmFsdWUpIHtcblx0XHRpZiAodHlwZW9mIHZhbHVlID09PSAndW5kZWZpbmVkJyB8fCB2YWx1ZSA9PT0gbnVsbCkgcmV0dXJuIG51bGw7XG5cdFx0aWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ2Jvb2xlYW4nKSByZXR1cm4gdmFsdWUgPyAnMScgOiAnMCc7XG5cdFx0cmV0dXJuIHZhbHVlICsgJyc7XG5cdH07XG5cdFxuXHQvKipcblx0ICogRXNjYXBlcyBhIHN0cmluZyBmb3IgdXNlIHdpdGhpbiBIVE1MLlxuXHQgKlxuXHQgKiBAcGFyYW0ge3N0cmluZ30gc3RyXG5cdCAqIEByZXR1cm5zIHtzdHJpbmd9XG5cdCAqL1xuXHR2YXIgZXNjYXBlX2h0bWwgPSBmdW5jdGlvbihzdHIpIHtcblx0XHRyZXR1cm4gKHN0ciArICcnKVxuXHRcdFx0LnJlcGxhY2UoLyYvZywgJyZhbXA7Jylcblx0XHRcdC5yZXBsYWNlKC88L2csICcmbHQ7Jylcblx0XHRcdC5yZXBsYWNlKC8+L2csICcmZ3Q7Jylcblx0XHRcdC5yZXBsYWNlKC9cIi9nLCAnJnF1b3Q7Jyk7XG5cdH07XG5cdFxuXHQvKipcblx0ICogRXNjYXBlcyBcIiRcIiBjaGFyYWN0ZXJzIGluIHJlcGxhY2VtZW50IHN0cmluZ3MuXG5cdCAqXG5cdCAqIEBwYXJhbSB7c3RyaW5nfSBzdHJcblx0ICogQHJldHVybnMge3N0cmluZ31cblx0ICovXG5cdHZhciBlc2NhcGVfcmVwbGFjZSA9IGZ1bmN0aW9uKHN0cikge1xuXHRcdHJldHVybiAoc3RyICsgJycpLnJlcGxhY2UoL1xcJC9nLCAnJCQkJCcpO1xuXHR9O1xuXHRcblx0dmFyIGhvb2sgPSB7fTtcblx0XG5cdC8qKlxuXHQgKiBXcmFwcyBgbWV0aG9kYCBvbiBgc2VsZmAgc28gdGhhdCBgZm5gXG5cdCAqIGlzIGludm9rZWQgYmVmb3JlIHRoZSBvcmlnaW5hbCBtZXRob2QuXG5cdCAqXG5cdCAqIEBwYXJhbSB7b2JqZWN0fSBzZWxmXG5cdCAqIEBwYXJhbSB7c3RyaW5nfSBtZXRob2Rcblx0ICogQHBhcmFtIHtmdW5jdGlvbn0gZm5cblx0ICovXG5cdGhvb2suYmVmb3JlID0gZnVuY3Rpb24oc2VsZiwgbWV0aG9kLCBmbikge1xuXHRcdHZhciBvcmlnaW5hbCA9IHNlbGZbbWV0aG9kXTtcblx0XHRzZWxmW21ldGhvZF0gPSBmdW5jdGlvbigpIHtcblx0XHRcdGZuLmFwcGx5KHNlbGYsIGFyZ3VtZW50cyk7XG5cdFx0XHRyZXR1cm4gb3JpZ2luYWwuYXBwbHkoc2VsZiwgYXJndW1lbnRzKTtcblx0XHR9O1xuXHR9O1xuXHRcblx0LyoqXG5cdCAqIFdyYXBzIGBtZXRob2RgIG9uIGBzZWxmYCBzbyB0aGF0IGBmbmBcblx0ICogaXMgaW52b2tlZCBhZnRlciB0aGUgb3JpZ2luYWwgbWV0aG9kLlxuXHQgKlxuXHQgKiBAcGFyYW0ge29iamVjdH0gc2VsZlxuXHQgKiBAcGFyYW0ge3N0cmluZ30gbWV0aG9kXG5cdCAqIEBwYXJhbSB7ZnVuY3Rpb259IGZuXG5cdCAqL1xuXHRob29rLmFmdGVyID0gZnVuY3Rpb24oc2VsZiwgbWV0aG9kLCBmbikge1xuXHRcdHZhciBvcmlnaW5hbCA9IHNlbGZbbWV0aG9kXTtcblx0XHRzZWxmW21ldGhvZF0gPSBmdW5jdGlvbigpIHtcblx0XHRcdHZhciByZXN1bHQgPSBvcmlnaW5hbC5hcHBseShzZWxmLCBhcmd1bWVudHMpO1xuXHRcdFx0Zm4uYXBwbHkoc2VsZiwgYXJndW1lbnRzKTtcblx0XHRcdHJldHVybiByZXN1bHQ7XG5cdFx0fTtcblx0fTtcblx0XG5cdC8qKlxuXHQgKiBXcmFwcyBgZm5gIHNvIHRoYXQgaXQgY2FuIG9ubHkgYmUgaW52b2tlZCBvbmNlLlxuXHQgKlxuXHQgKiBAcGFyYW0ge2Z1bmN0aW9ufSBmblxuXHQgKiBAcmV0dXJucyB7ZnVuY3Rpb259XG5cdCAqL1xuXHR2YXIgb25jZSA9IGZ1bmN0aW9uKGZuKSB7XG5cdFx0dmFyIGNhbGxlZCA9IGZhbHNlO1xuXHRcdHJldHVybiBmdW5jdGlvbigpIHtcblx0XHRcdGlmIChjYWxsZWQpIHJldHVybjtcblx0XHRcdGNhbGxlZCA9IHRydWU7XG5cdFx0XHRmbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuXHRcdH07XG5cdH07XG5cdFxuXHQvKipcblx0ICogV3JhcHMgYGZuYCBzbyB0aGF0IGl0IGNhbiBvbmx5IGJlIGNhbGxlZCBvbmNlXG5cdCAqIGV2ZXJ5IGBkZWxheWAgbWlsbGlzZWNvbmRzIChpbnZva2VkIG9uIHRoZSBmYWxsaW5nIGVkZ2UpLlxuXHQgKlxuXHQgKiBAcGFyYW0ge2Z1bmN0aW9ufSBmblxuXHQgKiBAcGFyYW0ge2ludH0gZGVsYXlcblx0ICogQHJldHVybnMge2Z1bmN0aW9ufVxuXHQgKi9cblx0dmFyIGRlYm91bmNlID0gZnVuY3Rpb24oZm4sIGRlbGF5KSB7XG5cdFx0dmFyIHRpbWVvdXQ7XG5cdFx0cmV0dXJuIGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIHNlbGYgPSB0aGlzO1xuXHRcdFx0dmFyIGFyZ3MgPSBhcmd1bWVudHM7XG5cdFx0XHR3aW5kb3cuY2xlYXJUaW1lb3V0KHRpbWVvdXQpO1xuXHRcdFx0dGltZW91dCA9IHdpbmRvdy5zZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRmbi5hcHBseShzZWxmLCBhcmdzKTtcblx0XHRcdH0sIGRlbGF5KTtcblx0XHR9O1xuXHR9O1xuXHRcblx0LyoqXG5cdCAqIERlYm91bmNlIGFsbCBmaXJlZCBldmVudHMgdHlwZXMgbGlzdGVkIGluIGB0eXBlc2Bcblx0ICogd2hpbGUgZXhlY3V0aW5nIHRoZSBwcm92aWRlZCBgZm5gLlxuXHQgKlxuXHQgKiBAcGFyYW0ge29iamVjdH0gc2VsZlxuXHQgKiBAcGFyYW0ge2FycmF5fSB0eXBlc1xuXHQgKiBAcGFyYW0ge2Z1bmN0aW9ufSBmblxuXHQgKi9cblx0dmFyIGRlYm91bmNlX2V2ZW50cyA9IGZ1bmN0aW9uKHNlbGYsIHR5cGVzLCBmbikge1xuXHRcdHZhciB0eXBlO1xuXHRcdHZhciB0cmlnZ2VyID0gc2VsZi50cmlnZ2VyO1xuXHRcdHZhciBldmVudF9hcmdzID0ge307XG5cdFxuXHRcdC8vIG92ZXJyaWRlIHRyaWdnZXIgbWV0aG9kXG5cdFx0c2VsZi50cmlnZ2VyID0gZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgdHlwZSA9IGFyZ3VtZW50c1swXTtcblx0XHRcdGlmICh0eXBlcy5pbmRleE9mKHR5cGUpICE9PSAtMSkge1xuXHRcdFx0XHRldmVudF9hcmdzW3R5cGVdID0gYXJndW1lbnRzO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0cmV0dXJuIHRyaWdnZXIuYXBwbHkoc2VsZiwgYXJndW1lbnRzKTtcblx0XHRcdH1cblx0XHR9O1xuXHRcblx0XHQvLyBpbnZva2UgcHJvdmlkZWQgZnVuY3Rpb25cblx0XHRmbi5hcHBseShzZWxmLCBbXSk7XG5cdFx0c2VsZi50cmlnZ2VyID0gdHJpZ2dlcjtcblx0XG5cdFx0Ly8gdHJpZ2dlciBxdWV1ZWQgZXZlbnRzXG5cdFx0Zm9yICh0eXBlIGluIGV2ZW50X2FyZ3MpIHtcblx0XHRcdGlmIChldmVudF9hcmdzLmhhc093blByb3BlcnR5KHR5cGUpKSB7XG5cdFx0XHRcdHRyaWdnZXIuYXBwbHkoc2VsZiwgZXZlbnRfYXJnc1t0eXBlXSk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9O1xuXHRcblx0LyoqXG5cdCAqIEEgd29ya2Fyb3VuZCBmb3IgaHR0cDovL2J1Z3MuanF1ZXJ5LmNvbS90aWNrZXQvNjY5NlxuXHQgKlxuXHQgKiBAcGFyYW0ge29iamVjdH0gJHBhcmVudCAtIFBhcmVudCBlbGVtZW50IHRvIGxpc3RlbiBvbi5cblx0ICogQHBhcmFtIHtzdHJpbmd9IGV2ZW50IC0gRXZlbnQgbmFtZS5cblx0ICogQHBhcmFtIHtzdHJpbmd9IHNlbGVjdG9yIC0gRGVzY2VuZGFudCBzZWxlY3RvciB0byBmaWx0ZXIgYnkuXG5cdCAqIEBwYXJhbSB7ZnVuY3Rpb259IGZuIC0gRXZlbnQgaGFuZGxlci5cblx0ICovXG5cdHZhciB3YXRjaENoaWxkRXZlbnQgPSBmdW5jdGlvbigkcGFyZW50LCBldmVudCwgc2VsZWN0b3IsIGZuKSB7XG5cdFx0JHBhcmVudC5vbihldmVudCwgc2VsZWN0b3IsIGZ1bmN0aW9uKGUpIHtcblx0XHRcdHZhciBjaGlsZCA9IGUudGFyZ2V0O1xuXHRcdFx0d2hpbGUgKGNoaWxkICYmIGNoaWxkLnBhcmVudE5vZGUgIT09ICRwYXJlbnRbMF0pIHtcblx0XHRcdFx0Y2hpbGQgPSBjaGlsZC5wYXJlbnROb2RlO1xuXHRcdFx0fVxuXHRcdFx0ZS5jdXJyZW50VGFyZ2V0ID0gY2hpbGQ7XG5cdFx0XHRyZXR1cm4gZm4uYXBwbHkodGhpcywgW2VdKTtcblx0XHR9KTtcblx0fTtcblx0XG5cdC8qKlxuXHQgKiBEZXRlcm1pbmVzIHRoZSBjdXJyZW50IHNlbGVjdGlvbiB3aXRoaW4gYSB0ZXh0IGlucHV0IGNvbnRyb2wuXG5cdCAqIFJldHVybnMgYW4gb2JqZWN0IGNvbnRhaW5pbmc6XG5cdCAqICAgLSBzdGFydFxuXHQgKiAgIC0gbGVuZ3RoXG5cdCAqXG5cdCAqIEBwYXJhbSB7b2JqZWN0fSBpbnB1dFxuXHQgKiBAcmV0dXJucyB7b2JqZWN0fVxuXHQgKi9cblx0dmFyIGdldFNlbGVjdGlvbiA9IGZ1bmN0aW9uKGlucHV0KSB7XG5cdFx0dmFyIHJlc3VsdCA9IHt9O1xuXHRcdGlmICgnc2VsZWN0aW9uU3RhcnQnIGluIGlucHV0KSB7XG5cdFx0XHRyZXN1bHQuc3RhcnQgPSBpbnB1dC5zZWxlY3Rpb25TdGFydDtcblx0XHRcdHJlc3VsdC5sZW5ndGggPSBpbnB1dC5zZWxlY3Rpb25FbmQgLSByZXN1bHQuc3RhcnQ7XG5cdFx0fSBlbHNlIGlmIChkb2N1bWVudC5zZWxlY3Rpb24pIHtcblx0XHRcdGlucHV0LmZvY3VzKCk7XG5cdFx0XHR2YXIgc2VsID0gZG9jdW1lbnQuc2VsZWN0aW9uLmNyZWF0ZVJhbmdlKCk7XG5cdFx0XHR2YXIgc2VsTGVuID0gZG9jdW1lbnQuc2VsZWN0aW9uLmNyZWF0ZVJhbmdlKCkudGV4dC5sZW5ndGg7XG5cdFx0XHRzZWwubW92ZVN0YXJ0KCdjaGFyYWN0ZXInLCAtaW5wdXQudmFsdWUubGVuZ3RoKTtcblx0XHRcdHJlc3VsdC5zdGFydCA9IHNlbC50ZXh0Lmxlbmd0aCAtIHNlbExlbjtcblx0XHRcdHJlc3VsdC5sZW5ndGggPSBzZWxMZW47XG5cdFx0fVxuXHRcdHJldHVybiByZXN1bHQ7XG5cdH07XG5cdFxuXHQvKipcblx0ICogQ29waWVzIENTUyBwcm9wZXJ0aWVzIGZyb20gb25lIGVsZW1lbnQgdG8gYW5vdGhlci5cblx0ICpcblx0ICogQHBhcmFtIHtvYmplY3R9ICRmcm9tXG5cdCAqIEBwYXJhbSB7b2JqZWN0fSAkdG9cblx0ICogQHBhcmFtIHthcnJheX0gcHJvcGVydGllc1xuXHQgKi9cblx0dmFyIHRyYW5zZmVyU3R5bGVzID0gZnVuY3Rpb24oJGZyb20sICR0bywgcHJvcGVydGllcykge1xuXHRcdHZhciBpLCBuLCBzdHlsZXMgPSB7fTtcblx0XHRpZiAocHJvcGVydGllcykge1xuXHRcdFx0Zm9yIChpID0gMCwgbiA9IHByb3BlcnRpZXMubGVuZ3RoOyBpIDwgbjsgaSsrKSB7XG5cdFx0XHRcdHN0eWxlc1twcm9wZXJ0aWVzW2ldXSA9ICRmcm9tLmNzcyhwcm9wZXJ0aWVzW2ldKTtcblx0XHRcdH1cblx0XHR9IGVsc2Uge1xuXHRcdFx0c3R5bGVzID0gJGZyb20uY3NzKCk7XG5cdFx0fVxuXHRcdCR0by5jc3Moc3R5bGVzKTtcblx0fTtcblx0XG5cdC8qKlxuXHQgKiBNZWFzdXJlcyB0aGUgd2lkdGggb2YgYSBzdHJpbmcgd2l0aGluIGFcblx0ICogcGFyZW50IGVsZW1lbnQgKGluIHBpeGVscykuXG5cdCAqXG5cdCAqIEBwYXJhbSB7c3RyaW5nfSBzdHJcblx0ICogQHBhcmFtIHtvYmplY3R9ICRwYXJlbnRcblx0ICogQHJldHVybnMge2ludH1cblx0ICovXG5cdHZhciBtZWFzdXJlU3RyaW5nID0gZnVuY3Rpb24oc3RyLCAkcGFyZW50KSB7XG5cdFx0aWYgKCFzdHIpIHtcblx0XHRcdHJldHVybiAwO1xuXHRcdH1cblx0XG5cdFx0dmFyICR0ZXN0ID0gJCgnPHRlc3Q+JykuY3NzKHtcblx0XHRcdHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuXHRcdFx0dG9wOiAtOTk5OTksXG5cdFx0XHRsZWZ0OiAtOTk5OTksXG5cdFx0XHR3aWR0aDogJ2F1dG8nLFxuXHRcdFx0cGFkZGluZzogMCxcblx0XHRcdHdoaXRlU3BhY2U6ICdwcmUnXG5cdFx0fSkudGV4dChzdHIpLmFwcGVuZFRvKCdib2R5Jyk7XG5cdFxuXHRcdHRyYW5zZmVyU3R5bGVzKCRwYXJlbnQsICR0ZXN0LCBbXG5cdFx0XHQnbGV0dGVyU3BhY2luZycsXG5cdFx0XHQnZm9udFNpemUnLFxuXHRcdFx0J2ZvbnRGYW1pbHknLFxuXHRcdFx0J2ZvbnRXZWlnaHQnLFxuXHRcdFx0J3RleHRUcmFuc2Zvcm0nXG5cdFx0XSk7XG5cdFxuXHRcdHZhciB3aWR0aCA9ICR0ZXN0LndpZHRoKCk7XG5cdFx0JHRlc3QucmVtb3ZlKCk7XG5cdFxuXHRcdHJldHVybiB3aWR0aDtcblx0fTtcblx0XG5cdC8qKlxuXHQgKiBTZXRzIHVwIGFuIGlucHV0IHRvIGdyb3cgaG9yaXpvbnRhbGx5IGFzIHRoZSB1c2VyXG5cdCAqIHR5cGVzLiBJZiB0aGUgdmFsdWUgaXMgY2hhbmdlZCBtYW51YWxseSwgeW91IGNhblxuXHQgKiB0cmlnZ2VyIHRoZSBcInVwZGF0ZVwiIGhhbmRsZXIgdG8gcmVzaXplOlxuXHQgKlxuXHQgKiAkaW5wdXQudHJpZ2dlcigndXBkYXRlJyk7XG5cdCAqXG5cdCAqIEBwYXJhbSB7b2JqZWN0fSAkaW5wdXRcblx0ICovXG5cdHZhciBhdXRvR3JvdyA9IGZ1bmN0aW9uKCRpbnB1dCkge1xuXHRcdHZhciBjdXJyZW50V2lkdGggPSBudWxsO1xuXHRcblx0XHR2YXIgdXBkYXRlID0gZnVuY3Rpb24oZSwgb3B0aW9ucykge1xuXHRcdFx0dmFyIHZhbHVlLCBrZXlDb2RlLCBwcmludGFibGUsIHBsYWNlaG9sZGVyLCB3aWR0aDtcblx0XHRcdHZhciBzaGlmdCwgY2hhcmFjdGVyLCBzZWxlY3Rpb247XG5cdFx0XHRlID0gZSB8fCB3aW5kb3cuZXZlbnQgfHwge307XG5cdFx0XHRvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcblx0XG5cdFx0XHRpZiAoZS5tZXRhS2V5IHx8IGUuYWx0S2V5KSByZXR1cm47XG5cdFx0XHRpZiAoIW9wdGlvbnMuZm9yY2UgJiYgJGlucHV0LmRhdGEoJ2dyb3cnKSA9PT0gZmFsc2UpIHJldHVybjtcblx0XG5cdFx0XHR2YWx1ZSA9ICRpbnB1dC52YWwoKTtcblx0XHRcdGlmIChlLnR5cGUgJiYgZS50eXBlLnRvTG93ZXJDYXNlKCkgPT09ICdrZXlkb3duJykge1xuXHRcdFx0XHRrZXlDb2RlID0gZS5rZXlDb2RlO1xuXHRcdFx0XHRwcmludGFibGUgPSAoXG5cdFx0XHRcdFx0KGtleUNvZGUgPj0gOTcgJiYga2V5Q29kZSA8PSAxMjIpIHx8IC8vIGEtelxuXHRcdFx0XHRcdChrZXlDb2RlID49IDY1ICYmIGtleUNvZGUgPD0gOTApICB8fCAvLyBBLVpcblx0XHRcdFx0XHQoa2V5Q29kZSA+PSA0OCAmJiBrZXlDb2RlIDw9IDU3KSAgfHwgLy8gMC05XG5cdFx0XHRcdFx0a2V5Q29kZSA9PT0gMzIgLy8gc3BhY2Vcblx0XHRcdFx0KTtcblx0XG5cdFx0XHRcdGlmIChrZXlDb2RlID09PSBLRVlfREVMRVRFIHx8IGtleUNvZGUgPT09IEtFWV9CQUNLU1BBQ0UpIHtcblx0XHRcdFx0XHRzZWxlY3Rpb24gPSBnZXRTZWxlY3Rpb24oJGlucHV0WzBdKTtcblx0XHRcdFx0XHRpZiAoc2VsZWN0aW9uLmxlbmd0aCkge1xuXHRcdFx0XHRcdFx0dmFsdWUgPSB2YWx1ZS5zdWJzdHJpbmcoMCwgc2VsZWN0aW9uLnN0YXJ0KSArIHZhbHVlLnN1YnN0cmluZyhzZWxlY3Rpb24uc3RhcnQgKyBzZWxlY3Rpb24ubGVuZ3RoKTtcblx0XHRcdFx0XHR9IGVsc2UgaWYgKGtleUNvZGUgPT09IEtFWV9CQUNLU1BBQ0UgJiYgc2VsZWN0aW9uLnN0YXJ0KSB7XG5cdFx0XHRcdFx0XHR2YWx1ZSA9IHZhbHVlLnN1YnN0cmluZygwLCBzZWxlY3Rpb24uc3RhcnQgLSAxKSArIHZhbHVlLnN1YnN0cmluZyhzZWxlY3Rpb24uc3RhcnQgKyAxKTtcblx0XHRcdFx0XHR9IGVsc2UgaWYgKGtleUNvZGUgPT09IEtFWV9ERUxFVEUgJiYgdHlwZW9mIHNlbGVjdGlvbi5zdGFydCAhPT0gJ3VuZGVmaW5lZCcpIHtcblx0XHRcdFx0XHRcdHZhbHVlID0gdmFsdWUuc3Vic3RyaW5nKDAsIHNlbGVjdGlvbi5zdGFydCkgKyB2YWx1ZS5zdWJzdHJpbmcoc2VsZWN0aW9uLnN0YXJ0ICsgMSk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9IGVsc2UgaWYgKHByaW50YWJsZSkge1xuXHRcdFx0XHRcdHNoaWZ0ID0gZS5zaGlmdEtleTtcblx0XHRcdFx0XHRjaGFyYWN0ZXIgPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGUua2V5Q29kZSk7XG5cdFx0XHRcdFx0aWYgKHNoaWZ0KSBjaGFyYWN0ZXIgPSBjaGFyYWN0ZXIudG9VcHBlckNhc2UoKTtcblx0XHRcdFx0XHRlbHNlIGNoYXJhY3RlciA9IGNoYXJhY3Rlci50b0xvd2VyQ2FzZSgpO1xuXHRcdFx0XHRcdHZhbHVlICs9IGNoYXJhY3Rlcjtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcblx0XHRcdHBsYWNlaG9sZGVyID0gJGlucHV0LmF0dHIoJ3BsYWNlaG9sZGVyJyk7XG5cdFx0XHRpZiAoIXZhbHVlICYmIHBsYWNlaG9sZGVyKSB7XG5cdFx0XHRcdHZhbHVlID0gcGxhY2Vob2xkZXI7XG5cdFx0XHR9XG5cdFxuXHRcdFx0d2lkdGggPSBtZWFzdXJlU3RyaW5nKHZhbHVlLCAkaW5wdXQpICsgNDtcblx0XHRcdGlmICh3aWR0aCAhPT0gY3VycmVudFdpZHRoKSB7XG5cdFx0XHRcdGN1cnJlbnRXaWR0aCA9IHdpZHRoO1xuXHRcdFx0XHQkaW5wdXQud2lkdGgod2lkdGgpO1xuXHRcdFx0XHQkaW5wdXQudHJpZ2dlckhhbmRsZXIoJ3Jlc2l6ZScpO1xuXHRcdFx0fVxuXHRcdH07XG5cdFxuXHRcdCRpbnB1dC5vbigna2V5ZG93biBrZXl1cCB1cGRhdGUgYmx1cicsIHVwZGF0ZSk7XG5cdFx0dXBkYXRlKCk7XG5cdH07XG5cdFxuXHR2YXIgZG9tVG9TdHJpbmcgPSBmdW5jdGlvbihkKSB7XG5cdFx0dmFyIHRtcCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuXHRcblx0XHR0bXAuYXBwZW5kQ2hpbGQoZC5jbG9uZU5vZGUodHJ1ZSkpO1xuXHRcblx0XHRyZXR1cm4gdG1wLmlubmVySFRNTDtcblx0fTtcblx0XG5cdHZhciBsb2dFcnJvciA9IGZ1bmN0aW9uKG1lc3NhZ2UsIG9wdGlvbnMpe1xuXHRcdGlmKCFvcHRpb25zKSBvcHRpb25zID0ge307XG5cdFx0dmFyIGNvbXBvbmVudCA9IFwiU2VsZWN0aXplXCI7XG5cdFxuXHRcdGNvbnNvbGUuZXJyb3IoY29tcG9uZW50ICsgXCI6IFwiICsgbWVzc2FnZSlcblx0XG5cdFx0aWYob3B0aW9ucy5leHBsYW5hdGlvbil7XG5cdFx0XHQvLyBjb25zb2xlLmdyb3VwIGlzIHVuZGVmaW5lZCBpbiA8SUUxMVxuXHRcdFx0aWYoY29uc29sZS5ncm91cCkgY29uc29sZS5ncm91cCgpO1xuXHRcdFx0Y29uc29sZS5lcnJvcihvcHRpb25zLmV4cGxhbmF0aW9uKTtcblx0XHRcdGlmKGNvbnNvbGUuZ3JvdXApIGNvbnNvbGUuZ3JvdXBFbmQoKTtcblx0XHR9XG5cdH1cblx0XG5cdFxuXHR2YXIgU2VsZWN0aXplID0gZnVuY3Rpb24oJGlucHV0LCBzZXR0aW5ncykge1xuXHRcdHZhciBrZXksIGksIG4sIGRpciwgaW5wdXQsIHNlbGYgPSB0aGlzO1xuXHRcdGlucHV0ID0gJGlucHV0WzBdO1xuXHRcdGlucHV0LnNlbGVjdGl6ZSA9IHNlbGY7XG5cdFxuXHRcdC8vIGRldGVjdCBydGwgZW52aXJvbm1lbnRcblx0XHR2YXIgY29tcHV0ZWRTdHlsZSA9IHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlICYmIHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKGlucHV0LCBudWxsKTtcblx0XHRkaXIgPSBjb21wdXRlZFN0eWxlID8gY29tcHV0ZWRTdHlsZS5nZXRQcm9wZXJ0eVZhbHVlKCdkaXJlY3Rpb24nKSA6IGlucHV0LmN1cnJlbnRTdHlsZSAmJiBpbnB1dC5jdXJyZW50U3R5bGUuZGlyZWN0aW9uO1xuXHRcdGRpciA9IGRpciB8fCAkaW5wdXQucGFyZW50cygnW2Rpcl06Zmlyc3QnKS5hdHRyKCdkaXInKSB8fCAnJztcblx0XG5cdFx0Ly8gc2V0dXAgZGVmYXVsdCBzdGF0ZVxuXHRcdCQuZXh0ZW5kKHNlbGYsIHtcblx0XHRcdG9yZGVyICAgICAgICAgICAgOiAwLFxuXHRcdFx0c2V0dGluZ3MgICAgICAgICA6IHNldHRpbmdzLFxuXHRcdFx0JGlucHV0ICAgICAgICAgICA6ICRpbnB1dCxcblx0XHRcdHRhYkluZGV4ICAgICAgICAgOiAkaW5wdXQuYXR0cigndGFiaW5kZXgnKSB8fCAnJyxcblx0XHRcdHRhZ1R5cGUgICAgICAgICAgOiBpbnB1dC50YWdOYW1lLnRvTG93ZXJDYXNlKCkgPT09ICdzZWxlY3QnID8gVEFHX1NFTEVDVCA6IFRBR19JTlBVVCxcblx0XHRcdHJ0bCAgICAgICAgICAgICAgOiAvcnRsL2kudGVzdChkaXIpLFxuXHRcblx0XHRcdGV2ZW50TlMgICAgICAgICAgOiAnLnNlbGVjdGl6ZScgKyAoKytTZWxlY3RpemUuY291bnQpLFxuXHRcdFx0aGlnaGxpZ2h0ZWRWYWx1ZSA6IG51bGwsXG5cdFx0XHRpc09wZW4gICAgICAgICAgIDogZmFsc2UsXG5cdFx0XHRpc0Rpc2FibGVkICAgICAgIDogZmFsc2UsXG5cdFx0XHRpc1JlcXVpcmVkICAgICAgIDogJGlucHV0LmlzKCdbcmVxdWlyZWRdJyksXG5cdFx0XHRpc0ludmFsaWQgICAgICAgIDogZmFsc2UsXG5cdFx0XHRpc0xvY2tlZCAgICAgICAgIDogZmFsc2UsXG5cdFx0XHRpc0ZvY3VzZWQgICAgICAgIDogZmFsc2UsXG5cdFx0XHRpc0lucHV0SGlkZGVuICAgIDogZmFsc2UsXG5cdFx0XHRpc1NldHVwICAgICAgICAgIDogZmFsc2UsXG5cdFx0XHRpc1NoaWZ0RG93biAgICAgIDogZmFsc2UsXG5cdFx0XHRpc0NtZERvd24gICAgICAgIDogZmFsc2UsXG5cdFx0XHRpc0N0cmxEb3duICAgICAgIDogZmFsc2UsXG5cdFx0XHRpZ25vcmVGb2N1cyAgICAgIDogZmFsc2UsXG5cdFx0XHRpZ25vcmVCbHVyICAgICAgIDogZmFsc2UsXG5cdFx0XHRpZ25vcmVIb3ZlciAgICAgIDogZmFsc2UsXG5cdFx0XHRoYXNPcHRpb25zICAgICAgIDogZmFsc2UsXG5cdFx0XHRjdXJyZW50UmVzdWx0cyAgIDogbnVsbCxcblx0XHRcdGxhc3RWYWx1ZSAgICAgICAgOiAnJyxcblx0XHRcdGNhcmV0UG9zICAgICAgICAgOiAwLFxuXHRcdFx0bG9hZGluZyAgICAgICAgICA6IDAsXG5cdFx0XHRsb2FkZWRTZWFyY2hlcyAgIDoge30sXG5cdFxuXHRcdFx0JGFjdGl2ZU9wdGlvbiAgICA6IG51bGwsXG5cdFx0XHQkYWN0aXZlSXRlbXMgICAgIDogW10sXG5cdFxuXHRcdFx0b3B0Z3JvdXBzICAgICAgICA6IHt9LFxuXHRcdFx0b3B0aW9ucyAgICAgICAgICA6IHt9LFxuXHRcdFx0dXNlck9wdGlvbnMgICAgICA6IHt9LFxuXHRcdFx0aXRlbXMgICAgICAgICAgICA6IFtdLFxuXHRcdFx0cmVuZGVyQ2FjaGUgICAgICA6IHt9LFxuXHRcdFx0b25TZWFyY2hDaGFuZ2UgICA6IHNldHRpbmdzLmxvYWRUaHJvdHRsZSA9PT0gbnVsbCA/IHNlbGYub25TZWFyY2hDaGFuZ2UgOiBkZWJvdW5jZShzZWxmLm9uU2VhcmNoQ2hhbmdlLCBzZXR0aW5ncy5sb2FkVGhyb3R0bGUpXG5cdFx0fSk7XG5cdFxuXHRcdC8vIHNlYXJjaCBzeXN0ZW1cblx0XHRzZWxmLnNpZnRlciA9IG5ldyBTaWZ0ZXIodGhpcy5vcHRpb25zLCB7ZGlhY3JpdGljczogc2V0dGluZ3MuZGlhY3JpdGljc30pO1xuXHRcblx0XHQvLyBidWlsZCBvcHRpb25zIHRhYmxlXG5cdFx0aWYgKHNlbGYuc2V0dGluZ3Mub3B0aW9ucykge1xuXHRcdFx0Zm9yIChpID0gMCwgbiA9IHNlbGYuc2V0dGluZ3Mub3B0aW9ucy5sZW5ndGg7IGkgPCBuOyBpKyspIHtcblx0XHRcdFx0c2VsZi5yZWdpc3Rlck9wdGlvbihzZWxmLnNldHRpbmdzLm9wdGlvbnNbaV0pO1xuXHRcdFx0fVxuXHRcdFx0ZGVsZXRlIHNlbGYuc2V0dGluZ3Mub3B0aW9ucztcblx0XHR9XG5cdFxuXHRcdC8vIGJ1aWxkIG9wdGdyb3VwIHRhYmxlXG5cdFx0aWYgKHNlbGYuc2V0dGluZ3Mub3B0Z3JvdXBzKSB7XG5cdFx0XHRmb3IgKGkgPSAwLCBuID0gc2VsZi5zZXR0aW5ncy5vcHRncm91cHMubGVuZ3RoOyBpIDwgbjsgaSsrKSB7XG5cdFx0XHRcdHNlbGYucmVnaXN0ZXJPcHRpb25Hcm91cChzZWxmLnNldHRpbmdzLm9wdGdyb3Vwc1tpXSk7XG5cdFx0XHR9XG5cdFx0XHRkZWxldGUgc2VsZi5zZXR0aW5ncy5vcHRncm91cHM7XG5cdFx0fVxuXHRcblx0XHQvLyBvcHRpb24tZGVwZW5kZW50IGRlZmF1bHRzXG5cdFx0c2VsZi5zZXR0aW5ncy5tb2RlID0gc2VsZi5zZXR0aW5ncy5tb2RlIHx8IChzZWxmLnNldHRpbmdzLm1heEl0ZW1zID09PSAxID8gJ3NpbmdsZScgOiAnbXVsdGknKTtcblx0XHRpZiAodHlwZW9mIHNlbGYuc2V0dGluZ3MuaGlkZVNlbGVjdGVkICE9PSAnYm9vbGVhbicpIHtcblx0XHRcdHNlbGYuc2V0dGluZ3MuaGlkZVNlbGVjdGVkID0gc2VsZi5zZXR0aW5ncy5tb2RlID09PSAnbXVsdGknO1xuXHRcdH1cblx0XG5cdFx0c2VsZi5pbml0aWFsaXplUGx1Z2lucyhzZWxmLnNldHRpbmdzLnBsdWdpbnMpO1xuXHRcdHNlbGYuc2V0dXBDYWxsYmFja3MoKTtcblx0XHRzZWxmLnNldHVwVGVtcGxhdGVzKCk7XG5cdFx0c2VsZi5zZXR1cCgpO1xuXHR9O1xuXHRcblx0Ly8gbWl4aW5zXG5cdC8vIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtXG5cdFxuXHRNaWNyb0V2ZW50Lm1peGluKFNlbGVjdGl6ZSk7XG5cdFxuXHRpZih0eXBlb2YgTWljcm9QbHVnaW4gIT09IFwidW5kZWZpbmVkXCIpe1xuXHRcdE1pY3JvUGx1Z2luLm1peGluKFNlbGVjdGl6ZSk7XG5cdH1lbHNle1xuXHRcdGxvZ0Vycm9yKFwiRGVwZW5kZW5jeSBNaWNyb1BsdWdpbiBpcyBtaXNzaW5nXCIsXG5cdFx0XHR7ZXhwbGFuYXRpb246XG5cdFx0XHRcdFwiTWFrZSBzdXJlIHlvdSBlaXRoZXI6ICgxKSBhcmUgdXNpbmcgdGhlIFxcXCJzdGFuZGFsb25lXFxcIiBcIitcblx0XHRcdFx0XCJ2ZXJzaW9uIG9mIFNlbGVjdGl6ZSwgb3IgKDIpIHJlcXVpcmUgTWljcm9QbHVnaW4gYmVmb3JlIHlvdSBcIitcblx0XHRcdFx0XCJsb2FkIFNlbGVjdGl6ZS5cIn1cblx0XHQpO1xuXHR9XG5cdFxuXHRcblx0Ly8gbWV0aG9kc1xuXHQvLyAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLVxuXHRcblx0JC5leHRlbmQoU2VsZWN0aXplLnByb3RvdHlwZSwge1xuXHRcblx0XHQvKipcblx0XHQgKiBDcmVhdGVzIGFsbCBlbGVtZW50cyBhbmQgc2V0cyB1cCBldmVudCBiaW5kaW5ncy5cblx0XHQgKi9cblx0XHRzZXR1cDogZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgc2VsZiAgICAgID0gdGhpcztcblx0XHRcdHZhciBzZXR0aW5ncyAgPSBzZWxmLnNldHRpbmdzO1xuXHRcdFx0dmFyIGV2ZW50TlMgICA9IHNlbGYuZXZlbnROUztcblx0XHRcdHZhciAkd2luZG93ICAgPSAkKHdpbmRvdyk7XG5cdFx0XHR2YXIgJGRvY3VtZW50ID0gJChkb2N1bWVudCk7XG5cdFx0XHR2YXIgJGlucHV0ICAgID0gc2VsZi4kaW5wdXQ7XG5cdFxuXHRcdFx0dmFyICR3cmFwcGVyO1xuXHRcdFx0dmFyICRjb250cm9sO1xuXHRcdFx0dmFyICRjb250cm9sX2lucHV0O1xuXHRcdFx0dmFyICRkcm9wZG93bjtcblx0XHRcdHZhciAkZHJvcGRvd25fY29udGVudDtcblx0XHRcdHZhciAkZHJvcGRvd25fcGFyZW50O1xuXHRcdFx0dmFyIGlucHV0TW9kZTtcblx0XHRcdHZhciB0aW1lb3V0X2JsdXI7XG5cdFx0XHR2YXIgdGltZW91dF9mb2N1cztcblx0XHRcdHZhciBjbGFzc2VzO1xuXHRcdFx0dmFyIGNsYXNzZXNfcGx1Z2lucztcblx0XHRcdHZhciBpbnB1dElkO1xuXHRcblx0XHRcdGlucHV0TW9kZSAgICAgICAgID0gc2VsZi5zZXR0aW5ncy5tb2RlO1xuXHRcdFx0Y2xhc3NlcyAgICAgICAgICAgPSAkaW5wdXQuYXR0cignY2xhc3MnKSB8fCAnJztcblx0XG5cdFx0XHQkd3JhcHBlciAgICAgICAgICA9ICQoJzxkaXY+JykuYWRkQ2xhc3Moc2V0dGluZ3Mud3JhcHBlckNsYXNzKS5hZGRDbGFzcyhjbGFzc2VzKS5hZGRDbGFzcyhpbnB1dE1vZGUpO1xuXHRcdFx0JGNvbnRyb2wgICAgICAgICAgPSAkKCc8ZGl2PicpLmFkZENsYXNzKHNldHRpbmdzLmlucHV0Q2xhc3MpLmFkZENsYXNzKCdpdGVtcycpLmFwcGVuZFRvKCR3cmFwcGVyKTtcblx0XHRcdCRjb250cm9sX2lucHV0ICAgID0gJCgnPGlucHV0IHR5cGU9XCJ0ZXh0XCIgYXV0b2NvbXBsZXRlPVwib2ZmXCIgLz4nKS5hcHBlbmRUbygkY29udHJvbCkuYXR0cigndGFiaW5kZXgnLCAkaW5wdXQuaXMoJzpkaXNhYmxlZCcpID8gJy0xJyA6IHNlbGYudGFiSW5kZXgpO1xuXHRcdFx0JGRyb3Bkb3duX3BhcmVudCAgPSAkKHNldHRpbmdzLmRyb3Bkb3duUGFyZW50IHx8ICR3cmFwcGVyKTtcblx0XHRcdCRkcm9wZG93biAgICAgICAgID0gJCgnPGRpdj4nKS5hZGRDbGFzcyhzZXR0aW5ncy5kcm9wZG93bkNsYXNzKS5hZGRDbGFzcyhpbnB1dE1vZGUpLmhpZGUoKS5hcHBlbmRUbygkZHJvcGRvd25fcGFyZW50KTtcblx0XHRcdCRkcm9wZG93bl9jb250ZW50ID0gJCgnPGRpdj4nKS5hZGRDbGFzcyhzZXR0aW5ncy5kcm9wZG93bkNvbnRlbnRDbGFzcykuYXBwZW5kVG8oJGRyb3Bkb3duKTtcblx0XG5cdFx0XHRpZihpbnB1dElkID0gJGlucHV0LmF0dHIoJ2lkJykpIHtcblx0XHRcdFx0JGNvbnRyb2xfaW5wdXQuYXR0cignaWQnLCBpbnB1dElkICsgJy1zZWxlY3RpemVkJyk7XG5cdFx0XHRcdCQoXCJsYWJlbFtmb3I9J1wiK2lucHV0SWQrXCInXVwiKS5hdHRyKCdmb3InLCBpbnB1dElkICsgJy1zZWxlY3RpemVkJyk7XG5cdFx0XHR9XG5cdFxuXHRcdFx0aWYoc2VsZi5zZXR0aW5ncy5jb3B5Q2xhc3Nlc1RvRHJvcGRvd24pIHtcblx0XHRcdFx0JGRyb3Bkb3duLmFkZENsYXNzKGNsYXNzZXMpO1xuXHRcdFx0fVxuXHRcblx0XHRcdCR3cmFwcGVyLmNzcyh7XG5cdFx0XHRcdHdpZHRoOiAkaW5wdXRbMF0uc3R5bGUud2lkdGhcblx0XHRcdH0pO1xuXHRcblx0XHRcdGlmIChzZWxmLnBsdWdpbnMubmFtZXMubGVuZ3RoKSB7XG5cdFx0XHRcdGNsYXNzZXNfcGx1Z2lucyA9ICdwbHVnaW4tJyArIHNlbGYucGx1Z2lucy5uYW1lcy5qb2luKCcgcGx1Z2luLScpO1xuXHRcdFx0XHQkd3JhcHBlci5hZGRDbGFzcyhjbGFzc2VzX3BsdWdpbnMpO1xuXHRcdFx0XHQkZHJvcGRvd24uYWRkQ2xhc3MoY2xhc3Nlc19wbHVnaW5zKTtcblx0XHRcdH1cblx0XG5cdFx0XHRpZiAoKHNldHRpbmdzLm1heEl0ZW1zID09PSBudWxsIHx8IHNldHRpbmdzLm1heEl0ZW1zID4gMSkgJiYgc2VsZi50YWdUeXBlID09PSBUQUdfU0VMRUNUKSB7XG5cdFx0XHRcdCRpbnB1dC5hdHRyKCdtdWx0aXBsZScsICdtdWx0aXBsZScpO1xuXHRcdFx0fVxuXHRcblx0XHRcdGlmIChzZWxmLnNldHRpbmdzLnBsYWNlaG9sZGVyKSB7XG5cdFx0XHRcdCRjb250cm9sX2lucHV0LmF0dHIoJ3BsYWNlaG9sZGVyJywgc2V0dGluZ3MucGxhY2Vob2xkZXIpO1xuXHRcdFx0fVxuXHRcblx0XHRcdC8vIGlmIHNwbGl0T24gd2FzIG5vdCBwYXNzZWQgaW4sIGNvbnN0cnVjdCBpdCBmcm9tIHRoZSBkZWxpbWl0ZXIgdG8gYWxsb3cgcGFzdGluZyB1bml2ZXJzYWxseVxuXHRcdFx0aWYgKCFzZWxmLnNldHRpbmdzLnNwbGl0T24gJiYgc2VsZi5zZXR0aW5ncy5kZWxpbWl0ZXIpIHtcblx0XHRcdFx0dmFyIGRlbGltaXRlckVzY2FwZWQgPSBzZWxmLnNldHRpbmdzLmRlbGltaXRlci5yZXBsYWNlKC9bLVxcL1xcXFxeJCorPy4oKXxbXFxde31dL2csICdcXFxcJCYnKTtcblx0XHRcdFx0c2VsZi5zZXR0aW5ncy5zcGxpdE9uID0gbmV3IFJlZ0V4cCgnXFxcXHMqJyArIGRlbGltaXRlckVzY2FwZWQgKyAnK1xcXFxzKicpO1xuXHRcdFx0fVxuXHRcblx0XHRcdGlmICgkaW5wdXQuYXR0cignYXV0b2NvcnJlY3QnKSkge1xuXHRcdFx0XHQkY29udHJvbF9pbnB1dC5hdHRyKCdhdXRvY29ycmVjdCcsICRpbnB1dC5hdHRyKCdhdXRvY29ycmVjdCcpKTtcblx0XHRcdH1cblx0XG5cdFx0XHRpZiAoJGlucHV0LmF0dHIoJ2F1dG9jYXBpdGFsaXplJykpIHtcblx0XHRcdFx0JGNvbnRyb2xfaW5wdXQuYXR0cignYXV0b2NhcGl0YWxpemUnLCAkaW5wdXQuYXR0cignYXV0b2NhcGl0YWxpemUnKSk7XG5cdFx0XHR9XG5cdFxuXHRcdFx0c2VsZi4kd3JhcHBlciAgICAgICAgICA9ICR3cmFwcGVyO1xuXHRcdFx0c2VsZi4kY29udHJvbCAgICAgICAgICA9ICRjb250cm9sO1xuXHRcdFx0c2VsZi4kY29udHJvbF9pbnB1dCAgICA9ICRjb250cm9sX2lucHV0O1xuXHRcdFx0c2VsZi4kZHJvcGRvd24gICAgICAgICA9ICRkcm9wZG93bjtcblx0XHRcdHNlbGYuJGRyb3Bkb3duX2NvbnRlbnQgPSAkZHJvcGRvd25fY29udGVudDtcblx0XG5cdFx0XHQkZHJvcGRvd24ub24oJ21vdXNlZW50ZXInLCAnW2RhdGEtc2VsZWN0YWJsZV0nLCBmdW5jdGlvbigpIHsgcmV0dXJuIHNlbGYub25PcHRpb25Ib3Zlci5hcHBseShzZWxmLCBhcmd1bWVudHMpOyB9KTtcblx0XHRcdCRkcm9wZG93bi5vbignbW91c2Vkb3duIGNsaWNrJywgJ1tkYXRhLXNlbGVjdGFibGVdJywgZnVuY3Rpb24oKSB7IHJldHVybiBzZWxmLm9uT3B0aW9uU2VsZWN0LmFwcGx5KHNlbGYsIGFyZ3VtZW50cyk7IH0pO1xuXHRcdFx0d2F0Y2hDaGlsZEV2ZW50KCRjb250cm9sLCAnbW91c2Vkb3duJywgJyo6bm90KGlucHV0KScsIGZ1bmN0aW9uKCkgeyByZXR1cm4gc2VsZi5vbkl0ZW1TZWxlY3QuYXBwbHkoc2VsZiwgYXJndW1lbnRzKTsgfSk7XG5cdFx0XHRhdXRvR3JvdygkY29udHJvbF9pbnB1dCk7XG5cdFxuXHRcdFx0JGNvbnRyb2wub24oe1xuXHRcdFx0XHRtb3VzZWRvd24gOiBmdW5jdGlvbigpIHsgcmV0dXJuIHNlbGYub25Nb3VzZURvd24uYXBwbHkoc2VsZiwgYXJndW1lbnRzKTsgfSxcblx0XHRcdFx0Y2xpY2sgICAgIDogZnVuY3Rpb24oKSB7IHJldHVybiBzZWxmLm9uQ2xpY2suYXBwbHkoc2VsZiwgYXJndW1lbnRzKTsgfVxuXHRcdFx0fSk7XG5cdFxuXHRcdFx0JGNvbnRyb2xfaW5wdXQub24oe1xuXHRcdFx0XHRtb3VzZWRvd24gOiBmdW5jdGlvbihlKSB7IGUuc3RvcFByb3BhZ2F0aW9uKCk7IH0sXG5cdFx0XHRcdGtleWRvd24gICA6IGZ1bmN0aW9uKCkgeyByZXR1cm4gc2VsZi5vbktleURvd24uYXBwbHkoc2VsZiwgYXJndW1lbnRzKTsgfSxcblx0XHRcdFx0a2V5dXAgICAgIDogZnVuY3Rpb24oKSB7IHJldHVybiBzZWxmLm9uS2V5VXAuYXBwbHkoc2VsZiwgYXJndW1lbnRzKTsgfSxcblx0XHRcdFx0a2V5cHJlc3MgIDogZnVuY3Rpb24oKSB7IHJldHVybiBzZWxmLm9uS2V5UHJlc3MuYXBwbHkoc2VsZiwgYXJndW1lbnRzKTsgfSxcblx0XHRcdFx0cmVzaXplICAgIDogZnVuY3Rpb24oKSB7IHNlbGYucG9zaXRpb25Ecm9wZG93bi5hcHBseShzZWxmLCBbXSk7IH0sXG5cdFx0XHRcdGJsdXIgICAgICA6IGZ1bmN0aW9uKCkgeyByZXR1cm4gc2VsZi5vbkJsdXIuYXBwbHkoc2VsZiwgYXJndW1lbnRzKTsgfSxcblx0XHRcdFx0Zm9jdXMgICAgIDogZnVuY3Rpb24oKSB7IHNlbGYuaWdub3JlQmx1ciA9IGZhbHNlOyByZXR1cm4gc2VsZi5vbkZvY3VzLmFwcGx5KHNlbGYsIGFyZ3VtZW50cyk7IH0sXG5cdFx0XHRcdHBhc3RlICAgICA6IGZ1bmN0aW9uKCkgeyByZXR1cm4gc2VsZi5vblBhc3RlLmFwcGx5KHNlbGYsIGFyZ3VtZW50cyk7IH1cblx0XHRcdH0pO1xuXHRcblx0XHRcdCRkb2N1bWVudC5vbigna2V5ZG93bicgKyBldmVudE5TLCBmdW5jdGlvbihlKSB7XG5cdFx0XHRcdHNlbGYuaXNDbWREb3duID0gZVtJU19NQUMgPyAnbWV0YUtleScgOiAnY3RybEtleSddO1xuXHRcdFx0XHRzZWxmLmlzQ3RybERvd24gPSBlW0lTX01BQyA/ICdhbHRLZXknIDogJ2N0cmxLZXknXTtcblx0XHRcdFx0c2VsZi5pc1NoaWZ0RG93biA9IGUuc2hpZnRLZXk7XG5cdFx0XHR9KTtcblx0XG5cdFx0XHQkZG9jdW1lbnQub24oJ2tleXVwJyArIGV2ZW50TlMsIGZ1bmN0aW9uKGUpIHtcblx0XHRcdFx0aWYgKGUua2V5Q29kZSA9PT0gS0VZX0NUUkwpIHNlbGYuaXNDdHJsRG93biA9IGZhbHNlO1xuXHRcdFx0XHRpZiAoZS5rZXlDb2RlID09PSBLRVlfU0hJRlQpIHNlbGYuaXNTaGlmdERvd24gPSBmYWxzZTtcblx0XHRcdFx0aWYgKGUua2V5Q29kZSA9PT0gS0VZX0NNRCkgc2VsZi5pc0NtZERvd24gPSBmYWxzZTtcblx0XHRcdH0pO1xuXHRcblx0XHRcdCRkb2N1bWVudC5vbignbW91c2Vkb3duJyArIGV2ZW50TlMsIGZ1bmN0aW9uKGUpIHtcblx0XHRcdFx0aWYgKHNlbGYuaXNGb2N1c2VkKSB7XG5cdFx0XHRcdFx0Ly8gcHJldmVudCBldmVudHMgb24gdGhlIGRyb3Bkb3duIHNjcm9sbGJhciBmcm9tIGNhdXNpbmcgdGhlIGNvbnRyb2wgdG8gYmx1clxuXHRcdFx0XHRcdGlmIChlLnRhcmdldCA9PT0gc2VsZi4kZHJvcGRvd25bMF0gfHwgZS50YXJnZXQucGFyZW50Tm9kZSA9PT0gc2VsZi4kZHJvcGRvd25bMF0pIHtcblx0XHRcdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0Ly8gYmx1ciBvbiBjbGljayBvdXRzaWRlXG5cdFx0XHRcdFx0aWYgKCFzZWxmLiRjb250cm9sLmhhcyhlLnRhcmdldCkubGVuZ3RoICYmIGUudGFyZ2V0ICE9PSBzZWxmLiRjb250cm9sWzBdKSB7XG5cdFx0XHRcdFx0XHRzZWxmLmJsdXIoZS50YXJnZXQpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fSk7XG5cdFxuXHRcdFx0JHdpbmRvdy5vbihbJ3Njcm9sbCcgKyBldmVudE5TLCAncmVzaXplJyArIGV2ZW50TlNdLmpvaW4oJyAnKSwgZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmIChzZWxmLmlzT3Blbikge1xuXHRcdFx0XHRcdHNlbGYucG9zaXRpb25Ecm9wZG93bi5hcHBseShzZWxmLCBhcmd1bWVudHMpO1xuXHRcdFx0XHR9XG5cdFx0XHR9KTtcblx0XHRcdCR3aW5kb3cub24oJ21vdXNlbW92ZScgKyBldmVudE5TLCBmdW5jdGlvbigpIHtcblx0XHRcdFx0c2VsZi5pZ25vcmVIb3ZlciA9IGZhbHNlO1xuXHRcdFx0fSk7XG5cdFxuXHRcdFx0Ly8gc3RvcmUgb3JpZ2luYWwgY2hpbGRyZW4gYW5kIHRhYiBpbmRleCBzbyB0aGF0IHRoZXkgY2FuIGJlXG5cdFx0XHQvLyByZXN0b3JlZCB3aGVuIHRoZSBkZXN0cm95KCkgbWV0aG9kIGlzIGNhbGxlZC5cblx0XHRcdHRoaXMucmV2ZXJ0U2V0dGluZ3MgPSB7XG5cdFx0XHRcdCRjaGlsZHJlbiA6ICRpbnB1dC5jaGlsZHJlbigpLmRldGFjaCgpLFxuXHRcdFx0XHR0YWJpbmRleCAgOiAkaW5wdXQuYXR0cigndGFiaW5kZXgnKVxuXHRcdFx0fTtcblx0XG5cdFx0XHQkaW5wdXQuYXR0cigndGFiaW5kZXgnLCAtMSkuaGlkZSgpLmFmdGVyKHNlbGYuJHdyYXBwZXIpO1xuXHRcblx0XHRcdGlmICgkLmlzQXJyYXkoc2V0dGluZ3MuaXRlbXMpKSB7XG5cdFx0XHRcdHNlbGYuc2V0VmFsdWUoc2V0dGluZ3MuaXRlbXMpO1xuXHRcdFx0XHRkZWxldGUgc2V0dGluZ3MuaXRlbXM7XG5cdFx0XHR9XG5cdFxuXHRcdFx0Ly8gZmVhdHVyZSBkZXRlY3QgZm9yIHRoZSB2YWxpZGF0aW9uIEFQSVxuXHRcdFx0aWYgKFNVUFBPUlRTX1ZBTElESVRZX0FQSSkge1xuXHRcdFx0XHQkaW5wdXQub24oJ2ludmFsaWQnICsgZXZlbnROUywgZnVuY3Rpb24oZSkge1xuXHRcdFx0XHRcdGUucHJldmVudERlZmF1bHQoKTtcblx0XHRcdFx0XHRzZWxmLmlzSW52YWxpZCA9IHRydWU7XG5cdFx0XHRcdFx0c2VsZi5yZWZyZXNoU3RhdGUoKTtcblx0XHRcdFx0fSk7XG5cdFx0XHR9XG5cdFxuXHRcdFx0c2VsZi51cGRhdGVPcmlnaW5hbElucHV0KCk7XG5cdFx0XHRzZWxmLnJlZnJlc2hJdGVtcygpO1xuXHRcdFx0c2VsZi5yZWZyZXNoU3RhdGUoKTtcblx0XHRcdHNlbGYudXBkYXRlUGxhY2Vob2xkZXIoKTtcblx0XHRcdHNlbGYuaXNTZXR1cCA9IHRydWU7XG5cdFxuXHRcdFx0aWYgKCRpbnB1dC5pcygnOmRpc2FibGVkJykpIHtcblx0XHRcdFx0c2VsZi5kaXNhYmxlKCk7XG5cdFx0XHR9XG5cdFxuXHRcdFx0c2VsZi5vbignY2hhbmdlJywgdGhpcy5vbkNoYW5nZSk7XG5cdFxuXHRcdFx0JGlucHV0LmRhdGEoJ3NlbGVjdGl6ZScsIHNlbGYpO1xuXHRcdFx0JGlucHV0LmFkZENsYXNzKCdzZWxlY3RpemVkJyk7XG5cdFx0XHRzZWxmLnRyaWdnZXIoJ2luaXRpYWxpemUnKTtcblx0XG5cdFx0XHQvLyBwcmVsb2FkIG9wdGlvbnNcblx0XHRcdGlmIChzZXR0aW5ncy5wcmVsb2FkID09PSB0cnVlKSB7XG5cdFx0XHRcdHNlbGYub25TZWFyY2hDaGFuZ2UoJycpO1xuXHRcdFx0fVxuXHRcblx0XHR9LFxuXHRcblx0XHQvKipcblx0XHQgKiBTZXRzIHVwIGRlZmF1bHQgcmVuZGVyaW5nIGZ1bmN0aW9ucy5cblx0XHQgKi9cblx0XHRzZXR1cFRlbXBsYXRlczogZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgc2VsZiA9IHRoaXM7XG5cdFx0XHR2YXIgZmllbGRfbGFiZWwgPSBzZWxmLnNldHRpbmdzLmxhYmVsRmllbGQ7XG5cdFx0XHR2YXIgZmllbGRfb3B0Z3JvdXAgPSBzZWxmLnNldHRpbmdzLm9wdGdyb3VwTGFiZWxGaWVsZDtcblx0XG5cdFx0XHR2YXIgdGVtcGxhdGVzID0ge1xuXHRcdFx0XHQnb3B0Z3JvdXAnOiBmdW5jdGlvbihkYXRhKSB7XG5cdFx0XHRcdFx0cmV0dXJuICc8ZGl2IGNsYXNzPVwib3B0Z3JvdXBcIj4nICsgZGF0YS5odG1sICsgJzwvZGl2Pic7XG5cdFx0XHRcdH0sXG5cdFx0XHRcdCdvcHRncm91cF9oZWFkZXInOiBmdW5jdGlvbihkYXRhLCBlc2NhcGUpIHtcblx0XHRcdFx0XHRyZXR1cm4gJzxkaXYgY2xhc3M9XCJvcHRncm91cC1oZWFkZXJcIj4nICsgZXNjYXBlKGRhdGFbZmllbGRfb3B0Z3JvdXBdKSArICc8L2Rpdj4nO1xuXHRcdFx0XHR9LFxuXHRcdFx0XHQnb3B0aW9uJzogZnVuY3Rpb24oZGF0YSwgZXNjYXBlKSB7XG5cdFx0XHRcdFx0cmV0dXJuICc8ZGl2IGNsYXNzPVwib3B0aW9uXCI+JyArIGVzY2FwZShkYXRhW2ZpZWxkX2xhYmVsXSkgKyAnPC9kaXY+Jztcblx0XHRcdFx0fSxcblx0XHRcdFx0J2l0ZW0nOiBmdW5jdGlvbihkYXRhLCBlc2NhcGUpIHtcblx0XHRcdFx0XHRyZXR1cm4gJzxkaXYgY2xhc3M9XCJpdGVtXCI+JyArIGVzY2FwZShkYXRhW2ZpZWxkX2xhYmVsXSkgKyAnPC9kaXY+Jztcblx0XHRcdFx0fSxcblx0XHRcdFx0J29wdGlvbl9jcmVhdGUnOiBmdW5jdGlvbihkYXRhLCBlc2NhcGUpIHtcblx0XHRcdFx0XHRyZXR1cm4gJzxkaXYgY2xhc3M9XCJjcmVhdGVcIj5BZGQgPHN0cm9uZz4nICsgZXNjYXBlKGRhdGEuaW5wdXQpICsgJzwvc3Ryb25nPiZoZWxsaXA7PC9kaXY+Jztcblx0XHRcdFx0fVxuXHRcdFx0fTtcblx0XG5cdFx0XHRzZWxmLnNldHRpbmdzLnJlbmRlciA9ICQuZXh0ZW5kKHt9LCB0ZW1wbGF0ZXMsIHNlbGYuc2V0dGluZ3MucmVuZGVyKTtcblx0XHR9LFxuXHRcblx0XHQvKipcblx0XHQgKiBNYXBzIGZpcmVkIGV2ZW50cyB0byBjYWxsYmFja3MgcHJvdmlkZWRcblx0XHQgKiBpbiB0aGUgc2V0dGluZ3MgdXNlZCB3aGVuIGNyZWF0aW5nIHRoZSBjb250cm9sLlxuXHRcdCAqL1xuXHRcdHNldHVwQ2FsbGJhY2tzOiBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBrZXksIGZuLCBjYWxsYmFja3MgPSB7XG5cdFx0XHRcdCdpbml0aWFsaXplJyAgICAgIDogJ29uSW5pdGlhbGl6ZScsXG5cdFx0XHRcdCdjaGFuZ2UnICAgICAgICAgIDogJ29uQ2hhbmdlJyxcblx0XHRcdFx0J2l0ZW1fYWRkJyAgICAgICAgOiAnb25JdGVtQWRkJyxcblx0XHRcdFx0J2l0ZW1fcmVtb3ZlJyAgICAgOiAnb25JdGVtUmVtb3ZlJyxcblx0XHRcdFx0J2NsZWFyJyAgICAgICAgICAgOiAnb25DbGVhcicsXG5cdFx0XHRcdCdvcHRpb25fYWRkJyAgICAgIDogJ29uT3B0aW9uQWRkJyxcblx0XHRcdFx0J29wdGlvbl9yZW1vdmUnICAgOiAnb25PcHRpb25SZW1vdmUnLFxuXHRcdFx0XHQnb3B0aW9uX2NsZWFyJyAgICA6ICdvbk9wdGlvbkNsZWFyJyxcblx0XHRcdFx0J29wdGdyb3VwX2FkZCcgICAgOiAnb25PcHRpb25Hcm91cEFkZCcsXG5cdFx0XHRcdCdvcHRncm91cF9yZW1vdmUnIDogJ29uT3B0aW9uR3JvdXBSZW1vdmUnLFxuXHRcdFx0XHQnb3B0Z3JvdXBfY2xlYXInICA6ICdvbk9wdGlvbkdyb3VwQ2xlYXInLFxuXHRcdFx0XHQnZHJvcGRvd25fb3BlbicgICA6ICdvbkRyb3Bkb3duT3BlbicsXG5cdFx0XHRcdCdkcm9wZG93bl9jbG9zZScgIDogJ29uRHJvcGRvd25DbG9zZScsXG5cdFx0XHRcdCd0eXBlJyAgICAgICAgICAgIDogJ29uVHlwZScsXG5cdFx0XHRcdCdsb2FkJyAgICAgICAgICAgIDogJ29uTG9hZCcsXG5cdFx0XHRcdCdmb2N1cycgICAgICAgICAgIDogJ29uRm9jdXMnLFxuXHRcdFx0XHQnYmx1cicgICAgICAgICAgICA6ICdvbkJsdXInXG5cdFx0XHR9O1xuXHRcblx0XHRcdGZvciAoa2V5IGluIGNhbGxiYWNrcykge1xuXHRcdFx0XHRpZiAoY2FsbGJhY2tzLmhhc093blByb3BlcnR5KGtleSkpIHtcblx0XHRcdFx0XHRmbiA9IHRoaXMuc2V0dGluZ3NbY2FsbGJhY2tzW2tleV1dO1xuXHRcdFx0XHRcdGlmIChmbikgdGhpcy5vbihrZXksIGZuKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0sXG5cdFxuXHRcdC8qKlxuXHRcdCAqIFRyaWdnZXJlZCB3aGVuIHRoZSBtYWluIGNvbnRyb2wgZWxlbWVudFxuXHRcdCAqIGhhcyBhIGNsaWNrIGV2ZW50LlxuXHRcdCAqXG5cdFx0ICogQHBhcmFtIHtvYmplY3R9IGVcblx0XHQgKiBAcmV0dXJuIHtib29sZWFufVxuXHRcdCAqL1xuXHRcdG9uQ2xpY2s6IGZ1bmN0aW9uKGUpIHtcblx0XHRcdHZhciBzZWxmID0gdGhpcztcblx0XG5cdFx0XHQvLyBuZWNlc3NhcnkgZm9yIG1vYmlsZSB3ZWJraXQgZGV2aWNlcyAobWFudWFsIGZvY3VzIHRyaWdnZXJpbmdcblx0XHRcdC8vIGlzIGlnbm9yZWQgdW5sZXNzIGludm9rZWQgd2l0aGluIGEgY2xpY2sgZXZlbnQpXG5cdFx0XHRpZiAoIXNlbGYuaXNGb2N1c2VkKSB7XG5cdFx0XHRcdHNlbGYuZm9jdXMoKTtcblx0XHRcdFx0ZS5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdFx0fVxuXHRcdH0sXG5cdFxuXHRcdC8qKlxuXHRcdCAqIFRyaWdnZXJlZCB3aGVuIHRoZSBtYWluIGNvbnRyb2wgZWxlbWVudFxuXHRcdCAqIGhhcyBhIG1vdXNlIGRvd24gZXZlbnQuXG5cdFx0ICpcblx0XHQgKiBAcGFyYW0ge29iamVjdH0gZVxuXHRcdCAqIEByZXR1cm4ge2Jvb2xlYW59XG5cdFx0ICovXG5cdFx0b25Nb3VzZURvd246IGZ1bmN0aW9uKGUpIHtcblx0XHRcdHZhciBzZWxmID0gdGhpcztcblx0XHRcdHZhciBkZWZhdWx0UHJldmVudGVkID0gZS5pc0RlZmF1bHRQcmV2ZW50ZWQoKTtcblx0XHRcdHZhciAkdGFyZ2V0ID0gJChlLnRhcmdldCk7XG5cdFxuXHRcdFx0aWYgKHNlbGYuaXNGb2N1c2VkKSB7XG5cdFx0XHRcdC8vIHJldGFpbiBmb2N1cyBieSBwcmV2ZW50aW5nIG5hdGl2ZSBoYW5kbGluZy4gaWYgdGhlXG5cdFx0XHRcdC8vIGV2ZW50IHRhcmdldCBpcyB0aGUgaW5wdXQgaXQgc2hvdWxkIG5vdCBiZSBtb2RpZmllZC5cblx0XHRcdFx0Ly8gb3RoZXJ3aXNlLCB0ZXh0IHNlbGVjdGlvbiB3aXRoaW4gdGhlIGlucHV0IHdvbid0IHdvcmsuXG5cdFx0XHRcdGlmIChlLnRhcmdldCAhPT0gc2VsZi4kY29udHJvbF9pbnB1dFswXSkge1xuXHRcdFx0XHRcdGlmIChzZWxmLnNldHRpbmdzLm1vZGUgPT09ICdzaW5nbGUnKSB7XG5cdFx0XHRcdFx0XHQvLyB0b2dnbGUgZHJvcGRvd25cblx0XHRcdFx0XHRcdHNlbGYuaXNPcGVuID8gc2VsZi5jbG9zZSgpIDogc2VsZi5vcGVuKCk7XG5cdFx0XHRcdFx0fSBlbHNlIGlmICghZGVmYXVsdFByZXZlbnRlZCkge1xuXHRcdFx0XHRcdFx0c2VsZi5zZXRBY3RpdmVJdGVtKG51bGwpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdC8vIGdpdmUgY29udHJvbCBmb2N1c1xuXHRcdFx0XHRpZiAoIWRlZmF1bHRQcmV2ZW50ZWQpIHtcblx0XHRcdFx0XHR3aW5kb3cuc2V0VGltZW91dChmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdHNlbGYuZm9jdXMoKTtcblx0XHRcdFx0XHR9LCAwKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0sXG5cdFxuXHRcdC8qKlxuXHRcdCAqIFRyaWdnZXJlZCB3aGVuIHRoZSB2YWx1ZSBvZiB0aGUgY29udHJvbCBoYXMgYmVlbiBjaGFuZ2VkLlxuXHRcdCAqIFRoaXMgc2hvdWxkIHByb3BhZ2F0ZSB0aGUgZXZlbnQgdG8gdGhlIG9yaWdpbmFsIERPTVxuXHRcdCAqIGlucHV0IC8gc2VsZWN0IGVsZW1lbnQuXG5cdFx0ICovXG5cdFx0b25DaGFuZ2U6IGZ1bmN0aW9uKCkge1xuXHRcdFx0dGhpcy4kaW5wdXQudHJpZ2dlcignY2hhbmdlJyk7XG5cdFx0fSxcblx0XG5cdFx0LyoqXG5cdFx0ICogVHJpZ2dlcmVkIG9uIDxpbnB1dD4gcGFzdGUuXG5cdFx0ICpcblx0XHQgKiBAcGFyYW0ge29iamVjdH0gZVxuXHRcdCAqIEByZXR1cm5zIHtib29sZWFufVxuXHRcdCAqL1xuXHRcdG9uUGFzdGU6IGZ1bmN0aW9uKGUpIHtcblx0XHRcdHZhciBzZWxmID0gdGhpcztcblx0XG5cdFx0XHRpZiAoc2VsZi5pc0Z1bGwoKSB8fCBzZWxmLmlzSW5wdXRIaWRkZW4gfHwgc2VsZi5pc0xvY2tlZCkge1xuXHRcdFx0XHRlLnByZXZlbnREZWZhdWx0KCk7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblx0XG5cdFx0XHQvLyBJZiBhIHJlZ2V4IG9yIHN0cmluZyBpcyBpbmNsdWRlZCwgdGhpcyB3aWxsIHNwbGl0IHRoZSBwYXN0ZWRcblx0XHRcdC8vIGlucHV0IGFuZCBjcmVhdGUgSXRlbXMgZm9yIGVhY2ggc2VwYXJhdGUgdmFsdWVcblx0XHRcdGlmIChzZWxmLnNldHRpbmdzLnNwbGl0T24pIHtcblx0XG5cdFx0XHRcdC8vIFdhaXQgZm9yIHBhc3RlZCB0ZXh0IHRvIGJlIHJlY29nbml6ZWQgaW4gdmFsdWVcblx0XHRcdFx0c2V0VGltZW91dChmdW5jdGlvbigpIHtcblx0XHRcdFx0XHR2YXIgcGFzdGVkVGV4dCA9IHNlbGYuJGNvbnRyb2xfaW5wdXQudmFsKCk7XG5cdFx0XHRcdFx0aWYoIXBhc3RlZFRleHQubWF0Y2goc2VsZi5zZXR0aW5ncy5zcGxpdE9uKSl7IHJldHVybiB9XG5cdFxuXHRcdFx0XHRcdHZhciBzcGxpdElucHV0ID0gJC50cmltKHBhc3RlZFRleHQpLnNwbGl0KHNlbGYuc2V0dGluZ3Muc3BsaXRPbik7XG5cdFx0XHRcdFx0Zm9yICh2YXIgaSA9IDAsIG4gPSBzcGxpdElucHV0Lmxlbmd0aDsgaSA8IG47IGkrKykge1xuXHRcdFx0XHRcdFx0c2VsZi5jcmVhdGVJdGVtKHNwbGl0SW5wdXRbaV0pO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSwgMCk7XG5cdFx0XHR9XG5cdFx0fSxcblx0XG5cdFx0LyoqXG5cdFx0ICogVHJpZ2dlcmVkIG9uIDxpbnB1dD4ga2V5cHJlc3MuXG5cdFx0ICpcblx0XHQgKiBAcGFyYW0ge29iamVjdH0gZVxuXHRcdCAqIEByZXR1cm5zIHtib29sZWFufVxuXHRcdCAqL1xuXHRcdG9uS2V5UHJlc3M6IGZ1bmN0aW9uKGUpIHtcblx0XHRcdGlmICh0aGlzLmlzTG9ja2VkKSByZXR1cm4gZSAmJiBlLnByZXZlbnREZWZhdWx0KCk7XG5cdFx0XHR2YXIgY2hhcmFjdGVyID0gU3RyaW5nLmZyb21DaGFyQ29kZShlLmtleUNvZGUgfHwgZS53aGljaCk7XG5cdFx0XHRpZiAodGhpcy5zZXR0aW5ncy5jcmVhdGUgJiYgdGhpcy5zZXR0aW5ncy5tb2RlID09PSAnbXVsdGknICYmIGNoYXJhY3RlciA9PT0gdGhpcy5zZXR0aW5ncy5kZWxpbWl0ZXIpIHtcblx0XHRcdFx0dGhpcy5jcmVhdGVJdGVtKCk7XG5cdFx0XHRcdGUucHJldmVudERlZmF1bHQoKTtcblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0fVxuXHRcdH0sXG5cdFxuXHRcdC8qKlxuXHRcdCAqIFRyaWdnZXJlZCBvbiA8aW5wdXQ+IGtleWRvd24uXG5cdFx0ICpcblx0XHQgKiBAcGFyYW0ge29iamVjdH0gZVxuXHRcdCAqIEByZXR1cm5zIHtib29sZWFufVxuXHRcdCAqL1xuXHRcdG9uS2V5RG93bjogZnVuY3Rpb24oZSkge1xuXHRcdFx0dmFyIGlzSW5wdXQgPSBlLnRhcmdldCA9PT0gdGhpcy4kY29udHJvbF9pbnB1dFswXTtcblx0XHRcdHZhciBzZWxmID0gdGhpcztcblx0XG5cdFx0XHRpZiAoc2VsZi5pc0xvY2tlZCkge1xuXHRcdFx0XHRpZiAoZS5rZXlDb2RlICE9PSBLRVlfVEFCKSB7XG5cdFx0XHRcdFx0ZS5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblx0XG5cdFx0XHRzd2l0Y2ggKGUua2V5Q29kZSkge1xuXHRcdFx0XHRjYXNlIEtFWV9BOlxuXHRcdFx0XHRcdGlmIChzZWxmLmlzQ21kRG93bikge1xuXHRcdFx0XHRcdFx0c2VsZi5zZWxlY3RBbGwoKTtcblx0XHRcdFx0XHRcdHJldHVybjtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdGNhc2UgS0VZX0VTQzpcblx0XHRcdFx0XHRpZiAoc2VsZi5pc09wZW4pIHtcblx0XHRcdFx0XHRcdGUucHJldmVudERlZmF1bHQoKTtcblx0XHRcdFx0XHRcdGUuc3RvcFByb3BhZ2F0aW9uKCk7XG5cdFx0XHRcdFx0XHRzZWxmLmNsb3NlKCk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHJldHVybjtcblx0XHRcdFx0Y2FzZSBLRVlfTjpcblx0XHRcdFx0XHRpZiAoIWUuY3RybEtleSB8fCBlLmFsdEtleSkgYnJlYWs7XG5cdFx0XHRcdGNhc2UgS0VZX0RPV046XG5cdFx0XHRcdFx0aWYgKCFzZWxmLmlzT3BlbiAmJiBzZWxmLmhhc09wdGlvbnMpIHtcblx0XHRcdFx0XHRcdHNlbGYub3BlbigpO1xuXHRcdFx0XHRcdH0gZWxzZSBpZiAoc2VsZi4kYWN0aXZlT3B0aW9uKSB7XG5cdFx0XHRcdFx0XHRzZWxmLmlnbm9yZUhvdmVyID0gdHJ1ZTtcblx0XHRcdFx0XHRcdHZhciAkbmV4dCA9IHNlbGYuZ2V0QWRqYWNlbnRPcHRpb24oc2VsZi4kYWN0aXZlT3B0aW9uLCAxKTtcblx0XHRcdFx0XHRcdGlmICgkbmV4dC5sZW5ndGgpIHNlbGYuc2V0QWN0aXZlT3B0aW9uKCRuZXh0LCB0cnVlLCB0cnVlKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0ZS5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdFx0XHRcdHJldHVybjtcblx0XHRcdFx0Y2FzZSBLRVlfUDpcblx0XHRcdFx0XHRpZiAoIWUuY3RybEtleSB8fCBlLmFsdEtleSkgYnJlYWs7XG5cdFx0XHRcdGNhc2UgS0VZX1VQOlxuXHRcdFx0XHRcdGlmIChzZWxmLiRhY3RpdmVPcHRpb24pIHtcblx0XHRcdFx0XHRcdHNlbGYuaWdub3JlSG92ZXIgPSB0cnVlO1xuXHRcdFx0XHRcdFx0dmFyICRwcmV2ID0gc2VsZi5nZXRBZGphY2VudE9wdGlvbihzZWxmLiRhY3RpdmVPcHRpb24sIC0xKTtcblx0XHRcdFx0XHRcdGlmICgkcHJldi5sZW5ndGgpIHNlbGYuc2V0QWN0aXZlT3B0aW9uKCRwcmV2LCB0cnVlLCB0cnVlKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0ZS5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdFx0XHRcdHJldHVybjtcblx0XHRcdFx0Y2FzZSBLRVlfUkVUVVJOOlxuXHRcdFx0XHRcdGlmIChzZWxmLmlzT3BlbiAmJiBzZWxmLiRhY3RpdmVPcHRpb24pIHtcblx0XHRcdFx0XHRcdHNlbGYub25PcHRpb25TZWxlY3Qoe2N1cnJlbnRUYXJnZXQ6IHNlbGYuJGFjdGl2ZU9wdGlvbn0pO1xuXHRcdFx0XHRcdFx0ZS5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRyZXR1cm47XG5cdFx0XHRcdGNhc2UgS0VZX0xFRlQ6XG5cdFx0XHRcdFx0c2VsZi5hZHZhbmNlU2VsZWN0aW9uKC0xLCBlKTtcblx0XHRcdFx0XHRyZXR1cm47XG5cdFx0XHRcdGNhc2UgS0VZX1JJR0hUOlxuXHRcdFx0XHRcdHNlbGYuYWR2YW5jZVNlbGVjdGlvbigxLCBlKTtcblx0XHRcdFx0XHRyZXR1cm47XG5cdFx0XHRcdGNhc2UgS0VZX1RBQjpcblx0XHRcdFx0XHRpZiAoc2VsZi5zZXR0aW5ncy5zZWxlY3RPblRhYiAmJiBzZWxmLmlzT3BlbiAmJiBzZWxmLiRhY3RpdmVPcHRpb24pIHtcblx0XHRcdFx0XHRcdHNlbGYub25PcHRpb25TZWxlY3Qoe2N1cnJlbnRUYXJnZXQ6IHNlbGYuJGFjdGl2ZU9wdGlvbn0pO1xuXHRcblx0XHRcdFx0XHRcdC8vIERlZmF1bHQgYmVoYXZpb3VyIGlzIHRvIGp1bXAgdG8gdGhlIG5leHQgZmllbGQsIHdlIG9ubHkgd2FudCB0aGlzXG5cdFx0XHRcdFx0XHQvLyBpZiB0aGUgY3VycmVudCBmaWVsZCBkb2Vzbid0IGFjY2VwdCBhbnkgbW9yZSBlbnRyaWVzXG5cdFx0XHRcdFx0XHRpZiAoIXNlbGYuaXNGdWxsKCkpIHtcblx0XHRcdFx0XHRcdFx0ZS5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRpZiAoc2VsZi5zZXR0aW5ncy5jcmVhdGUgJiYgc2VsZi5jcmVhdGVJdGVtKCkpIHtcblx0XHRcdFx0XHRcdGUucHJldmVudERlZmF1bHQoKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0XHRjYXNlIEtFWV9CQUNLU1BBQ0U6XG5cdFx0XHRcdGNhc2UgS0VZX0RFTEVURTpcblx0XHRcdFx0XHRzZWxmLmRlbGV0ZVNlbGVjdGlvbihlKTtcblx0XHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cdFxuXHRcdFx0aWYgKChzZWxmLmlzRnVsbCgpIHx8IHNlbGYuaXNJbnB1dEhpZGRlbikgJiYgIShJU19NQUMgPyBlLm1ldGFLZXkgOiBlLmN0cmxLZXkpKSB7XG5cdFx0XHRcdGUucHJldmVudERlZmF1bHQoKTtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXHRcdH0sXG5cdFxuXHRcdC8qKlxuXHRcdCAqIFRyaWdnZXJlZCBvbiA8aW5wdXQ+IGtleXVwLlxuXHRcdCAqXG5cdFx0ICogQHBhcmFtIHtvYmplY3R9IGVcblx0XHQgKiBAcmV0dXJucyB7Ym9vbGVhbn1cblx0XHQgKi9cblx0XHRvbktleVVwOiBmdW5jdGlvbihlKSB7XG5cdFx0XHR2YXIgc2VsZiA9IHRoaXM7XG5cdFxuXHRcdFx0aWYgKHNlbGYuaXNMb2NrZWQpIHJldHVybiBlICYmIGUucHJldmVudERlZmF1bHQoKTtcblx0XHRcdHZhciB2YWx1ZSA9IHNlbGYuJGNvbnRyb2xfaW5wdXQudmFsKCkgfHwgJyc7XG5cdFx0XHRpZiAoc2VsZi5sYXN0VmFsdWUgIT09IHZhbHVlKSB7XG5cdFx0XHRcdHNlbGYubGFzdFZhbHVlID0gdmFsdWU7XG5cdFx0XHRcdHNlbGYub25TZWFyY2hDaGFuZ2UodmFsdWUpO1xuXHRcdFx0XHRzZWxmLnJlZnJlc2hPcHRpb25zKCk7XG5cdFx0XHRcdHNlbGYudHJpZ2dlcigndHlwZScsIHZhbHVlKTtcblx0XHRcdH1cblx0XHR9LFxuXHRcblx0XHQvKipcblx0XHQgKiBJbnZva2VzIHRoZSB1c2VyLXByb3ZpZGUgb3B0aW9uIHByb3ZpZGVyIC8gbG9hZGVyLlxuXHRcdCAqXG5cdFx0ICogTm90ZTogdGhpcyBmdW5jdGlvbiBpcyBkZWJvdW5jZWQgaW4gdGhlIFNlbGVjdGl6ZVxuXHRcdCAqIGNvbnN0cnVjdG9yIChieSBgc2V0dGluZ3MubG9hZFRocm90dGxlYCBtaWxsaXNlY29uZHMpXG5cdFx0ICpcblx0XHQgKiBAcGFyYW0ge3N0cmluZ30gdmFsdWVcblx0XHQgKi9cblx0XHRvblNlYXJjaENoYW5nZTogZnVuY3Rpb24odmFsdWUpIHtcblx0XHRcdHZhciBzZWxmID0gdGhpcztcblx0XHRcdHZhciBmbiA9IHNlbGYuc2V0dGluZ3MubG9hZDtcblx0XHRcdGlmICghZm4pIHJldHVybjtcblx0XHRcdGlmIChzZWxmLmxvYWRlZFNlYXJjaGVzLmhhc093blByb3BlcnR5KHZhbHVlKSkgcmV0dXJuO1xuXHRcdFx0c2VsZi5sb2FkZWRTZWFyY2hlc1t2YWx1ZV0gPSB0cnVlO1xuXHRcdFx0c2VsZi5sb2FkKGZ1bmN0aW9uKGNhbGxiYWNrKSB7XG5cdFx0XHRcdGZuLmFwcGx5KHNlbGYsIFt2YWx1ZSwgY2FsbGJhY2tdKTtcblx0XHRcdH0pO1xuXHRcdH0sXG5cdFxuXHRcdC8qKlxuXHRcdCAqIFRyaWdnZXJlZCBvbiA8aW5wdXQ+IGZvY3VzLlxuXHRcdCAqXG5cdFx0ICogQHBhcmFtIHtvYmplY3R9IGUgKG9wdGlvbmFsKVxuXHRcdCAqIEByZXR1cm5zIHtib29sZWFufVxuXHRcdCAqL1xuXHRcdG9uRm9jdXM6IGZ1bmN0aW9uKGUpIHtcblx0XHRcdHZhciBzZWxmID0gdGhpcztcblx0XHRcdHZhciB3YXNGb2N1c2VkID0gc2VsZi5pc0ZvY3VzZWQ7XG5cdFxuXHRcdFx0aWYgKHNlbGYuaXNEaXNhYmxlZCkge1xuXHRcdFx0XHRzZWxmLmJsdXIoKTtcblx0XHRcdFx0ZSAmJiBlLnByZXZlbnREZWZhdWx0KCk7XG5cdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdH1cblx0XG5cdFx0XHRpZiAoc2VsZi5pZ25vcmVGb2N1cykgcmV0dXJuO1xuXHRcdFx0c2VsZi5pc0ZvY3VzZWQgPSB0cnVlO1xuXHRcdFx0aWYgKHNlbGYuc2V0dGluZ3MucHJlbG9hZCA9PT0gJ2ZvY3VzJykgc2VsZi5vblNlYXJjaENoYW5nZSgnJyk7XG5cdFxuXHRcdFx0aWYgKCF3YXNGb2N1c2VkKSBzZWxmLnRyaWdnZXIoJ2ZvY3VzJyk7XG5cdFxuXHRcdFx0aWYgKCFzZWxmLiRhY3RpdmVJdGVtcy5sZW5ndGgpIHtcblx0XHRcdFx0c2VsZi5zaG93SW5wdXQoKTtcblx0XHRcdFx0c2VsZi5zZXRBY3RpdmVJdGVtKG51bGwpO1xuXHRcdFx0XHRzZWxmLnJlZnJlc2hPcHRpb25zKCEhc2VsZi5zZXR0aW5ncy5vcGVuT25Gb2N1cyk7XG5cdFx0XHR9XG5cdFxuXHRcdFx0c2VsZi5yZWZyZXNoU3RhdGUoKTtcblx0XHR9LFxuXHRcblx0XHQvKipcblx0XHQgKiBUcmlnZ2VyZWQgb24gPGlucHV0PiBibHVyLlxuXHRcdCAqXG5cdFx0ICogQHBhcmFtIHtvYmplY3R9IGVcblx0XHQgKiBAcGFyYW0ge0VsZW1lbnR9IGRlc3Rcblx0XHQgKi9cblx0XHRvbkJsdXI6IGZ1bmN0aW9uKGUsIGRlc3QpIHtcblx0XHRcdHZhciBzZWxmID0gdGhpcztcblx0XHRcdGlmICghc2VsZi5pc0ZvY3VzZWQpIHJldHVybjtcblx0XHRcdHNlbGYuaXNGb2N1c2VkID0gZmFsc2U7XG5cdFxuXHRcdFx0aWYgKHNlbGYuaWdub3JlRm9jdXMpIHtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fSBlbHNlIGlmICghc2VsZi5pZ25vcmVCbHVyICYmIGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQgPT09IHNlbGYuJGRyb3Bkb3duX2NvbnRlbnRbMF0pIHtcblx0XHRcdFx0Ly8gbmVjZXNzYXJ5IHRvIHByZXZlbnQgSUUgY2xvc2luZyB0aGUgZHJvcGRvd24gd2hlbiB0aGUgc2Nyb2xsYmFyIGlzIGNsaWNrZWRcblx0XHRcdFx0c2VsZi5pZ25vcmVCbHVyID0gdHJ1ZTtcblx0XHRcdFx0c2VsZi5vbkZvY3VzKGUpO1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cdFxuXHRcdFx0dmFyIGRlYWN0aXZhdGUgPSBmdW5jdGlvbigpIHtcblx0XHRcdFx0c2VsZi5jbG9zZSgpO1xuXHRcdFx0XHRzZWxmLnNldFRleHRib3hWYWx1ZSgnJyk7XG5cdFx0XHRcdHNlbGYuc2V0QWN0aXZlSXRlbShudWxsKTtcblx0XHRcdFx0c2VsZi5zZXRBY3RpdmVPcHRpb24obnVsbCk7XG5cdFx0XHRcdHNlbGYuc2V0Q2FyZXQoc2VsZi5pdGVtcy5sZW5ndGgpO1xuXHRcdFx0XHRzZWxmLnJlZnJlc2hTdGF0ZSgpO1xuXHRcblx0XHRcdFx0Ly8gSUUxMSBidWc6IGVsZW1lbnQgc3RpbGwgbWFya2VkIGFzIGFjdGl2ZVxuXHRcdFx0XHRkZXN0ICYmIGRlc3QuZm9jdXMgJiYgZGVzdC5mb2N1cygpO1xuXHRcblx0XHRcdFx0c2VsZi5pZ25vcmVGb2N1cyA9IGZhbHNlO1xuXHRcdFx0XHRzZWxmLnRyaWdnZXIoJ2JsdXInKTtcblx0XHRcdH07XG5cdFxuXHRcdFx0c2VsZi5pZ25vcmVGb2N1cyA9IHRydWU7XG5cdFx0XHRpZiAoc2VsZi5zZXR0aW5ncy5jcmVhdGUgJiYgc2VsZi5zZXR0aW5ncy5jcmVhdGVPbkJsdXIpIHtcblx0XHRcdFx0c2VsZi5jcmVhdGVJdGVtKG51bGwsIGZhbHNlLCBkZWFjdGl2YXRlKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGRlYWN0aXZhdGUoKTtcblx0XHRcdH1cblx0XHR9LFxuXHRcblx0XHQvKipcblx0XHQgKiBUcmlnZ2VyZWQgd2hlbiB0aGUgdXNlciByb2xscyBvdmVyXG5cdFx0ICogYW4gb3B0aW9uIGluIHRoZSBhdXRvY29tcGxldGUgZHJvcGRvd24gbWVudS5cblx0XHQgKlxuXHRcdCAqIEBwYXJhbSB7b2JqZWN0fSBlXG5cdFx0ICogQHJldHVybnMge2Jvb2xlYW59XG5cdFx0ICovXG5cdFx0b25PcHRpb25Ib3ZlcjogZnVuY3Rpb24oZSkge1xuXHRcdFx0aWYgKHRoaXMuaWdub3JlSG92ZXIpIHJldHVybjtcblx0XHRcdHRoaXMuc2V0QWN0aXZlT3B0aW9uKGUuY3VycmVudFRhcmdldCwgZmFsc2UpO1xuXHRcdH0sXG5cdFxuXHRcdC8qKlxuXHRcdCAqIFRyaWdnZXJlZCB3aGVuIHRoZSB1c2VyIGNsaWNrcyBvbiBhbiBvcHRpb25cblx0XHQgKiBpbiB0aGUgYXV0b2NvbXBsZXRlIGRyb3Bkb3duIG1lbnUuXG5cdFx0ICpcblx0XHQgKiBAcGFyYW0ge29iamVjdH0gZVxuXHRcdCAqIEByZXR1cm5zIHtib29sZWFufVxuXHRcdCAqL1xuXHRcdG9uT3B0aW9uU2VsZWN0OiBmdW5jdGlvbihlKSB7XG5cdFx0XHR2YXIgdmFsdWUsICR0YXJnZXQsICRvcHRpb24sIHNlbGYgPSB0aGlzO1xuXHRcblx0XHRcdGlmIChlLnByZXZlbnREZWZhdWx0KSB7XG5cdFx0XHRcdGUucHJldmVudERlZmF1bHQoKTtcblx0XHRcdFx0ZS5zdG9wUHJvcGFnYXRpb24oKTtcblx0XHRcdH1cblx0XG5cdFx0XHQkdGFyZ2V0ID0gJChlLmN1cnJlbnRUYXJnZXQpO1xuXHRcdFx0aWYgKCR0YXJnZXQuaGFzQ2xhc3MoJ2NyZWF0ZScpKSB7XG5cdFx0XHRcdHNlbGYuY3JlYXRlSXRlbShudWxsLCBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRpZiAoc2VsZi5zZXR0aW5ncy5jbG9zZUFmdGVyU2VsZWN0KSB7XG5cdFx0XHRcdFx0XHRzZWxmLmNsb3NlKCk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9KTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHZhbHVlID0gJHRhcmdldC5hdHRyKCdkYXRhLXZhbHVlJyk7XG5cdFx0XHRcdGlmICh0eXBlb2YgdmFsdWUgIT09ICd1bmRlZmluZWQnKSB7XG5cdFx0XHRcdFx0c2VsZi5sYXN0UXVlcnkgPSBudWxsO1xuXHRcdFx0XHRcdHNlbGYuc2V0VGV4dGJveFZhbHVlKCcnKTtcblx0XHRcdFx0XHRzZWxmLmFkZEl0ZW0odmFsdWUpO1xuXHRcdFx0XHRcdGlmIChzZWxmLnNldHRpbmdzLmNsb3NlQWZ0ZXJTZWxlY3QpIHtcblx0XHRcdFx0XHRcdHNlbGYuY2xvc2UoKTtcblx0XHRcdFx0XHR9IGVsc2UgaWYgKCFzZWxmLnNldHRpbmdzLmhpZGVTZWxlY3RlZCAmJiBlLnR5cGUgJiYgL21vdXNlLy50ZXN0KGUudHlwZSkpIHtcblx0XHRcdFx0XHRcdHNlbGYuc2V0QWN0aXZlT3B0aW9uKHNlbGYuZ2V0T3B0aW9uKHZhbHVlKSk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSxcblx0XG5cdFx0LyoqXG5cdFx0ICogVHJpZ2dlcmVkIHdoZW4gdGhlIHVzZXIgY2xpY2tzIG9uIGFuIGl0ZW1cblx0XHQgKiB0aGF0IGhhcyBiZWVuIHNlbGVjdGVkLlxuXHRcdCAqXG5cdFx0ICogQHBhcmFtIHtvYmplY3R9IGVcblx0XHQgKiBAcmV0dXJucyB7Ym9vbGVhbn1cblx0XHQgKi9cblx0XHRvbkl0ZW1TZWxlY3Q6IGZ1bmN0aW9uKGUpIHtcblx0XHRcdHZhciBzZWxmID0gdGhpcztcblx0XG5cdFx0XHRpZiAoc2VsZi5pc0xvY2tlZCkgcmV0dXJuO1xuXHRcdFx0aWYgKHNlbGYuc2V0dGluZ3MubW9kZSA9PT0gJ211bHRpJykge1xuXHRcdFx0XHRlLnByZXZlbnREZWZhdWx0KCk7XG5cdFx0XHRcdHNlbGYuc2V0QWN0aXZlSXRlbShlLmN1cnJlbnRUYXJnZXQsIGUpO1xuXHRcdFx0fVxuXHRcdH0sXG5cdFxuXHRcdC8qKlxuXHRcdCAqIEludm9rZXMgdGhlIHByb3ZpZGVkIG1ldGhvZCB0aGF0IHByb3ZpZGVzXG5cdFx0ICogcmVzdWx0cyB0byBhIGNhbGxiYWNrLS0td2hpY2ggYXJlIHRoZW4gYWRkZWRcblx0XHQgKiBhcyBvcHRpb25zIHRvIHRoZSBjb250cm9sLlxuXHRcdCAqXG5cdFx0ICogQHBhcmFtIHtmdW5jdGlvbn0gZm5cblx0XHQgKi9cblx0XHRsb2FkOiBmdW5jdGlvbihmbikge1xuXHRcdFx0dmFyIHNlbGYgPSB0aGlzO1xuXHRcdFx0dmFyICR3cmFwcGVyID0gc2VsZi4kd3JhcHBlci5hZGRDbGFzcyhzZWxmLnNldHRpbmdzLmxvYWRpbmdDbGFzcyk7XG5cdFxuXHRcdFx0c2VsZi5sb2FkaW5nKys7XG5cdFx0XHRmbi5hcHBseShzZWxmLCBbZnVuY3Rpb24ocmVzdWx0cykge1xuXHRcdFx0XHRzZWxmLmxvYWRpbmcgPSBNYXRoLm1heChzZWxmLmxvYWRpbmcgLSAxLCAwKTtcblx0XHRcdFx0aWYgKHJlc3VsdHMgJiYgcmVzdWx0cy5sZW5ndGgpIHtcblx0XHRcdFx0XHRzZWxmLmFkZE9wdGlvbihyZXN1bHRzKTtcblx0XHRcdFx0XHRzZWxmLnJlZnJlc2hPcHRpb25zKHNlbGYuaXNGb2N1c2VkICYmICFzZWxmLmlzSW5wdXRIaWRkZW4pO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGlmICghc2VsZi5sb2FkaW5nKSB7XG5cdFx0XHRcdFx0JHdyYXBwZXIucmVtb3ZlQ2xhc3Moc2VsZi5zZXR0aW5ncy5sb2FkaW5nQ2xhc3MpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHNlbGYudHJpZ2dlcignbG9hZCcsIHJlc3VsdHMpO1xuXHRcdFx0fV0pO1xuXHRcdH0sXG5cdFxuXHRcdC8qKlxuXHRcdCAqIFNldHMgdGhlIGlucHV0IGZpZWxkIG9mIHRoZSBjb250cm9sIHRvIHRoZSBzcGVjaWZpZWQgdmFsdWUuXG5cdFx0ICpcblx0XHQgKiBAcGFyYW0ge3N0cmluZ30gdmFsdWVcblx0XHQgKi9cblx0XHRzZXRUZXh0Ym94VmFsdWU6IGZ1bmN0aW9uKHZhbHVlKSB7XG5cdFx0XHR2YXIgJGlucHV0ID0gdGhpcy4kY29udHJvbF9pbnB1dDtcblx0XHRcdHZhciBjaGFuZ2VkID0gJGlucHV0LnZhbCgpICE9PSB2YWx1ZTtcblx0XHRcdGlmIChjaGFuZ2VkKSB7XG5cdFx0XHRcdCRpbnB1dC52YWwodmFsdWUpLnRyaWdnZXJIYW5kbGVyKCd1cGRhdGUnKTtcblx0XHRcdFx0dGhpcy5sYXN0VmFsdWUgPSB2YWx1ZTtcblx0XHRcdH1cblx0XHR9LFxuXHRcblx0XHQvKipcblx0XHQgKiBSZXR1cm5zIHRoZSB2YWx1ZSBvZiB0aGUgY29udHJvbC4gSWYgbXVsdGlwbGUgaXRlbXNcblx0XHQgKiBjYW4gYmUgc2VsZWN0ZWQgKGUuZy4gPHNlbGVjdCBtdWx0aXBsZT4pLCB0aGlzIHJldHVybnNcblx0XHQgKiBhbiBhcnJheS4gSWYgb25seSBvbmUgaXRlbSBjYW4gYmUgc2VsZWN0ZWQsIHRoaXNcblx0XHQgKiByZXR1cm5zIGEgc3RyaW5nLlxuXHRcdCAqXG5cdFx0ICogQHJldHVybnMge21peGVkfVxuXHRcdCAqL1xuXHRcdGdldFZhbHVlOiBmdW5jdGlvbigpIHtcblx0XHRcdGlmICh0aGlzLnRhZ1R5cGUgPT09IFRBR19TRUxFQ1QgJiYgdGhpcy4kaW5wdXQuYXR0cignbXVsdGlwbGUnKSkge1xuXHRcdFx0XHRyZXR1cm4gdGhpcy5pdGVtcztcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHJldHVybiB0aGlzLml0ZW1zLmpvaW4odGhpcy5zZXR0aW5ncy5kZWxpbWl0ZXIpO1xuXHRcdFx0fVxuXHRcdH0sXG5cdFxuXHRcdC8qKlxuXHRcdCAqIFJlc2V0cyB0aGUgc2VsZWN0ZWQgaXRlbXMgdG8gdGhlIGdpdmVuIHZhbHVlLlxuXHRcdCAqXG5cdFx0ICogQHBhcmFtIHttaXhlZH0gdmFsdWVcblx0XHQgKi9cblx0XHRzZXRWYWx1ZTogZnVuY3Rpb24odmFsdWUsIHNpbGVudCkge1xuXHRcdFx0dmFyIGV2ZW50cyA9IHNpbGVudCA/IFtdIDogWydjaGFuZ2UnXTtcblx0XG5cdFx0XHRkZWJvdW5jZV9ldmVudHModGhpcywgZXZlbnRzLCBmdW5jdGlvbigpIHtcblx0XHRcdFx0dGhpcy5jbGVhcihzaWxlbnQpO1xuXHRcdFx0XHR0aGlzLmFkZEl0ZW1zKHZhbHVlLCBzaWxlbnQpO1xuXHRcdFx0fSk7XG5cdFx0fSxcblx0XG5cdFx0LyoqXG5cdFx0ICogU2V0cyB0aGUgc2VsZWN0ZWQgaXRlbS5cblx0XHQgKlxuXHRcdCAqIEBwYXJhbSB7b2JqZWN0fSAkaXRlbVxuXHRcdCAqIEBwYXJhbSB7b2JqZWN0fSBlIChvcHRpb25hbClcblx0XHQgKi9cblx0XHRzZXRBY3RpdmVJdGVtOiBmdW5jdGlvbigkaXRlbSwgZSkge1xuXHRcdFx0dmFyIHNlbGYgPSB0aGlzO1xuXHRcdFx0dmFyIGV2ZW50TmFtZTtcblx0XHRcdHZhciBpLCBpZHgsIGJlZ2luLCBlbmQsIGl0ZW0sIHN3YXA7XG5cdFx0XHR2YXIgJGxhc3Q7XG5cdFxuXHRcdFx0aWYgKHNlbGYuc2V0dGluZ3MubW9kZSA9PT0gJ3NpbmdsZScpIHJldHVybjtcblx0XHRcdCRpdGVtID0gJCgkaXRlbSk7XG5cdFxuXHRcdFx0Ly8gY2xlYXIgdGhlIGFjdGl2ZSBzZWxlY3Rpb25cblx0XHRcdGlmICghJGl0ZW0ubGVuZ3RoKSB7XG5cdFx0XHRcdCQoc2VsZi4kYWN0aXZlSXRlbXMpLnJlbW92ZUNsYXNzKCdhY3RpdmUnKTtcblx0XHRcdFx0c2VsZi4kYWN0aXZlSXRlbXMgPSBbXTtcblx0XHRcdFx0aWYgKHNlbGYuaXNGb2N1c2VkKSB7XG5cdFx0XHRcdFx0c2VsZi5zaG93SW5wdXQoKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cdFxuXHRcdFx0Ly8gbW9kaWZ5IHNlbGVjdGlvblxuXHRcdFx0ZXZlbnROYW1lID0gZSAmJiBlLnR5cGUudG9Mb3dlckNhc2UoKTtcblx0XG5cdFx0XHRpZiAoZXZlbnROYW1lID09PSAnbW91c2Vkb3duJyAmJiBzZWxmLmlzU2hpZnREb3duICYmIHNlbGYuJGFjdGl2ZUl0ZW1zLmxlbmd0aCkge1xuXHRcdFx0XHQkbGFzdCA9IHNlbGYuJGNvbnRyb2wuY2hpbGRyZW4oJy5hY3RpdmU6bGFzdCcpO1xuXHRcdFx0XHRiZWdpbiA9IEFycmF5LnByb3RvdHlwZS5pbmRleE9mLmFwcGx5KHNlbGYuJGNvbnRyb2xbMF0uY2hpbGROb2RlcywgWyRsYXN0WzBdXSk7XG5cdFx0XHRcdGVuZCAgID0gQXJyYXkucHJvdG90eXBlLmluZGV4T2YuYXBwbHkoc2VsZi4kY29udHJvbFswXS5jaGlsZE5vZGVzLCBbJGl0ZW1bMF1dKTtcblx0XHRcdFx0aWYgKGJlZ2luID4gZW5kKSB7XG5cdFx0XHRcdFx0c3dhcCAgPSBiZWdpbjtcblx0XHRcdFx0XHRiZWdpbiA9IGVuZDtcblx0XHRcdFx0XHRlbmQgICA9IHN3YXA7XG5cdFx0XHRcdH1cblx0XHRcdFx0Zm9yIChpID0gYmVnaW47IGkgPD0gZW5kOyBpKyspIHtcblx0XHRcdFx0XHRpdGVtID0gc2VsZi4kY29udHJvbFswXS5jaGlsZE5vZGVzW2ldO1xuXHRcdFx0XHRcdGlmIChzZWxmLiRhY3RpdmVJdGVtcy5pbmRleE9mKGl0ZW0pID09PSAtMSkge1xuXHRcdFx0XHRcdFx0JChpdGVtKS5hZGRDbGFzcygnYWN0aXZlJyk7XG5cdFx0XHRcdFx0XHRzZWxmLiRhY3RpdmVJdGVtcy5wdXNoKGl0ZW0pO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0XHRlLnByZXZlbnREZWZhdWx0KCk7XG5cdFx0XHR9IGVsc2UgaWYgKChldmVudE5hbWUgPT09ICdtb3VzZWRvd24nICYmIHNlbGYuaXNDdHJsRG93bikgfHwgKGV2ZW50TmFtZSA9PT0gJ2tleWRvd24nICYmIHRoaXMuaXNTaGlmdERvd24pKSB7XG5cdFx0XHRcdGlmICgkaXRlbS5oYXNDbGFzcygnYWN0aXZlJykpIHtcblx0XHRcdFx0XHRpZHggPSBzZWxmLiRhY3RpdmVJdGVtcy5pbmRleE9mKCRpdGVtWzBdKTtcblx0XHRcdFx0XHRzZWxmLiRhY3RpdmVJdGVtcy5zcGxpY2UoaWR4LCAxKTtcblx0XHRcdFx0XHQkaXRlbS5yZW1vdmVDbGFzcygnYWN0aXZlJyk7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0c2VsZi4kYWN0aXZlSXRlbXMucHVzaCgkaXRlbS5hZGRDbGFzcygnYWN0aXZlJylbMF0pO1xuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHQkKHNlbGYuJGFjdGl2ZUl0ZW1zKS5yZW1vdmVDbGFzcygnYWN0aXZlJyk7XG5cdFx0XHRcdHNlbGYuJGFjdGl2ZUl0ZW1zID0gWyRpdGVtLmFkZENsYXNzKCdhY3RpdmUnKVswXV07XG5cdFx0XHR9XG5cdFxuXHRcdFx0Ly8gZW5zdXJlIGNvbnRyb2wgaGFzIGZvY3VzXG5cdFx0XHRzZWxmLmhpZGVJbnB1dCgpO1xuXHRcdFx0aWYgKCF0aGlzLmlzRm9jdXNlZCkge1xuXHRcdFx0XHRzZWxmLmZvY3VzKCk7XG5cdFx0XHR9XG5cdFx0fSxcblx0XG5cdFx0LyoqXG5cdFx0ICogU2V0cyB0aGUgc2VsZWN0ZWQgaXRlbSBpbiB0aGUgZHJvcGRvd24gbWVudVxuXHRcdCAqIG9mIGF2YWlsYWJsZSBvcHRpb25zLlxuXHRcdCAqXG5cdFx0ICogQHBhcmFtIHtvYmplY3R9ICRvYmplY3Rcblx0XHQgKiBAcGFyYW0ge2Jvb2xlYW59IHNjcm9sbFxuXHRcdCAqIEBwYXJhbSB7Ym9vbGVhbn0gYW5pbWF0ZVxuXHRcdCAqL1xuXHRcdHNldEFjdGl2ZU9wdGlvbjogZnVuY3Rpb24oJG9wdGlvbiwgc2Nyb2xsLCBhbmltYXRlKSB7XG5cdFx0XHR2YXIgaGVpZ2h0X21lbnUsIGhlaWdodF9pdGVtLCB5O1xuXHRcdFx0dmFyIHNjcm9sbF90b3AsIHNjcm9sbF9ib3R0b207XG5cdFx0XHR2YXIgc2VsZiA9IHRoaXM7XG5cdFxuXHRcdFx0aWYgKHNlbGYuJGFjdGl2ZU9wdGlvbikgc2VsZi4kYWN0aXZlT3B0aW9uLnJlbW92ZUNsYXNzKCdhY3RpdmUnKTtcblx0XHRcdHNlbGYuJGFjdGl2ZU9wdGlvbiA9IG51bGw7XG5cdFxuXHRcdFx0JG9wdGlvbiA9ICQoJG9wdGlvbik7XG5cdFx0XHRpZiAoISRvcHRpb24ubGVuZ3RoKSByZXR1cm47XG5cdFxuXHRcdFx0c2VsZi4kYWN0aXZlT3B0aW9uID0gJG9wdGlvbi5hZGRDbGFzcygnYWN0aXZlJyk7XG5cdFxuXHRcdFx0aWYgKHNjcm9sbCB8fCAhaXNzZXQoc2Nyb2xsKSkge1xuXHRcblx0XHRcdFx0aGVpZ2h0X21lbnUgICA9IHNlbGYuJGRyb3Bkb3duX2NvbnRlbnQuaGVpZ2h0KCk7XG5cdFx0XHRcdGhlaWdodF9pdGVtICAgPSBzZWxmLiRhY3RpdmVPcHRpb24ub3V0ZXJIZWlnaHQodHJ1ZSk7XG5cdFx0XHRcdHNjcm9sbCAgICAgICAgPSBzZWxmLiRkcm9wZG93bl9jb250ZW50LnNjcm9sbFRvcCgpIHx8IDA7XG5cdFx0XHRcdHkgICAgICAgICAgICAgPSBzZWxmLiRhY3RpdmVPcHRpb24ub2Zmc2V0KCkudG9wIC0gc2VsZi4kZHJvcGRvd25fY29udGVudC5vZmZzZXQoKS50b3AgKyBzY3JvbGw7XG5cdFx0XHRcdHNjcm9sbF90b3AgICAgPSB5O1xuXHRcdFx0XHRzY3JvbGxfYm90dG9tID0geSAtIGhlaWdodF9tZW51ICsgaGVpZ2h0X2l0ZW07XG5cdFxuXHRcdFx0XHRpZiAoeSArIGhlaWdodF9pdGVtID4gaGVpZ2h0X21lbnUgKyBzY3JvbGwpIHtcblx0XHRcdFx0XHRzZWxmLiRkcm9wZG93bl9jb250ZW50LnN0b3AoKS5hbmltYXRlKHtzY3JvbGxUb3A6IHNjcm9sbF9ib3R0b219LCBhbmltYXRlID8gc2VsZi5zZXR0aW5ncy5zY3JvbGxEdXJhdGlvbiA6IDApO1xuXHRcdFx0XHR9IGVsc2UgaWYgKHkgPCBzY3JvbGwpIHtcblx0XHRcdFx0XHRzZWxmLiRkcm9wZG93bl9jb250ZW50LnN0b3AoKS5hbmltYXRlKHtzY3JvbGxUb3A6IHNjcm9sbF90b3B9LCBhbmltYXRlID8gc2VsZi5zZXR0aW5ncy5zY3JvbGxEdXJhdGlvbiA6IDApO1xuXHRcdFx0XHR9XG5cdFxuXHRcdFx0fVxuXHRcdH0sXG5cdFxuXHRcdC8qKlxuXHRcdCAqIFNlbGVjdHMgYWxsIGl0ZW1zIChDVFJMICsgQSkuXG5cdFx0ICovXG5cdFx0c2VsZWN0QWxsOiBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBzZWxmID0gdGhpcztcblx0XHRcdGlmIChzZWxmLnNldHRpbmdzLm1vZGUgPT09ICdzaW5nbGUnKSByZXR1cm47XG5cdFxuXHRcdFx0c2VsZi4kYWN0aXZlSXRlbXMgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuYXBwbHkoc2VsZi4kY29udHJvbC5jaGlsZHJlbignOm5vdChpbnB1dCknKS5hZGRDbGFzcygnYWN0aXZlJykpO1xuXHRcdFx0aWYgKHNlbGYuJGFjdGl2ZUl0ZW1zLmxlbmd0aCkge1xuXHRcdFx0XHRzZWxmLmhpZGVJbnB1dCgpO1xuXHRcdFx0XHRzZWxmLmNsb3NlKCk7XG5cdFx0XHR9XG5cdFx0XHRzZWxmLmZvY3VzKCk7XG5cdFx0fSxcblx0XG5cdFx0LyoqXG5cdFx0ICogSGlkZXMgdGhlIGlucHV0IGVsZW1lbnQgb3V0IG9mIHZpZXcsIHdoaWxlXG5cdFx0ICogcmV0YWluaW5nIGl0cyBmb2N1cy5cblx0XHQgKi9cblx0XHRoaWRlSW5wdXQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIHNlbGYgPSB0aGlzO1xuXHRcblx0XHRcdHNlbGYuc2V0VGV4dGJveFZhbHVlKCcnKTtcblx0XHRcdHNlbGYuJGNvbnRyb2xfaW5wdXQuY3NzKHtvcGFjaXR5OiAwLCBwb3NpdGlvbjogJ2Fic29sdXRlJywgbGVmdDogc2VsZi5ydGwgPyAxMDAwMCA6IC0xMDAwMH0pO1xuXHRcdFx0c2VsZi5pc0lucHV0SGlkZGVuID0gdHJ1ZTtcblx0XHR9LFxuXHRcblx0XHQvKipcblx0XHQgKiBSZXN0b3JlcyBpbnB1dCB2aXNpYmlsaXR5LlxuXHRcdCAqL1xuXHRcdHNob3dJbnB1dDogZnVuY3Rpb24oKSB7XG5cdFx0XHR0aGlzLiRjb250cm9sX2lucHV0LmNzcyh7b3BhY2l0eTogMSwgcG9zaXRpb246ICdyZWxhdGl2ZScsIGxlZnQ6IDB9KTtcblx0XHRcdHRoaXMuaXNJbnB1dEhpZGRlbiA9IGZhbHNlO1xuXHRcdH0sXG5cdFxuXHRcdC8qKlxuXHRcdCAqIEdpdmVzIHRoZSBjb250cm9sIGZvY3VzLlxuXHRcdCAqL1xuXHRcdGZvY3VzOiBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBzZWxmID0gdGhpcztcblx0XHRcdGlmIChzZWxmLmlzRGlzYWJsZWQpIHJldHVybjtcblx0XG5cdFx0XHRzZWxmLmlnbm9yZUZvY3VzID0gdHJ1ZTtcblx0XHRcdHNlbGYuJGNvbnRyb2xfaW5wdXRbMF0uZm9jdXMoKTtcblx0XHRcdHdpbmRvdy5zZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRzZWxmLmlnbm9yZUZvY3VzID0gZmFsc2U7XG5cdFx0XHRcdHNlbGYub25Gb2N1cygpO1xuXHRcdFx0fSwgMCk7XG5cdFx0fSxcblx0XG5cdFx0LyoqXG5cdFx0ICogRm9yY2VzIHRoZSBjb250cm9sIG91dCBvZiBmb2N1cy5cblx0XHQgKlxuXHRcdCAqIEBwYXJhbSB7RWxlbWVudH0gZGVzdFxuXHRcdCAqL1xuXHRcdGJsdXI6IGZ1bmN0aW9uKGRlc3QpIHtcblx0XHRcdHRoaXMuJGNvbnRyb2xfaW5wdXRbMF0uYmx1cigpO1xuXHRcdFx0dGhpcy5vbkJsdXIobnVsbCwgZGVzdCk7XG5cdFx0fSxcblx0XG5cdFx0LyoqXG5cdFx0ICogUmV0dXJucyBhIGZ1bmN0aW9uIHRoYXQgc2NvcmVzIGFuIG9iamVjdFxuXHRcdCAqIHRvIHNob3cgaG93IGdvb2Qgb2YgYSBtYXRjaCBpdCBpcyB0byB0aGVcblx0XHQgKiBwcm92aWRlZCBxdWVyeS5cblx0XHQgKlxuXHRcdCAqIEBwYXJhbSB7c3RyaW5nfSBxdWVyeVxuXHRcdCAqIEBwYXJhbSB7b2JqZWN0fSBvcHRpb25zXG5cdFx0ICogQHJldHVybiB7ZnVuY3Rpb259XG5cdFx0ICovXG5cdFx0Z2V0U2NvcmVGdW5jdGlvbjogZnVuY3Rpb24ocXVlcnkpIHtcblx0XHRcdHJldHVybiB0aGlzLnNpZnRlci5nZXRTY29yZUZ1bmN0aW9uKHF1ZXJ5LCB0aGlzLmdldFNlYXJjaE9wdGlvbnMoKSk7XG5cdFx0fSxcblx0XG5cdFx0LyoqXG5cdFx0ICogUmV0dXJucyBzZWFyY2ggb3B0aW9ucyBmb3Igc2lmdGVyICh0aGUgc3lzdGVtXG5cdFx0ICogZm9yIHNjb3JpbmcgYW5kIHNvcnRpbmcgcmVzdWx0cykuXG5cdFx0ICpcblx0XHQgKiBAc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9icmlhbnJlYXZpcy9zaWZ0ZXIuanNcblx0XHQgKiBAcmV0dXJuIHtvYmplY3R9XG5cdFx0ICovXG5cdFx0Z2V0U2VhcmNoT3B0aW9uczogZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgc2V0dGluZ3MgPSB0aGlzLnNldHRpbmdzO1xuXHRcdFx0dmFyIHNvcnQgPSBzZXR0aW5ncy5zb3J0RmllbGQ7XG5cdFx0XHRpZiAodHlwZW9mIHNvcnQgPT09ICdzdHJpbmcnKSB7XG5cdFx0XHRcdHNvcnQgPSBbe2ZpZWxkOiBzb3J0fV07XG5cdFx0XHR9XG5cdFxuXHRcdFx0cmV0dXJuIHtcblx0XHRcdFx0ZmllbGRzICAgICAgOiBzZXR0aW5ncy5zZWFyY2hGaWVsZCxcblx0XHRcdFx0Y29uanVuY3Rpb24gOiBzZXR0aW5ncy5zZWFyY2hDb25qdW5jdGlvbixcblx0XHRcdFx0c29ydCAgICAgICAgOiBzb3J0XG5cdFx0XHR9O1xuXHRcdH0sXG5cdFxuXHRcdC8qKlxuXHRcdCAqIFNlYXJjaGVzIHRocm91Z2ggYXZhaWxhYmxlIG9wdGlvbnMgYW5kIHJldHVybnNcblx0XHQgKiBhIHNvcnRlZCBhcnJheSBvZiBtYXRjaGVzLlxuXHRcdCAqXG5cdFx0ICogUmV0dXJucyBhbiBvYmplY3QgY29udGFpbmluZzpcblx0XHQgKlxuXHRcdCAqICAgLSBxdWVyeSB7c3RyaW5nfVxuXHRcdCAqICAgLSB0b2tlbnMge2FycmF5fVxuXHRcdCAqICAgLSB0b3RhbCB7aW50fVxuXHRcdCAqICAgLSBpdGVtcyB7YXJyYXl9XG5cdFx0ICpcblx0XHQgKiBAcGFyYW0ge3N0cmluZ30gcXVlcnlcblx0XHQgKiBAcmV0dXJucyB7b2JqZWN0fVxuXHRcdCAqL1xuXHRcdHNlYXJjaDogZnVuY3Rpb24ocXVlcnkpIHtcblx0XHRcdHZhciBpLCB2YWx1ZSwgc2NvcmUsIHJlc3VsdCwgY2FsY3VsYXRlU2NvcmU7XG5cdFx0XHR2YXIgc2VsZiAgICAgPSB0aGlzO1xuXHRcdFx0dmFyIHNldHRpbmdzID0gc2VsZi5zZXR0aW5ncztcblx0XHRcdHZhciBvcHRpb25zICA9IHRoaXMuZ2V0U2VhcmNoT3B0aW9ucygpO1xuXHRcblx0XHRcdC8vIHZhbGlkYXRlIHVzZXItcHJvdmlkZWQgcmVzdWx0IHNjb3JpbmcgZnVuY3Rpb25cblx0XHRcdGlmIChzZXR0aW5ncy5zY29yZSkge1xuXHRcdFx0XHRjYWxjdWxhdGVTY29yZSA9IHNlbGYuc2V0dGluZ3Muc2NvcmUuYXBwbHkodGhpcywgW3F1ZXJ5XSk7XG5cdFx0XHRcdGlmICh0eXBlb2YgY2FsY3VsYXRlU2NvcmUgIT09ICdmdW5jdGlvbicpIHtcblx0XHRcdFx0XHR0aHJvdyBuZXcgRXJyb3IoJ1NlbGVjdGl6ZSBcInNjb3JlXCIgc2V0dGluZyBtdXN0IGJlIGEgZnVuY3Rpb24gdGhhdCByZXR1cm5zIGEgZnVuY3Rpb24nKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcblx0XHRcdC8vIHBlcmZvcm0gc2VhcmNoXG5cdFx0XHRpZiAocXVlcnkgIT09IHNlbGYubGFzdFF1ZXJ5KSB7XG5cdFx0XHRcdHNlbGYubGFzdFF1ZXJ5ID0gcXVlcnk7XG5cdFx0XHRcdHJlc3VsdCA9IHNlbGYuc2lmdGVyLnNlYXJjaChxdWVyeSwgJC5leHRlbmQob3B0aW9ucywge3Njb3JlOiBjYWxjdWxhdGVTY29yZX0pKTtcblx0XHRcdFx0c2VsZi5jdXJyZW50UmVzdWx0cyA9IHJlc3VsdDtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHJlc3VsdCA9ICQuZXh0ZW5kKHRydWUsIHt9LCBzZWxmLmN1cnJlbnRSZXN1bHRzKTtcblx0XHRcdH1cblx0XG5cdFx0XHQvLyBmaWx0ZXIgb3V0IHNlbGVjdGVkIGl0ZW1zXG5cdFx0XHRpZiAoc2V0dGluZ3MuaGlkZVNlbGVjdGVkKSB7XG5cdFx0XHRcdGZvciAoaSA9IHJlc3VsdC5pdGVtcy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuXHRcdFx0XHRcdGlmIChzZWxmLml0ZW1zLmluZGV4T2YoaGFzaF9rZXkocmVzdWx0Lml0ZW1zW2ldLmlkKSkgIT09IC0xKSB7XG5cdFx0XHRcdFx0XHRyZXN1bHQuaXRlbXMuc3BsaWNlKGksIDEpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcblx0XHRcdHJldHVybiByZXN1bHQ7XG5cdFx0fSxcblx0XG5cdFx0LyoqXG5cdFx0ICogUmVmcmVzaGVzIHRoZSBsaXN0IG9mIGF2YWlsYWJsZSBvcHRpb25zIHNob3duXG5cdFx0ICogaW4gdGhlIGF1dG9jb21wbGV0ZSBkcm9wZG93biBtZW51LlxuXHRcdCAqXG5cdFx0ICogQHBhcmFtIHtib29sZWFufSB0cmlnZ2VyRHJvcGRvd25cblx0XHQgKi9cblx0XHRyZWZyZXNoT3B0aW9uczogZnVuY3Rpb24odHJpZ2dlckRyb3Bkb3duKSB7XG5cdFx0XHR2YXIgaSwgaiwgaywgbiwgZ3JvdXBzLCBncm91cHNfb3JkZXIsIG9wdGlvbiwgb3B0aW9uX2h0bWwsIG9wdGdyb3VwLCBvcHRncm91cHMsIGh0bWwsIGh0bWxfY2hpbGRyZW4sIGhhc19jcmVhdGVfb3B0aW9uO1xuXHRcdFx0dmFyICRhY3RpdmUsICRhY3RpdmVfYmVmb3JlLCAkY3JlYXRlO1xuXHRcblx0XHRcdGlmICh0eXBlb2YgdHJpZ2dlckRyb3Bkb3duID09PSAndW5kZWZpbmVkJykge1xuXHRcdFx0XHR0cmlnZ2VyRHJvcGRvd24gPSB0cnVlO1xuXHRcdFx0fVxuXHRcblx0XHRcdHZhciBzZWxmICAgICAgICAgICAgICA9IHRoaXM7XG5cdFx0XHR2YXIgcXVlcnkgICAgICAgICAgICAgPSAkLnRyaW0oc2VsZi4kY29udHJvbF9pbnB1dC52YWwoKSk7XG5cdFx0XHR2YXIgcmVzdWx0cyAgICAgICAgICAgPSBzZWxmLnNlYXJjaChxdWVyeSk7XG5cdFx0XHR2YXIgJGRyb3Bkb3duX2NvbnRlbnQgPSBzZWxmLiRkcm9wZG93bl9jb250ZW50O1xuXHRcdFx0dmFyIGFjdGl2ZV9iZWZvcmUgICAgID0gc2VsZi4kYWN0aXZlT3B0aW9uICYmIGhhc2hfa2V5KHNlbGYuJGFjdGl2ZU9wdGlvbi5hdHRyKCdkYXRhLXZhbHVlJykpO1xuXHRcblx0XHRcdC8vIGJ1aWxkIG1hcmt1cFxuXHRcdFx0biA9IHJlc3VsdHMuaXRlbXMubGVuZ3RoO1xuXHRcdFx0aWYgKHR5cGVvZiBzZWxmLnNldHRpbmdzLm1heE9wdGlvbnMgPT09ICdudW1iZXInKSB7XG5cdFx0XHRcdG4gPSBNYXRoLm1pbihuLCBzZWxmLnNldHRpbmdzLm1heE9wdGlvbnMpO1xuXHRcdFx0fVxuXHRcblx0XHRcdC8vIHJlbmRlciBhbmQgZ3JvdXAgYXZhaWxhYmxlIG9wdGlvbnMgaW5kaXZpZHVhbGx5XG5cdFx0XHRncm91cHMgPSB7fTtcblx0XHRcdGdyb3Vwc19vcmRlciA9IFtdO1xuXHRcblx0XHRcdGZvciAoaSA9IDA7IGkgPCBuOyBpKyspIHtcblx0XHRcdFx0b3B0aW9uICAgICAgPSBzZWxmLm9wdGlvbnNbcmVzdWx0cy5pdGVtc1tpXS5pZF07XG5cdFx0XHRcdG9wdGlvbl9odG1sID0gc2VsZi5yZW5kZXIoJ29wdGlvbicsIG9wdGlvbik7XG5cdFx0XHRcdG9wdGdyb3VwICAgID0gb3B0aW9uW3NlbGYuc2V0dGluZ3Mub3B0Z3JvdXBGaWVsZF0gfHwgJyc7XG5cdFx0XHRcdG9wdGdyb3VwcyAgID0gJC5pc0FycmF5KG9wdGdyb3VwKSA/IG9wdGdyb3VwIDogW29wdGdyb3VwXTtcblx0XG5cdFx0XHRcdGZvciAoaiA9IDAsIGsgPSBvcHRncm91cHMgJiYgb3B0Z3JvdXBzLmxlbmd0aDsgaiA8IGs7IGorKykge1xuXHRcdFx0XHRcdG9wdGdyb3VwID0gb3B0Z3JvdXBzW2pdO1xuXHRcdFx0XHRcdGlmICghc2VsZi5vcHRncm91cHMuaGFzT3duUHJvcGVydHkob3B0Z3JvdXApKSB7XG5cdFx0XHRcdFx0XHRvcHRncm91cCA9ICcnO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRpZiAoIWdyb3Vwcy5oYXNPd25Qcm9wZXJ0eShvcHRncm91cCkpIHtcblx0XHRcdFx0XHRcdGdyb3Vwc1tvcHRncm91cF0gPSBkb2N1bWVudC5jcmVhdGVEb2N1bWVudEZyYWdtZW50KCk7XG5cdFx0XHRcdFx0XHRncm91cHNfb3JkZXIucHVzaChvcHRncm91cCk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGdyb3Vwc1tvcHRncm91cF0uYXBwZW5kQ2hpbGQob3B0aW9uX2h0bWwpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFxuXHRcdFx0Ly8gc29ydCBvcHRncm91cHNcblx0XHRcdGlmICh0aGlzLnNldHRpbmdzLmxvY2tPcHRncm91cE9yZGVyKSB7XG5cdFx0XHRcdGdyb3Vwc19vcmRlci5zb3J0KGZ1bmN0aW9uKGEsIGIpIHtcblx0XHRcdFx0XHR2YXIgYV9vcmRlciA9IHNlbGYub3B0Z3JvdXBzW2FdLiRvcmRlciB8fCAwO1xuXHRcdFx0XHRcdHZhciBiX29yZGVyID0gc2VsZi5vcHRncm91cHNbYl0uJG9yZGVyIHx8IDA7XG5cdFx0XHRcdFx0cmV0dXJuIGFfb3JkZXIgLSBiX29yZGVyO1xuXHRcdFx0XHR9KTtcblx0XHRcdH1cblx0XG5cdFx0XHQvLyByZW5kZXIgb3B0Z3JvdXAgaGVhZGVycyAmIGpvaW4gZ3JvdXBzXG5cdFx0XHRodG1sID0gZG9jdW1lbnQuY3JlYXRlRG9jdW1lbnRGcmFnbWVudCgpO1xuXHRcdFx0Zm9yIChpID0gMCwgbiA9IGdyb3Vwc19vcmRlci5sZW5ndGg7IGkgPCBuOyBpKyspIHtcblx0XHRcdFx0b3B0Z3JvdXAgPSBncm91cHNfb3JkZXJbaV07XG5cdFx0XHRcdGlmIChzZWxmLm9wdGdyb3Vwcy5oYXNPd25Qcm9wZXJ0eShvcHRncm91cCkgJiYgZ3JvdXBzW29wdGdyb3VwXS5jaGlsZE5vZGVzLmxlbmd0aCkge1xuXHRcdFx0XHRcdC8vIHJlbmRlciB0aGUgb3B0Z3JvdXAgaGVhZGVyIGFuZCBvcHRpb25zIHdpdGhpbiBpdCxcblx0XHRcdFx0XHQvLyB0aGVuIHBhc3MgaXQgdG8gdGhlIHdyYXBwZXIgdGVtcGxhdGVcblx0XHRcdFx0XHRodG1sX2NoaWxkcmVuID0gZG9jdW1lbnQuY3JlYXRlRG9jdW1lbnRGcmFnbWVudCgpO1xuXHRcdFx0XHRcdGh0bWxfY2hpbGRyZW4uYXBwZW5kQ2hpbGQoc2VsZi5yZW5kZXIoJ29wdGdyb3VwX2hlYWRlcicsIHNlbGYub3B0Z3JvdXBzW29wdGdyb3VwXSkpO1xuXHRcdFx0XHRcdGh0bWxfY2hpbGRyZW4uYXBwZW5kQ2hpbGQoZ3JvdXBzW29wdGdyb3VwXSk7XG5cdFxuXHRcdFx0XHRcdGh0bWwuYXBwZW5kQ2hpbGQoc2VsZi5yZW5kZXIoJ29wdGdyb3VwJywgJC5leHRlbmQoe30sIHNlbGYub3B0Z3JvdXBzW29wdGdyb3VwXSwge1xuXHRcdFx0XHRcdFx0aHRtbDogZG9tVG9TdHJpbmcoaHRtbF9jaGlsZHJlbiksXG5cdFx0XHRcdFx0XHRkb206ICBodG1sX2NoaWxkcmVuXG5cdFx0XHRcdFx0fSkpKTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRodG1sLmFwcGVuZENoaWxkKGdyb3Vwc1tvcHRncm91cF0pO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFxuXHRcdFx0JGRyb3Bkb3duX2NvbnRlbnQuaHRtbChodG1sKTtcblx0XG5cdFx0XHQvLyBoaWdobGlnaHQgbWF0Y2hpbmcgdGVybXMgaW5saW5lXG5cdFx0XHRpZiAoc2VsZi5zZXR0aW5ncy5oaWdobGlnaHQgJiYgcmVzdWx0cy5xdWVyeS5sZW5ndGggJiYgcmVzdWx0cy50b2tlbnMubGVuZ3RoKSB7XG5cdFx0XHRcdCRkcm9wZG93bl9jb250ZW50LnJlbW92ZUhpZ2hsaWdodCgpO1xuXHRcdFx0XHRmb3IgKGkgPSAwLCBuID0gcmVzdWx0cy50b2tlbnMubGVuZ3RoOyBpIDwgbjsgaSsrKSB7XG5cdFx0XHRcdFx0aGlnaGxpZ2h0KCRkcm9wZG93bl9jb250ZW50LCByZXN1bHRzLnRva2Vuc1tpXS5yZWdleCk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XG5cdFx0XHQvLyBhZGQgXCJzZWxlY3RlZFwiIGNsYXNzIHRvIHNlbGVjdGVkIG9wdGlvbnNcblx0XHRcdGlmICghc2VsZi5zZXR0aW5ncy5oaWRlU2VsZWN0ZWQpIHtcblx0XHRcdFx0Zm9yIChpID0gMCwgbiA9IHNlbGYuaXRlbXMubGVuZ3RoOyBpIDwgbjsgaSsrKSB7XG5cdFx0XHRcdFx0c2VsZi5nZXRPcHRpb24oc2VsZi5pdGVtc1tpXSkuYWRkQ2xhc3MoJ3NlbGVjdGVkJyk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XG5cdFx0XHQvLyBhZGQgY3JlYXRlIG9wdGlvblxuXHRcdFx0aGFzX2NyZWF0ZV9vcHRpb24gPSBzZWxmLmNhbkNyZWF0ZShxdWVyeSk7XG5cdFx0XHRpZiAoaGFzX2NyZWF0ZV9vcHRpb24pIHtcblx0XHRcdFx0JGRyb3Bkb3duX2NvbnRlbnQucHJlcGVuZChzZWxmLnJlbmRlcignb3B0aW9uX2NyZWF0ZScsIHtpbnB1dDogcXVlcnl9KSk7XG5cdFx0XHRcdCRjcmVhdGUgPSAkKCRkcm9wZG93bl9jb250ZW50WzBdLmNoaWxkTm9kZXNbMF0pO1xuXHRcdFx0fVxuXHRcblx0XHRcdC8vIGFjdGl2YXRlXG5cdFx0XHRzZWxmLmhhc09wdGlvbnMgPSByZXN1bHRzLml0ZW1zLmxlbmd0aCA+IDAgfHwgaGFzX2NyZWF0ZV9vcHRpb247XG5cdFx0XHRpZiAoc2VsZi5oYXNPcHRpb25zKSB7XG5cdFx0XHRcdGlmIChyZXN1bHRzLml0ZW1zLmxlbmd0aCA+IDApIHtcblx0XHRcdFx0XHQkYWN0aXZlX2JlZm9yZSA9IGFjdGl2ZV9iZWZvcmUgJiYgc2VsZi5nZXRPcHRpb24oYWN0aXZlX2JlZm9yZSk7XG5cdFx0XHRcdFx0aWYgKCRhY3RpdmVfYmVmb3JlICYmICRhY3RpdmVfYmVmb3JlLmxlbmd0aCkge1xuXHRcdFx0XHRcdFx0JGFjdGl2ZSA9ICRhY3RpdmVfYmVmb3JlO1xuXHRcdFx0XHRcdH0gZWxzZSBpZiAoc2VsZi5zZXR0aW5ncy5tb2RlID09PSAnc2luZ2xlJyAmJiBzZWxmLml0ZW1zLmxlbmd0aCkge1xuXHRcdFx0XHRcdFx0JGFjdGl2ZSA9IHNlbGYuZ2V0T3B0aW9uKHNlbGYuaXRlbXNbMF0pO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRpZiAoISRhY3RpdmUgfHwgISRhY3RpdmUubGVuZ3RoKSB7XG5cdFx0XHRcdFx0XHRpZiAoJGNyZWF0ZSAmJiAhc2VsZi5zZXR0aW5ncy5hZGRQcmVjZWRlbmNlKSB7XG5cdFx0XHRcdFx0XHRcdCRhY3RpdmUgPSBzZWxmLmdldEFkamFjZW50T3B0aW9uKCRjcmVhdGUsIDEpO1xuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0JGFjdGl2ZSA9ICRkcm9wZG93bl9jb250ZW50LmZpbmQoJ1tkYXRhLXNlbGVjdGFibGVdOmZpcnN0Jyk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdCRhY3RpdmUgPSAkY3JlYXRlO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHNlbGYuc2V0QWN0aXZlT3B0aW9uKCRhY3RpdmUpO1xuXHRcdFx0XHRpZiAodHJpZ2dlckRyb3Bkb3duICYmICFzZWxmLmlzT3BlbikgeyBzZWxmLm9wZW4oKTsgfVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0c2VsZi5zZXRBY3RpdmVPcHRpb24obnVsbCk7XG5cdFx0XHRcdGlmICh0cmlnZ2VyRHJvcGRvd24gJiYgc2VsZi5pc09wZW4pIHsgc2VsZi5jbG9zZSgpOyB9XG5cdFx0XHR9XG5cdFx0fSxcblx0XG5cdFx0LyoqXG5cdFx0ICogQWRkcyBhbiBhdmFpbGFibGUgb3B0aW9uLiBJZiBpdCBhbHJlYWR5IGV4aXN0cyxcblx0XHQgKiBub3RoaW5nIHdpbGwgaGFwcGVuLiBOb3RlOiB0aGlzIGRvZXMgbm90IHJlZnJlc2hcblx0XHQgKiB0aGUgb3B0aW9ucyBsaXN0IGRyb3Bkb3duICh1c2UgYHJlZnJlc2hPcHRpb25zYFxuXHRcdCAqIGZvciB0aGF0KS5cblx0XHQgKlxuXHRcdCAqIFVzYWdlOlxuXHRcdCAqXG5cdFx0ICogICB0aGlzLmFkZE9wdGlvbihkYXRhKVxuXHRcdCAqXG5cdFx0ICogQHBhcmFtIHtvYmplY3R8YXJyYXl9IGRhdGFcblx0XHQgKi9cblx0XHRhZGRPcHRpb246IGZ1bmN0aW9uKGRhdGEpIHtcblx0XHRcdHZhciBpLCBuLCB2YWx1ZSwgc2VsZiA9IHRoaXM7XG5cdFxuXHRcdFx0aWYgKCQuaXNBcnJheShkYXRhKSkge1xuXHRcdFx0XHRmb3IgKGkgPSAwLCBuID0gZGF0YS5sZW5ndGg7IGkgPCBuOyBpKyspIHtcblx0XHRcdFx0XHRzZWxmLmFkZE9wdGlvbihkYXRhW2ldKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cdFxuXHRcdFx0aWYgKHZhbHVlID0gc2VsZi5yZWdpc3Rlck9wdGlvbihkYXRhKSkge1xuXHRcdFx0XHRzZWxmLnVzZXJPcHRpb25zW3ZhbHVlXSA9IHRydWU7XG5cdFx0XHRcdHNlbGYubGFzdFF1ZXJ5ID0gbnVsbDtcblx0XHRcdFx0c2VsZi50cmlnZ2VyKCdvcHRpb25fYWRkJywgdmFsdWUsIGRhdGEpO1xuXHRcdFx0fVxuXHRcdH0sXG5cdFxuXHRcdC8qKlxuXHRcdCAqIFJlZ2lzdGVycyBhbiBvcHRpb24gdG8gdGhlIHBvb2wgb2Ygb3B0aW9ucy5cblx0XHQgKlxuXHRcdCAqIEBwYXJhbSB7b2JqZWN0fSBkYXRhXG5cdFx0ICogQHJldHVybiB7Ym9vbGVhbnxzdHJpbmd9XG5cdFx0ICovXG5cdFx0cmVnaXN0ZXJPcHRpb246IGZ1bmN0aW9uKGRhdGEpIHtcblx0XHRcdHZhciBrZXkgPSBoYXNoX2tleShkYXRhW3RoaXMuc2V0dGluZ3MudmFsdWVGaWVsZF0pO1xuXHRcdFx0aWYgKHR5cGVvZiBrZXkgPT09ICd1bmRlZmluZWQnIHx8IGtleSA9PT0gbnVsbCB8fCB0aGlzLm9wdGlvbnMuaGFzT3duUHJvcGVydHkoa2V5KSkgcmV0dXJuIGZhbHNlO1xuXHRcdFx0ZGF0YS4kb3JkZXIgPSBkYXRhLiRvcmRlciB8fCArK3RoaXMub3JkZXI7XG5cdFx0XHR0aGlzLm9wdGlvbnNba2V5XSA9IGRhdGE7XG5cdFx0XHRyZXR1cm4ga2V5O1xuXHRcdH0sXG5cdFxuXHRcdC8qKlxuXHRcdCAqIFJlZ2lzdGVycyBhbiBvcHRpb24gZ3JvdXAgdG8gdGhlIHBvb2wgb2Ygb3B0aW9uIGdyb3Vwcy5cblx0XHQgKlxuXHRcdCAqIEBwYXJhbSB7b2JqZWN0fSBkYXRhXG5cdFx0ICogQHJldHVybiB7Ym9vbGVhbnxzdHJpbmd9XG5cdFx0ICovXG5cdFx0cmVnaXN0ZXJPcHRpb25Hcm91cDogZnVuY3Rpb24oZGF0YSkge1xuXHRcdFx0dmFyIGtleSA9IGhhc2hfa2V5KGRhdGFbdGhpcy5zZXR0aW5ncy5vcHRncm91cFZhbHVlRmllbGRdKTtcblx0XHRcdGlmICgha2V5KSByZXR1cm4gZmFsc2U7XG5cdFxuXHRcdFx0ZGF0YS4kb3JkZXIgPSBkYXRhLiRvcmRlciB8fCArK3RoaXMub3JkZXI7XG5cdFx0XHR0aGlzLm9wdGdyb3Vwc1trZXldID0gZGF0YTtcblx0XHRcdHJldHVybiBrZXk7XG5cdFx0fSxcblx0XG5cdFx0LyoqXG5cdFx0ICogUmVnaXN0ZXJzIGEgbmV3IG9wdGdyb3VwIGZvciBvcHRpb25zXG5cdFx0ICogdG8gYmUgYnVja2V0ZWQgaW50by5cblx0XHQgKlxuXHRcdCAqIEBwYXJhbSB7c3RyaW5nfSBpZFxuXHRcdCAqIEBwYXJhbSB7b2JqZWN0fSBkYXRhXG5cdFx0ICovXG5cdFx0YWRkT3B0aW9uR3JvdXA6IGZ1bmN0aW9uKGlkLCBkYXRhKSB7XG5cdFx0XHRkYXRhW3RoaXMuc2V0dGluZ3Mub3B0Z3JvdXBWYWx1ZUZpZWxkXSA9IGlkO1xuXHRcdFx0aWYgKGlkID0gdGhpcy5yZWdpc3Rlck9wdGlvbkdyb3VwKGRhdGEpKSB7XG5cdFx0XHRcdHRoaXMudHJpZ2dlcignb3B0Z3JvdXBfYWRkJywgaWQsIGRhdGEpO1xuXHRcdFx0fVxuXHRcdH0sXG5cdFxuXHRcdC8qKlxuXHRcdCAqIFJlbW92ZXMgYW4gZXhpc3Rpbmcgb3B0aW9uIGdyb3VwLlxuXHRcdCAqXG5cdFx0ICogQHBhcmFtIHtzdHJpbmd9IGlkXG5cdFx0ICovXG5cdFx0cmVtb3ZlT3B0aW9uR3JvdXA6IGZ1bmN0aW9uKGlkKSB7XG5cdFx0XHRpZiAodGhpcy5vcHRncm91cHMuaGFzT3duUHJvcGVydHkoaWQpKSB7XG5cdFx0XHRcdGRlbGV0ZSB0aGlzLm9wdGdyb3Vwc1tpZF07XG5cdFx0XHRcdHRoaXMucmVuZGVyQ2FjaGUgPSB7fTtcblx0XHRcdFx0dGhpcy50cmlnZ2VyKCdvcHRncm91cF9yZW1vdmUnLCBpZCk7XG5cdFx0XHR9XG5cdFx0fSxcblx0XG5cdFx0LyoqXG5cdFx0ICogQ2xlYXJzIGFsbCBleGlzdGluZyBvcHRpb24gZ3JvdXBzLlxuXHRcdCAqL1xuXHRcdGNsZWFyT3B0aW9uR3JvdXBzOiBmdW5jdGlvbigpIHtcblx0XHRcdHRoaXMub3B0Z3JvdXBzID0ge307XG5cdFx0XHR0aGlzLnJlbmRlckNhY2hlID0ge307XG5cdFx0XHR0aGlzLnRyaWdnZXIoJ29wdGdyb3VwX2NsZWFyJyk7XG5cdFx0fSxcblx0XG5cdFx0LyoqXG5cdFx0ICogVXBkYXRlcyBhbiBvcHRpb24gYXZhaWxhYmxlIGZvciBzZWxlY3Rpb24uIElmXG5cdFx0ICogaXQgaXMgdmlzaWJsZSBpbiB0aGUgc2VsZWN0ZWQgaXRlbXMgb3Igb3B0aW9uc1xuXHRcdCAqIGRyb3Bkb3duLCBpdCB3aWxsIGJlIHJlLXJlbmRlcmVkIGF1dG9tYXRpY2FsbHkuXG5cdFx0ICpcblx0XHQgKiBAcGFyYW0ge3N0cmluZ30gdmFsdWVcblx0XHQgKiBAcGFyYW0ge29iamVjdH0gZGF0YVxuXHRcdCAqL1xuXHRcdHVwZGF0ZU9wdGlvbjogZnVuY3Rpb24odmFsdWUsIGRhdGEpIHtcblx0XHRcdHZhciBzZWxmID0gdGhpcztcblx0XHRcdHZhciAkaXRlbSwgJGl0ZW1fbmV3O1xuXHRcdFx0dmFyIHZhbHVlX25ldywgaW5kZXhfaXRlbSwgY2FjaGVfaXRlbXMsIGNhY2hlX29wdGlvbnMsIG9yZGVyX29sZDtcblx0XG5cdFx0XHR2YWx1ZSAgICAgPSBoYXNoX2tleSh2YWx1ZSk7XG5cdFx0XHR2YWx1ZV9uZXcgPSBoYXNoX2tleShkYXRhW3NlbGYuc2V0dGluZ3MudmFsdWVGaWVsZF0pO1xuXHRcblx0XHRcdC8vIHNhbml0eSBjaGVja3Ncblx0XHRcdGlmICh2YWx1ZSA9PT0gbnVsbCkgcmV0dXJuO1xuXHRcdFx0aWYgKCFzZWxmLm9wdGlvbnMuaGFzT3duUHJvcGVydHkodmFsdWUpKSByZXR1cm47XG5cdFx0XHRpZiAodHlwZW9mIHZhbHVlX25ldyAhPT0gJ3N0cmluZycpIHRocm93IG5ldyBFcnJvcignVmFsdWUgbXVzdCBiZSBzZXQgaW4gb3B0aW9uIGRhdGEnKTtcblx0XG5cdFx0XHRvcmRlcl9vbGQgPSBzZWxmLm9wdGlvbnNbdmFsdWVdLiRvcmRlcjtcblx0XG5cdFx0XHQvLyB1cGRhdGUgcmVmZXJlbmNlc1xuXHRcdFx0aWYgKHZhbHVlX25ldyAhPT0gdmFsdWUpIHtcblx0XHRcdFx0ZGVsZXRlIHNlbGYub3B0aW9uc1t2YWx1ZV07XG5cdFx0XHRcdGluZGV4X2l0ZW0gPSBzZWxmLml0ZW1zLmluZGV4T2YodmFsdWUpO1xuXHRcdFx0XHRpZiAoaW5kZXhfaXRlbSAhPT0gLTEpIHtcblx0XHRcdFx0XHRzZWxmLml0ZW1zLnNwbGljZShpbmRleF9pdGVtLCAxLCB2YWx1ZV9uZXcpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRkYXRhLiRvcmRlciA9IGRhdGEuJG9yZGVyIHx8IG9yZGVyX29sZDtcblx0XHRcdHNlbGYub3B0aW9uc1t2YWx1ZV9uZXddID0gZGF0YTtcblx0XG5cdFx0XHQvLyBpbnZhbGlkYXRlIHJlbmRlciBjYWNoZVxuXHRcdFx0Y2FjaGVfaXRlbXMgPSBzZWxmLnJlbmRlckNhY2hlWydpdGVtJ107XG5cdFx0XHRjYWNoZV9vcHRpb25zID0gc2VsZi5yZW5kZXJDYWNoZVsnb3B0aW9uJ107XG5cdFxuXHRcdFx0aWYgKGNhY2hlX2l0ZW1zKSB7XG5cdFx0XHRcdGRlbGV0ZSBjYWNoZV9pdGVtc1t2YWx1ZV07XG5cdFx0XHRcdGRlbGV0ZSBjYWNoZV9pdGVtc1t2YWx1ZV9uZXddO1xuXHRcdFx0fVxuXHRcdFx0aWYgKGNhY2hlX29wdGlvbnMpIHtcblx0XHRcdFx0ZGVsZXRlIGNhY2hlX29wdGlvbnNbdmFsdWVdO1xuXHRcdFx0XHRkZWxldGUgY2FjaGVfb3B0aW9uc1t2YWx1ZV9uZXddO1xuXHRcdFx0fVxuXHRcblx0XHRcdC8vIHVwZGF0ZSB0aGUgaXRlbSBpZiBpdCdzIHNlbGVjdGVkXG5cdFx0XHRpZiAoc2VsZi5pdGVtcy5pbmRleE9mKHZhbHVlX25ldykgIT09IC0xKSB7XG5cdFx0XHRcdCRpdGVtID0gc2VsZi5nZXRJdGVtKHZhbHVlKTtcblx0XHRcdFx0JGl0ZW1fbmV3ID0gJChzZWxmLnJlbmRlcignaXRlbScsIGRhdGEpKTtcblx0XHRcdFx0aWYgKCRpdGVtLmhhc0NsYXNzKCdhY3RpdmUnKSkgJGl0ZW1fbmV3LmFkZENsYXNzKCdhY3RpdmUnKTtcblx0XHRcdFx0JGl0ZW0ucmVwbGFjZVdpdGgoJGl0ZW1fbmV3KTtcblx0XHRcdH1cblx0XG5cdFx0XHQvLyBpbnZhbGlkYXRlIGxhc3QgcXVlcnkgYmVjYXVzZSB3ZSBtaWdodCBoYXZlIHVwZGF0ZWQgdGhlIHNvcnRGaWVsZFxuXHRcdFx0c2VsZi5sYXN0UXVlcnkgPSBudWxsO1xuXHRcblx0XHRcdC8vIHVwZGF0ZSBkcm9wZG93biBjb250ZW50c1xuXHRcdFx0aWYgKHNlbGYuaXNPcGVuKSB7XG5cdFx0XHRcdHNlbGYucmVmcmVzaE9wdGlvbnMoZmFsc2UpO1xuXHRcdFx0fVxuXHRcdH0sXG5cdFxuXHRcdC8qKlxuXHRcdCAqIFJlbW92ZXMgYSBzaW5nbGUgb3B0aW9uLlxuXHRcdCAqXG5cdFx0ICogQHBhcmFtIHtzdHJpbmd9IHZhbHVlXG5cdFx0ICogQHBhcmFtIHtib29sZWFufSBzaWxlbnRcblx0XHQgKi9cblx0XHRyZW1vdmVPcHRpb246IGZ1bmN0aW9uKHZhbHVlLCBzaWxlbnQpIHtcblx0XHRcdHZhciBzZWxmID0gdGhpcztcblx0XHRcdHZhbHVlID0gaGFzaF9rZXkodmFsdWUpO1xuXHRcblx0XHRcdHZhciBjYWNoZV9pdGVtcyA9IHNlbGYucmVuZGVyQ2FjaGVbJ2l0ZW0nXTtcblx0XHRcdHZhciBjYWNoZV9vcHRpb25zID0gc2VsZi5yZW5kZXJDYWNoZVsnb3B0aW9uJ107XG5cdFx0XHRpZiAoY2FjaGVfaXRlbXMpIGRlbGV0ZSBjYWNoZV9pdGVtc1t2YWx1ZV07XG5cdFx0XHRpZiAoY2FjaGVfb3B0aW9ucykgZGVsZXRlIGNhY2hlX29wdGlvbnNbdmFsdWVdO1xuXHRcblx0XHRcdGRlbGV0ZSBzZWxmLnVzZXJPcHRpb25zW3ZhbHVlXTtcblx0XHRcdGRlbGV0ZSBzZWxmLm9wdGlvbnNbdmFsdWVdO1xuXHRcdFx0c2VsZi5sYXN0UXVlcnkgPSBudWxsO1xuXHRcdFx0c2VsZi50cmlnZ2VyKCdvcHRpb25fcmVtb3ZlJywgdmFsdWUpO1xuXHRcdFx0c2VsZi5yZW1vdmVJdGVtKHZhbHVlLCBzaWxlbnQpO1xuXHRcdH0sXG5cdFxuXHRcdC8qKlxuXHRcdCAqIENsZWFycyBhbGwgb3B0aW9ucy5cblx0XHQgKi9cblx0XHRjbGVhck9wdGlvbnM6IGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIHNlbGYgPSB0aGlzO1xuXHRcblx0XHRcdHNlbGYubG9hZGVkU2VhcmNoZXMgPSB7fTtcblx0XHRcdHNlbGYudXNlck9wdGlvbnMgPSB7fTtcblx0XHRcdHNlbGYucmVuZGVyQ2FjaGUgPSB7fTtcblx0XHRcdHNlbGYub3B0aW9ucyA9IHNlbGYuc2lmdGVyLml0ZW1zID0ge307XG5cdFx0XHRzZWxmLmxhc3RRdWVyeSA9IG51bGw7XG5cdFx0XHRzZWxmLnRyaWdnZXIoJ29wdGlvbl9jbGVhcicpO1xuXHRcdFx0c2VsZi5jbGVhcigpO1xuXHRcdH0sXG5cdFxuXHRcdC8qKlxuXHRcdCAqIFJldHVybnMgdGhlIGpRdWVyeSBlbGVtZW50IG9mIHRoZSBvcHRpb25cblx0XHQgKiBtYXRjaGluZyB0aGUgZ2l2ZW4gdmFsdWUuXG5cdFx0ICpcblx0XHQgKiBAcGFyYW0ge3N0cmluZ30gdmFsdWVcblx0XHQgKiBAcmV0dXJucyB7b2JqZWN0fVxuXHRcdCAqL1xuXHRcdGdldE9wdGlvbjogZnVuY3Rpb24odmFsdWUpIHtcblx0XHRcdHJldHVybiB0aGlzLmdldEVsZW1lbnRXaXRoVmFsdWUodmFsdWUsIHRoaXMuJGRyb3Bkb3duX2NvbnRlbnQuZmluZCgnW2RhdGEtc2VsZWN0YWJsZV0nKSk7XG5cdFx0fSxcblx0XG5cdFx0LyoqXG5cdFx0ICogUmV0dXJucyB0aGUgalF1ZXJ5IGVsZW1lbnQgb2YgdGhlIG5leHQgb3Jcblx0XHQgKiBwcmV2aW91cyBzZWxlY3RhYmxlIG9wdGlvbi5cblx0XHQgKlxuXHRcdCAqIEBwYXJhbSB7b2JqZWN0fSAkb3B0aW9uXG5cdFx0ICogQHBhcmFtIHtpbnR9IGRpcmVjdGlvbiAgY2FuIGJlIDEgZm9yIG5leHQgb3IgLTEgZm9yIHByZXZpb3VzXG5cdFx0ICogQHJldHVybiB7b2JqZWN0fVxuXHRcdCAqL1xuXHRcdGdldEFkamFjZW50T3B0aW9uOiBmdW5jdGlvbigkb3B0aW9uLCBkaXJlY3Rpb24pIHtcblx0XHRcdHZhciAkb3B0aW9ucyA9IHRoaXMuJGRyb3Bkb3duLmZpbmQoJ1tkYXRhLXNlbGVjdGFibGVdJyk7XG5cdFx0XHR2YXIgaW5kZXggICAgPSAkb3B0aW9ucy5pbmRleCgkb3B0aW9uKSArIGRpcmVjdGlvbjtcblx0XG5cdFx0XHRyZXR1cm4gaW5kZXggPj0gMCAmJiBpbmRleCA8ICRvcHRpb25zLmxlbmd0aCA/ICRvcHRpb25zLmVxKGluZGV4KSA6ICQoKTtcblx0XHR9LFxuXHRcblx0XHQvKipcblx0XHQgKiBGaW5kcyB0aGUgZmlyc3QgZWxlbWVudCB3aXRoIGEgXCJkYXRhLXZhbHVlXCIgYXR0cmlidXRlXG5cdFx0ICogdGhhdCBtYXRjaGVzIHRoZSBnaXZlbiB2YWx1ZS5cblx0XHQgKlxuXHRcdCAqIEBwYXJhbSB7bWl4ZWR9IHZhbHVlXG5cdFx0ICogQHBhcmFtIHtvYmplY3R9ICRlbHNcblx0XHQgKiBAcmV0dXJuIHtvYmplY3R9XG5cdFx0ICovXG5cdFx0Z2V0RWxlbWVudFdpdGhWYWx1ZTogZnVuY3Rpb24odmFsdWUsICRlbHMpIHtcblx0XHRcdHZhbHVlID0gaGFzaF9rZXkodmFsdWUpO1xuXHRcblx0XHRcdGlmICh0eXBlb2YgdmFsdWUgIT09ICd1bmRlZmluZWQnICYmIHZhbHVlICE9PSBudWxsKSB7XG5cdFx0XHRcdGZvciAodmFyIGkgPSAwLCBuID0gJGVscy5sZW5ndGg7IGkgPCBuOyBpKyspIHtcblx0XHRcdFx0XHRpZiAoJGVsc1tpXS5nZXRBdHRyaWJ1dGUoJ2RhdGEtdmFsdWUnKSA9PT0gdmFsdWUpIHtcblx0XHRcdFx0XHRcdHJldHVybiAkKCRlbHNbaV0pO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcblx0XHRcdHJldHVybiAkKCk7XG5cdFx0fSxcblx0XG5cdFx0LyoqXG5cdFx0ICogUmV0dXJucyB0aGUgalF1ZXJ5IGVsZW1lbnQgb2YgdGhlIGl0ZW1cblx0XHQgKiBtYXRjaGluZyB0aGUgZ2l2ZW4gdmFsdWUuXG5cdFx0ICpcblx0XHQgKiBAcGFyYW0ge3N0cmluZ30gdmFsdWVcblx0XHQgKiBAcmV0dXJucyB7b2JqZWN0fVxuXHRcdCAqL1xuXHRcdGdldEl0ZW06IGZ1bmN0aW9uKHZhbHVlKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5nZXRFbGVtZW50V2l0aFZhbHVlKHZhbHVlLCB0aGlzLiRjb250cm9sLmNoaWxkcmVuKCkpO1xuXHRcdH0sXG5cdFxuXHRcdC8qKlxuXHRcdCAqIFwiU2VsZWN0c1wiIG11bHRpcGxlIGl0ZW1zIGF0IG9uY2UuIEFkZHMgdGhlbSB0byB0aGUgbGlzdFxuXHRcdCAqIGF0IHRoZSBjdXJyZW50IGNhcmV0IHBvc2l0aW9uLlxuXHRcdCAqXG5cdFx0ICogQHBhcmFtIHtzdHJpbmd9IHZhbHVlXG5cdFx0ICogQHBhcmFtIHtib29sZWFufSBzaWxlbnRcblx0XHQgKi9cblx0XHRhZGRJdGVtczogZnVuY3Rpb24odmFsdWVzLCBzaWxlbnQpIHtcblx0XHRcdHZhciBpdGVtcyA9ICQuaXNBcnJheSh2YWx1ZXMpID8gdmFsdWVzIDogW3ZhbHVlc107XG5cdFx0XHRmb3IgKHZhciBpID0gMCwgbiA9IGl0ZW1zLmxlbmd0aDsgaSA8IG47IGkrKykge1xuXHRcdFx0XHR0aGlzLmlzUGVuZGluZyA9IChpIDwgbiAtIDEpO1xuXHRcdFx0XHR0aGlzLmFkZEl0ZW0oaXRlbXNbaV0sIHNpbGVudCk7XG5cdFx0XHR9XG5cdFx0fSxcblx0XG5cdFx0LyoqXG5cdFx0ICogXCJTZWxlY3RzXCIgYW4gaXRlbS4gQWRkcyBpdCB0byB0aGUgbGlzdFxuXHRcdCAqIGF0IHRoZSBjdXJyZW50IGNhcmV0IHBvc2l0aW9uLlxuXHRcdCAqXG5cdFx0ICogQHBhcmFtIHtzdHJpbmd9IHZhbHVlXG5cdFx0ICogQHBhcmFtIHtib29sZWFufSBzaWxlbnRcblx0XHQgKi9cblx0XHRhZGRJdGVtOiBmdW5jdGlvbih2YWx1ZSwgc2lsZW50KSB7XG5cdFx0XHR2YXIgZXZlbnRzID0gc2lsZW50ID8gW10gOiBbJ2NoYW5nZSddO1xuXHRcblx0XHRcdGRlYm91bmNlX2V2ZW50cyh0aGlzLCBldmVudHMsIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHR2YXIgJGl0ZW0sICRvcHRpb24sICRvcHRpb25zO1xuXHRcdFx0XHR2YXIgc2VsZiA9IHRoaXM7XG5cdFx0XHRcdHZhciBpbnB1dE1vZGUgPSBzZWxmLnNldHRpbmdzLm1vZGU7XG5cdFx0XHRcdHZhciBpLCBhY3RpdmUsIHZhbHVlX25leHQsIHdhc0Z1bGw7XG5cdFx0XHRcdHZhbHVlID0gaGFzaF9rZXkodmFsdWUpO1xuXHRcblx0XHRcdFx0aWYgKHNlbGYuaXRlbXMuaW5kZXhPZih2YWx1ZSkgIT09IC0xKSB7XG5cdFx0XHRcdFx0aWYgKGlucHV0TW9kZSA9PT0gJ3NpbmdsZScpIHNlbGYuY2xvc2UoKTtcblx0XHRcdFx0XHRyZXR1cm47XG5cdFx0XHRcdH1cblx0XG5cdFx0XHRcdGlmICghc2VsZi5vcHRpb25zLmhhc093blByb3BlcnR5KHZhbHVlKSkgcmV0dXJuO1xuXHRcdFx0XHRpZiAoaW5wdXRNb2RlID09PSAnc2luZ2xlJykgc2VsZi5jbGVhcihzaWxlbnQpO1xuXHRcdFx0XHRpZiAoaW5wdXRNb2RlID09PSAnbXVsdGknICYmIHNlbGYuaXNGdWxsKCkpIHJldHVybjtcblx0XG5cdFx0XHRcdCRpdGVtID0gJChzZWxmLnJlbmRlcignaXRlbScsIHNlbGYub3B0aW9uc1t2YWx1ZV0pKTtcblx0XHRcdFx0d2FzRnVsbCA9IHNlbGYuaXNGdWxsKCk7XG5cdFx0XHRcdHNlbGYuaXRlbXMuc3BsaWNlKHNlbGYuY2FyZXRQb3MsIDAsIHZhbHVlKTtcblx0XHRcdFx0c2VsZi5pbnNlcnRBdENhcmV0KCRpdGVtKTtcblx0XHRcdFx0aWYgKCFzZWxmLmlzUGVuZGluZyB8fCAoIXdhc0Z1bGwgJiYgc2VsZi5pc0Z1bGwoKSkpIHtcblx0XHRcdFx0XHRzZWxmLnJlZnJlc2hTdGF0ZSgpO1xuXHRcdFx0XHR9XG5cdFxuXHRcdFx0XHRpZiAoc2VsZi5pc1NldHVwKSB7XG5cdFx0XHRcdFx0JG9wdGlvbnMgPSBzZWxmLiRkcm9wZG93bl9jb250ZW50LmZpbmQoJ1tkYXRhLXNlbGVjdGFibGVdJyk7XG5cdFxuXHRcdFx0XHRcdC8vIHVwZGF0ZSBtZW51IC8gcmVtb3ZlIHRoZSBvcHRpb24gKGlmIHRoaXMgaXMgbm90IG9uZSBpdGVtIGJlaW5nIGFkZGVkIGFzIHBhcnQgb2Ygc2VyaWVzKVxuXHRcdFx0XHRcdGlmICghc2VsZi5pc1BlbmRpbmcpIHtcblx0XHRcdFx0XHRcdCRvcHRpb24gPSBzZWxmLmdldE9wdGlvbih2YWx1ZSk7XG5cdFx0XHRcdFx0XHR2YWx1ZV9uZXh0ID0gc2VsZi5nZXRBZGphY2VudE9wdGlvbigkb3B0aW9uLCAxKS5hdHRyKCdkYXRhLXZhbHVlJyk7XG5cdFx0XHRcdFx0XHRzZWxmLnJlZnJlc2hPcHRpb25zKHNlbGYuaXNGb2N1c2VkICYmIGlucHV0TW9kZSAhPT0gJ3NpbmdsZScpO1xuXHRcdFx0XHRcdFx0aWYgKHZhbHVlX25leHQpIHtcblx0XHRcdFx0XHRcdFx0c2VsZi5zZXRBY3RpdmVPcHRpb24oc2VsZi5nZXRPcHRpb24odmFsdWVfbmV4dCkpO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XG5cdFx0XHRcdFx0Ly8gaGlkZSB0aGUgbWVudSBpZiB0aGUgbWF4aW11bSBudW1iZXIgb2YgaXRlbXMgaGF2ZSBiZWVuIHNlbGVjdGVkIG9yIG5vIG9wdGlvbnMgYXJlIGxlZnRcblx0XHRcdFx0XHRpZiAoISRvcHRpb25zLmxlbmd0aCB8fCBzZWxmLmlzRnVsbCgpKSB7XG5cdFx0XHRcdFx0XHRzZWxmLmNsb3NlKCk7XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdHNlbGYucG9zaXRpb25Ecm9wZG93bigpO1xuXHRcdFx0XHRcdH1cblx0XG5cdFx0XHRcdFx0c2VsZi51cGRhdGVQbGFjZWhvbGRlcigpO1xuXHRcdFx0XHRcdHNlbGYudHJpZ2dlcignaXRlbV9hZGQnLCB2YWx1ZSwgJGl0ZW0pO1xuXHRcdFx0XHRcdHNlbGYudXBkYXRlT3JpZ2luYWxJbnB1dCh7c2lsZW50OiBzaWxlbnR9KTtcblx0XHRcdFx0fVxuXHRcdFx0fSk7XG5cdFx0fSxcblx0XG5cdFx0LyoqXG5cdFx0ICogUmVtb3ZlcyB0aGUgc2VsZWN0ZWQgaXRlbSBtYXRjaGluZ1xuXHRcdCAqIHRoZSBwcm92aWRlZCB2YWx1ZS5cblx0XHQgKlxuXHRcdCAqIEBwYXJhbSB7c3RyaW5nfSB2YWx1ZVxuXHRcdCAqL1xuXHRcdHJlbW92ZUl0ZW06IGZ1bmN0aW9uKHZhbHVlLCBzaWxlbnQpIHtcblx0XHRcdHZhciBzZWxmID0gdGhpcztcblx0XHRcdHZhciAkaXRlbSwgaSwgaWR4O1xuXHRcblx0XHRcdCRpdGVtID0gKHZhbHVlIGluc3RhbmNlb2YgJCkgPyB2YWx1ZSA6IHNlbGYuZ2V0SXRlbSh2YWx1ZSk7XG5cdFx0XHR2YWx1ZSA9IGhhc2hfa2V5KCRpdGVtLmF0dHIoJ2RhdGEtdmFsdWUnKSk7XG5cdFx0XHRpID0gc2VsZi5pdGVtcy5pbmRleE9mKHZhbHVlKTtcblx0XG5cdFx0XHRpZiAoaSAhPT0gLTEpIHtcblx0XHRcdFx0JGl0ZW0ucmVtb3ZlKCk7XG5cdFx0XHRcdGlmICgkaXRlbS5oYXNDbGFzcygnYWN0aXZlJykpIHtcblx0XHRcdFx0XHRpZHggPSBzZWxmLiRhY3RpdmVJdGVtcy5pbmRleE9mKCRpdGVtWzBdKTtcblx0XHRcdFx0XHRzZWxmLiRhY3RpdmVJdGVtcy5zcGxpY2UoaWR4LCAxKTtcblx0XHRcdFx0fVxuXHRcblx0XHRcdFx0c2VsZi5pdGVtcy5zcGxpY2UoaSwgMSk7XG5cdFx0XHRcdHNlbGYubGFzdFF1ZXJ5ID0gbnVsbDtcblx0XHRcdFx0aWYgKCFzZWxmLnNldHRpbmdzLnBlcnNpc3QgJiYgc2VsZi51c2VyT3B0aW9ucy5oYXNPd25Qcm9wZXJ0eSh2YWx1ZSkpIHtcblx0XHRcdFx0XHRzZWxmLnJlbW92ZU9wdGlvbih2YWx1ZSwgc2lsZW50KTtcblx0XHRcdFx0fVxuXHRcblx0XHRcdFx0aWYgKGkgPCBzZWxmLmNhcmV0UG9zKSB7XG5cdFx0XHRcdFx0c2VsZi5zZXRDYXJldChzZWxmLmNhcmV0UG9zIC0gMSk7XG5cdFx0XHRcdH1cblx0XG5cdFx0XHRcdHNlbGYucmVmcmVzaFN0YXRlKCk7XG5cdFx0XHRcdHNlbGYudXBkYXRlUGxhY2Vob2xkZXIoKTtcblx0XHRcdFx0c2VsZi51cGRhdGVPcmlnaW5hbElucHV0KHtzaWxlbnQ6IHNpbGVudH0pO1xuXHRcdFx0XHRzZWxmLnBvc2l0aW9uRHJvcGRvd24oKTtcblx0XHRcdFx0c2VsZi50cmlnZ2VyKCdpdGVtX3JlbW92ZScsIHZhbHVlLCAkaXRlbSk7XG5cdFx0XHR9XG5cdFx0fSxcblx0XG5cdFx0LyoqXG5cdFx0ICogSW52b2tlcyB0aGUgYGNyZWF0ZWAgbWV0aG9kIHByb3ZpZGVkIGluIHRoZVxuXHRcdCAqIHNlbGVjdGl6ZSBvcHRpb25zIHRoYXQgc2hvdWxkIHByb3ZpZGUgdGhlIGRhdGFcblx0XHQgKiBmb3IgdGhlIG5ldyBpdGVtLCBnaXZlbiB0aGUgdXNlciBpbnB1dC5cblx0XHQgKlxuXHRcdCAqIE9uY2UgdGhpcyBjb21wbGV0ZXMsIGl0IHdpbGwgYmUgYWRkZWRcblx0XHQgKiB0byB0aGUgaXRlbSBsaXN0LlxuXHRcdCAqXG5cdFx0ICogQHBhcmFtIHtzdHJpbmd9IHZhbHVlXG5cdFx0ICogQHBhcmFtIHtib29sZWFufSBbdHJpZ2dlckRyb3Bkb3duXVxuXHRcdCAqIEBwYXJhbSB7ZnVuY3Rpb259IFtjYWxsYmFja11cblx0XHQgKiBAcmV0dXJuIHtib29sZWFufVxuXHRcdCAqL1xuXHRcdGNyZWF0ZUl0ZW06IGZ1bmN0aW9uKGlucHV0LCB0cmlnZ2VyRHJvcGRvd24pIHtcblx0XHRcdHZhciBzZWxmICA9IHRoaXM7XG5cdFx0XHR2YXIgY2FyZXQgPSBzZWxmLmNhcmV0UG9zO1xuXHRcdFx0aW5wdXQgPSBpbnB1dCB8fCAkLnRyaW0oc2VsZi4kY29udHJvbF9pbnB1dC52YWwoKSB8fCAnJyk7XG5cdFxuXHRcdFx0dmFyIGNhbGxiYWNrID0gYXJndW1lbnRzW2FyZ3VtZW50cy5sZW5ndGggLSAxXTtcblx0XHRcdGlmICh0eXBlb2YgY2FsbGJhY2sgIT09ICdmdW5jdGlvbicpIGNhbGxiYWNrID0gZnVuY3Rpb24oKSB7fTtcblx0XG5cdFx0XHRpZiAodHlwZW9mIHRyaWdnZXJEcm9wZG93biAhPT0gJ2Jvb2xlYW4nKSB7XG5cdFx0XHRcdHRyaWdnZXJEcm9wZG93biA9IHRydWU7XG5cdFx0XHR9XG5cdFxuXHRcdFx0aWYgKCFzZWxmLmNhbkNyZWF0ZShpbnB1dCkpIHtcblx0XHRcdFx0Y2FsbGJhY2soKTtcblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0fVxuXHRcblx0XHRcdHNlbGYubG9jaygpO1xuXHRcblx0XHRcdHZhciBzZXR1cCA9ICh0eXBlb2Ygc2VsZi5zZXR0aW5ncy5jcmVhdGUgPT09ICdmdW5jdGlvbicpID8gdGhpcy5zZXR0aW5ncy5jcmVhdGUgOiBmdW5jdGlvbihpbnB1dCkge1xuXHRcdFx0XHR2YXIgZGF0YSA9IHt9O1xuXHRcdFx0XHRkYXRhW3NlbGYuc2V0dGluZ3MubGFiZWxGaWVsZF0gPSBpbnB1dDtcblx0XHRcdFx0ZGF0YVtzZWxmLnNldHRpbmdzLnZhbHVlRmllbGRdID0gaW5wdXQ7XG5cdFx0XHRcdHJldHVybiBkYXRhO1xuXHRcdFx0fTtcblx0XG5cdFx0XHR2YXIgY3JlYXRlID0gb25jZShmdW5jdGlvbihkYXRhKSB7XG5cdFx0XHRcdHNlbGYudW5sb2NrKCk7XG5cdFxuXHRcdFx0XHRpZiAoIWRhdGEgfHwgdHlwZW9mIGRhdGEgIT09ICdvYmplY3QnKSByZXR1cm4gY2FsbGJhY2soKTtcblx0XHRcdFx0dmFyIHZhbHVlID0gaGFzaF9rZXkoZGF0YVtzZWxmLnNldHRpbmdzLnZhbHVlRmllbGRdKTtcblx0XHRcdFx0aWYgKHR5cGVvZiB2YWx1ZSAhPT0gJ3N0cmluZycpIHJldHVybiBjYWxsYmFjaygpO1xuXHRcblx0XHRcdFx0c2VsZi5zZXRUZXh0Ym94VmFsdWUoJycpO1xuXHRcdFx0XHRzZWxmLmFkZE9wdGlvbihkYXRhKTtcblx0XHRcdFx0c2VsZi5zZXRDYXJldChjYXJldCk7XG5cdFx0XHRcdHNlbGYuYWRkSXRlbSh2YWx1ZSk7XG5cdFx0XHRcdHNlbGYucmVmcmVzaE9wdGlvbnModHJpZ2dlckRyb3Bkb3duICYmIHNlbGYuc2V0dGluZ3MubW9kZSAhPT0gJ3NpbmdsZScpO1xuXHRcdFx0XHRjYWxsYmFjayhkYXRhKTtcblx0XHRcdH0pO1xuXHRcblx0XHRcdHZhciBvdXRwdXQgPSBzZXR1cC5hcHBseSh0aGlzLCBbaW5wdXQsIGNyZWF0ZV0pO1xuXHRcdFx0aWYgKHR5cGVvZiBvdXRwdXQgIT09ICd1bmRlZmluZWQnKSB7XG5cdFx0XHRcdGNyZWF0ZShvdXRwdXQpO1xuXHRcdFx0fVxuXHRcblx0XHRcdHJldHVybiB0cnVlO1xuXHRcdH0sXG5cdFxuXHRcdC8qKlxuXHRcdCAqIFJlLXJlbmRlcnMgdGhlIHNlbGVjdGVkIGl0ZW0gbGlzdHMuXG5cdFx0ICovXG5cdFx0cmVmcmVzaEl0ZW1zOiBmdW5jdGlvbigpIHtcblx0XHRcdHRoaXMubGFzdFF1ZXJ5ID0gbnVsbDtcblx0XG5cdFx0XHRpZiAodGhpcy5pc1NldHVwKSB7XG5cdFx0XHRcdHRoaXMuYWRkSXRlbSh0aGlzLml0ZW1zKTtcblx0XHRcdH1cblx0XG5cdFx0XHR0aGlzLnJlZnJlc2hTdGF0ZSgpO1xuXHRcdFx0dGhpcy51cGRhdGVPcmlnaW5hbElucHV0KCk7XG5cdFx0fSxcblx0XG5cdFx0LyoqXG5cdFx0ICogVXBkYXRlcyBhbGwgc3RhdGUtZGVwZW5kZW50IGF0dHJpYnV0ZXNcblx0XHQgKiBhbmQgQ1NTIGNsYXNzZXMuXG5cdFx0ICovXG5cdFx0cmVmcmVzaFN0YXRlOiBmdW5jdGlvbigpIHtcblx0XHRcdHRoaXMucmVmcmVzaFZhbGlkaXR5U3RhdGUoKTtcblx0XHRcdHRoaXMucmVmcmVzaENsYXNzZXMoKTtcblx0XHR9LFxuXHRcblx0XHQvKipcblx0XHQgKiBVcGRhdGUgdGhlIGByZXF1aXJlZGAgYXR0cmlidXRlIG9mIGJvdGggaW5wdXQgYW5kIGNvbnRyb2wgaW5wdXQuXG5cdFx0ICpcblx0XHQgKiBUaGUgYHJlcXVpcmVkYCBwcm9wZXJ0eSBuZWVkcyB0byBiZSBhY3RpdmF0ZWQgb24gdGhlIGNvbnRyb2wgaW5wdXRcblx0XHQgKiBmb3IgdGhlIGVycm9yIHRvIGJlIGRpc3BsYXllZCBhdCB0aGUgcmlnaHQgcGxhY2UuIGByZXF1aXJlZGAgYWxzb1xuXHRcdCAqIG5lZWRzIHRvIGJlIHRlbXBvcmFyaWx5IGRlYWN0aXZhdGVkIG9uIHRoZSBpbnB1dCBzaW5jZSB0aGUgaW5wdXQgaXNcblx0XHQgKiBoaWRkZW4gYW5kIGNhbid0IHNob3cgZXJyb3JzLlxuXHRcdCAqL1xuXHRcdHJlZnJlc2hWYWxpZGl0eVN0YXRlOiBmdW5jdGlvbigpIHtcblx0XHRcdGlmICghdGhpcy5pc1JlcXVpcmVkKSByZXR1cm4gZmFsc2U7XG5cdFxuXHRcdFx0dmFyIGludmFsaWQgPSAhdGhpcy5pdGVtcy5sZW5ndGg7XG5cdFxuXHRcdFx0dGhpcy5pc0ludmFsaWQgPSBpbnZhbGlkO1xuXHRcdFx0dGhpcy4kY29udHJvbF9pbnB1dC5wcm9wKCdyZXF1aXJlZCcsIGludmFsaWQpO1xuXHRcdFx0dGhpcy4kaW5wdXQucHJvcCgncmVxdWlyZWQnLCAhaW52YWxpZCk7XG5cdFx0fSxcblx0XG5cdFx0LyoqXG5cdFx0ICogVXBkYXRlcyBhbGwgc3RhdGUtZGVwZW5kZW50IENTUyBjbGFzc2VzLlxuXHRcdCAqL1xuXHRcdHJlZnJlc2hDbGFzc2VzOiBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBzZWxmICAgICA9IHRoaXM7XG5cdFx0XHR2YXIgaXNGdWxsICAgPSBzZWxmLmlzRnVsbCgpO1xuXHRcdFx0dmFyIGlzTG9ja2VkID0gc2VsZi5pc0xvY2tlZDtcblx0XG5cdFx0XHRzZWxmLiR3cmFwcGVyXG5cdFx0XHRcdC50b2dnbGVDbGFzcygncnRsJywgc2VsZi5ydGwpO1xuXHRcblx0XHRcdHNlbGYuJGNvbnRyb2xcblx0XHRcdFx0LnRvZ2dsZUNsYXNzKCdmb2N1cycsIHNlbGYuaXNGb2N1c2VkKVxuXHRcdFx0XHQudG9nZ2xlQ2xhc3MoJ2Rpc2FibGVkJywgc2VsZi5pc0Rpc2FibGVkKVxuXHRcdFx0XHQudG9nZ2xlQ2xhc3MoJ3JlcXVpcmVkJywgc2VsZi5pc1JlcXVpcmVkKVxuXHRcdFx0XHQudG9nZ2xlQ2xhc3MoJ2ludmFsaWQnLCBzZWxmLmlzSW52YWxpZClcblx0XHRcdFx0LnRvZ2dsZUNsYXNzKCdsb2NrZWQnLCBpc0xvY2tlZClcblx0XHRcdFx0LnRvZ2dsZUNsYXNzKCdmdWxsJywgaXNGdWxsKS50b2dnbGVDbGFzcygnbm90LWZ1bGwnLCAhaXNGdWxsKVxuXHRcdFx0XHQudG9nZ2xlQ2xhc3MoJ2lucHV0LWFjdGl2ZScsIHNlbGYuaXNGb2N1c2VkICYmICFzZWxmLmlzSW5wdXRIaWRkZW4pXG5cdFx0XHRcdC50b2dnbGVDbGFzcygnZHJvcGRvd24tYWN0aXZlJywgc2VsZi5pc09wZW4pXG5cdFx0XHRcdC50b2dnbGVDbGFzcygnaGFzLW9wdGlvbnMnLCAhJC5pc0VtcHR5T2JqZWN0KHNlbGYub3B0aW9ucykpXG5cdFx0XHRcdC50b2dnbGVDbGFzcygnaGFzLWl0ZW1zJywgc2VsZi5pdGVtcy5sZW5ndGggPiAwKTtcblx0XG5cdFx0XHRzZWxmLiRjb250cm9sX2lucHV0LmRhdGEoJ2dyb3cnLCAhaXNGdWxsICYmICFpc0xvY2tlZCk7XG5cdFx0fSxcblx0XG5cdFx0LyoqXG5cdFx0ICogRGV0ZXJtaW5lcyB3aGV0aGVyIG9yIG5vdCBtb3JlIGl0ZW1zIGNhbiBiZSBhZGRlZFxuXHRcdCAqIHRvIHRoZSBjb250cm9sIHdpdGhvdXQgZXhjZWVkaW5nIHRoZSB1c2VyLWRlZmluZWQgbWF4aW11bS5cblx0XHQgKlxuXHRcdCAqIEByZXR1cm5zIHtib29sZWFufVxuXHRcdCAqL1xuXHRcdGlzRnVsbDogZnVuY3Rpb24oKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5zZXR0aW5ncy5tYXhJdGVtcyAhPT0gbnVsbCAmJiB0aGlzLml0ZW1zLmxlbmd0aCA+PSB0aGlzLnNldHRpbmdzLm1heEl0ZW1zO1xuXHRcdH0sXG5cdFxuXHRcdC8qKlxuXHRcdCAqIFJlZnJlc2hlcyB0aGUgb3JpZ2luYWwgPHNlbGVjdD4gb3IgPGlucHV0PlxuXHRcdCAqIGVsZW1lbnQgdG8gcmVmbGVjdCB0aGUgY3VycmVudCBzdGF0ZS5cblx0XHQgKi9cblx0XHR1cGRhdGVPcmlnaW5hbElucHV0OiBmdW5jdGlvbihvcHRzKSB7XG5cdFx0XHR2YXIgaSwgbiwgb3B0aW9ucywgbGFiZWwsIHNlbGYgPSB0aGlzO1xuXHRcdFx0b3B0cyA9IG9wdHMgfHwge307XG5cdFxuXHRcdFx0aWYgKHNlbGYudGFnVHlwZSA9PT0gVEFHX1NFTEVDVCkge1xuXHRcdFx0XHRvcHRpb25zID0gW107XG5cdFx0XHRcdGZvciAoaSA9IDAsIG4gPSBzZWxmLml0ZW1zLmxlbmd0aDsgaSA8IG47IGkrKykge1xuXHRcdFx0XHRcdGxhYmVsID0gc2VsZi5vcHRpb25zW3NlbGYuaXRlbXNbaV1dW3NlbGYuc2V0dGluZ3MubGFiZWxGaWVsZF0gfHwgJyc7XG5cdFx0XHRcdFx0b3B0aW9ucy5wdXNoKCc8b3B0aW9uIHZhbHVlPVwiJyArIGVzY2FwZV9odG1sKHNlbGYuaXRlbXNbaV0pICsgJ1wiIHNlbGVjdGVkPVwic2VsZWN0ZWRcIj4nICsgZXNjYXBlX2h0bWwobGFiZWwpICsgJzwvb3B0aW9uPicpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGlmICghb3B0aW9ucy5sZW5ndGggJiYgIXRoaXMuJGlucHV0LmF0dHIoJ211bHRpcGxlJykpIHtcblx0XHRcdFx0XHRvcHRpb25zLnB1c2goJzxvcHRpb24gdmFsdWU9XCJcIiBzZWxlY3RlZD1cInNlbGVjdGVkXCI+PC9vcHRpb24+Jyk7XG5cdFx0XHRcdH1cblx0XHRcdFx0c2VsZi4kaW5wdXQuaHRtbChvcHRpb25zLmpvaW4oJycpKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHNlbGYuJGlucHV0LnZhbChzZWxmLmdldFZhbHVlKCkpO1xuXHRcdFx0XHRzZWxmLiRpbnB1dC5hdHRyKCd2YWx1ZScsc2VsZi4kaW5wdXQudmFsKCkpO1xuXHRcdFx0fVxuXHRcblx0XHRcdGlmIChzZWxmLmlzU2V0dXApIHtcblx0XHRcdFx0aWYgKCFvcHRzLnNpbGVudCkge1xuXHRcdFx0XHRcdHNlbGYudHJpZ2dlcignY2hhbmdlJywgc2VsZi4kaW5wdXQudmFsKCkpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSxcblx0XG5cdFx0LyoqXG5cdFx0ICogU2hvd3MvaGlkZSB0aGUgaW5wdXQgcGxhY2Vob2xkZXIgZGVwZW5kaW5nXG5cdFx0ICogb24gaWYgdGhlcmUgaXRlbXMgaW4gdGhlIGxpc3QgYWxyZWFkeS5cblx0XHQgKi9cblx0XHR1cGRhdGVQbGFjZWhvbGRlcjogZnVuY3Rpb24oKSB7XG5cdFx0XHRpZiAoIXRoaXMuc2V0dGluZ3MucGxhY2Vob2xkZXIpIHJldHVybjtcblx0XHRcdHZhciAkaW5wdXQgPSB0aGlzLiRjb250cm9sX2lucHV0O1xuXHRcblx0XHRcdGlmICh0aGlzLml0ZW1zLmxlbmd0aCkge1xuXHRcdFx0XHQkaW5wdXQucmVtb3ZlQXR0cigncGxhY2Vob2xkZXInKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdCRpbnB1dC5hdHRyKCdwbGFjZWhvbGRlcicsIHRoaXMuc2V0dGluZ3MucGxhY2Vob2xkZXIpO1xuXHRcdFx0fVxuXHRcdFx0JGlucHV0LnRyaWdnZXJIYW5kbGVyKCd1cGRhdGUnLCB7Zm9yY2U6IHRydWV9KTtcblx0XHR9LFxuXHRcblx0XHQvKipcblx0XHQgKiBTaG93cyB0aGUgYXV0b2NvbXBsZXRlIGRyb3Bkb3duIGNvbnRhaW5pbmdcblx0XHQgKiB0aGUgYXZhaWxhYmxlIG9wdGlvbnMuXG5cdFx0ICovXG5cdFx0b3BlbjogZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgc2VsZiA9IHRoaXM7XG5cdFxuXHRcdFx0aWYgKHNlbGYuaXNMb2NrZWQgfHwgc2VsZi5pc09wZW4gfHwgKHNlbGYuc2V0dGluZ3MubW9kZSA9PT0gJ211bHRpJyAmJiBzZWxmLmlzRnVsbCgpKSkgcmV0dXJuO1xuXHRcdFx0c2VsZi5mb2N1cygpO1xuXHRcdFx0c2VsZi5pc09wZW4gPSB0cnVlO1xuXHRcdFx0c2VsZi5yZWZyZXNoU3RhdGUoKTtcblx0XHRcdHNlbGYuJGRyb3Bkb3duLmNzcyh7dmlzaWJpbGl0eTogJ2hpZGRlbicsIGRpc3BsYXk6ICdibG9jayd9KTtcblx0XHRcdHNlbGYucG9zaXRpb25Ecm9wZG93bigpO1xuXHRcdFx0c2VsZi4kZHJvcGRvd24uY3NzKHt2aXNpYmlsaXR5OiAndmlzaWJsZSd9KTtcblx0XHRcdHNlbGYudHJpZ2dlcignZHJvcGRvd25fb3BlbicsIHNlbGYuJGRyb3Bkb3duKTtcblx0XHR9LFxuXHRcblx0XHQvKipcblx0XHQgKiBDbG9zZXMgdGhlIGF1dG9jb21wbGV0ZSBkcm9wZG93biBtZW51LlxuXHRcdCAqL1xuXHRcdGNsb3NlOiBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBzZWxmID0gdGhpcztcblx0XHRcdHZhciB0cmlnZ2VyID0gc2VsZi5pc09wZW47XG5cdFxuXHRcdFx0aWYgKHNlbGYuc2V0dGluZ3MubW9kZSA9PT0gJ3NpbmdsZScgJiYgc2VsZi5pdGVtcy5sZW5ndGgpIHtcblx0XHRcdFx0c2VsZi5oaWRlSW5wdXQoKTtcblx0XHRcdFx0c2VsZi4kY29udHJvbF9pbnB1dC5ibHVyKCk7IC8vIGNsb3NlIGtleWJvYXJkIG9uIGlPU1xuXHRcdFx0fVxuXHRcblx0XHRcdHNlbGYuaXNPcGVuID0gZmFsc2U7XG5cdFx0XHRzZWxmLiRkcm9wZG93bi5oaWRlKCk7XG5cdFx0XHRzZWxmLnNldEFjdGl2ZU9wdGlvbihudWxsKTtcblx0XHRcdHNlbGYucmVmcmVzaFN0YXRlKCk7XG5cdFxuXHRcdFx0aWYgKHRyaWdnZXIpIHNlbGYudHJpZ2dlcignZHJvcGRvd25fY2xvc2UnLCBzZWxmLiRkcm9wZG93bik7XG5cdFx0fSxcblx0XG5cdFx0LyoqXG5cdFx0ICogQ2FsY3VsYXRlcyBhbmQgYXBwbGllcyB0aGUgYXBwcm9wcmlhdGVcblx0XHQgKiBwb3NpdGlvbiBvZiB0aGUgZHJvcGRvd24uXG5cdFx0ICovXG5cdFx0cG9zaXRpb25Ecm9wZG93bjogZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgJGNvbnRyb2wgPSB0aGlzLiRjb250cm9sO1xuXHRcdFx0dmFyIG9mZnNldCA9IHRoaXMuc2V0dGluZ3MuZHJvcGRvd25QYXJlbnQgPT09ICdib2R5JyA/ICRjb250cm9sLm9mZnNldCgpIDogJGNvbnRyb2wucG9zaXRpb24oKTtcblx0XHRcdG9mZnNldC50b3AgKz0gJGNvbnRyb2wub3V0ZXJIZWlnaHQodHJ1ZSk7XG5cdFxuXHRcdFx0dGhpcy4kZHJvcGRvd24uY3NzKHtcblx0XHRcdFx0d2lkdGggOiAkY29udHJvbC5vdXRlcldpZHRoKCksXG5cdFx0XHRcdHRvcCAgIDogb2Zmc2V0LnRvcCxcblx0XHRcdFx0bGVmdCAgOiBvZmZzZXQubGVmdFxuXHRcdFx0fSk7XG5cdFx0fSxcblx0XG5cdFx0LyoqXG5cdFx0ICogUmVzZXRzIC8gY2xlYXJzIGFsbCBzZWxlY3RlZCBpdGVtc1xuXHRcdCAqIGZyb20gdGhlIGNvbnRyb2wuXG5cdFx0ICpcblx0XHQgKiBAcGFyYW0ge2Jvb2xlYW59IHNpbGVudFxuXHRcdCAqL1xuXHRcdGNsZWFyOiBmdW5jdGlvbihzaWxlbnQpIHtcblx0XHRcdHZhciBzZWxmID0gdGhpcztcblx0XG5cdFx0XHRpZiAoIXNlbGYuaXRlbXMubGVuZ3RoKSByZXR1cm47XG5cdFx0XHRzZWxmLiRjb250cm9sLmNoaWxkcmVuKCc6bm90KGlucHV0KScpLnJlbW92ZSgpO1xuXHRcdFx0c2VsZi5pdGVtcyA9IFtdO1xuXHRcdFx0c2VsZi5sYXN0UXVlcnkgPSBudWxsO1xuXHRcdFx0c2VsZi5zZXRDYXJldCgwKTtcblx0XHRcdHNlbGYuc2V0QWN0aXZlSXRlbShudWxsKTtcblx0XHRcdHNlbGYudXBkYXRlUGxhY2Vob2xkZXIoKTtcblx0XHRcdHNlbGYudXBkYXRlT3JpZ2luYWxJbnB1dCh7c2lsZW50OiBzaWxlbnR9KTtcblx0XHRcdHNlbGYucmVmcmVzaFN0YXRlKCk7XG5cdFx0XHRzZWxmLnNob3dJbnB1dCgpO1xuXHRcdFx0c2VsZi50cmlnZ2VyKCdjbGVhcicpO1xuXHRcdH0sXG5cdFxuXHRcdC8qKlxuXHRcdCAqIEEgaGVscGVyIG1ldGhvZCBmb3IgaW5zZXJ0aW5nIGFuIGVsZW1lbnRcblx0XHQgKiBhdCB0aGUgY3VycmVudCBjYXJldCBwb3NpdGlvbi5cblx0XHQgKlxuXHRcdCAqIEBwYXJhbSB7b2JqZWN0fSAkZWxcblx0XHQgKi9cblx0XHRpbnNlcnRBdENhcmV0OiBmdW5jdGlvbigkZWwpIHtcblx0XHRcdHZhciBjYXJldCA9IE1hdGgubWluKHRoaXMuY2FyZXRQb3MsIHRoaXMuaXRlbXMubGVuZ3RoKTtcblx0XHRcdGlmIChjYXJldCA9PT0gMCkge1xuXHRcdFx0XHR0aGlzLiRjb250cm9sLnByZXBlbmQoJGVsKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdCQodGhpcy4kY29udHJvbFswXS5jaGlsZE5vZGVzW2NhcmV0XSkuYmVmb3JlKCRlbCk7XG5cdFx0XHR9XG5cdFx0XHR0aGlzLnNldENhcmV0KGNhcmV0ICsgMSk7XG5cdFx0fSxcblx0XG5cdFx0LyoqXG5cdFx0ICogUmVtb3ZlcyB0aGUgY3VycmVudCBzZWxlY3RlZCBpdGVtKHMpLlxuXHRcdCAqXG5cdFx0ICogQHBhcmFtIHtvYmplY3R9IGUgKG9wdGlvbmFsKVxuXHRcdCAqIEByZXR1cm5zIHtib29sZWFufVxuXHRcdCAqL1xuXHRcdGRlbGV0ZVNlbGVjdGlvbjogZnVuY3Rpb24oZSkge1xuXHRcdFx0dmFyIGksIG4sIGRpcmVjdGlvbiwgc2VsZWN0aW9uLCB2YWx1ZXMsIGNhcmV0LCBvcHRpb25fc2VsZWN0LCAkb3B0aW9uX3NlbGVjdCwgJHRhaWw7XG5cdFx0XHR2YXIgc2VsZiA9IHRoaXM7XG5cdFxuXHRcdFx0ZGlyZWN0aW9uID0gKGUgJiYgZS5rZXlDb2RlID09PSBLRVlfQkFDS1NQQUNFKSA/IC0xIDogMTtcblx0XHRcdHNlbGVjdGlvbiA9IGdldFNlbGVjdGlvbihzZWxmLiRjb250cm9sX2lucHV0WzBdKTtcblx0XG5cdFx0XHRpZiAoc2VsZi4kYWN0aXZlT3B0aW9uICYmICFzZWxmLnNldHRpbmdzLmhpZGVTZWxlY3RlZCkge1xuXHRcdFx0XHRvcHRpb25fc2VsZWN0ID0gc2VsZi5nZXRBZGphY2VudE9wdGlvbihzZWxmLiRhY3RpdmVPcHRpb24sIC0xKS5hdHRyKCdkYXRhLXZhbHVlJyk7XG5cdFx0XHR9XG5cdFxuXHRcdFx0Ly8gZGV0ZXJtaW5lIGl0ZW1zIHRoYXQgd2lsbCBiZSByZW1vdmVkXG5cdFx0XHR2YWx1ZXMgPSBbXTtcblx0XG5cdFx0XHRpZiAoc2VsZi4kYWN0aXZlSXRlbXMubGVuZ3RoKSB7XG5cdFx0XHRcdCR0YWlsID0gc2VsZi4kY29udHJvbC5jaGlsZHJlbignLmFjdGl2ZTonICsgKGRpcmVjdGlvbiA+IDAgPyAnbGFzdCcgOiAnZmlyc3QnKSk7XG5cdFx0XHRcdGNhcmV0ID0gc2VsZi4kY29udHJvbC5jaGlsZHJlbignOm5vdChpbnB1dCknKS5pbmRleCgkdGFpbCk7XG5cdFx0XHRcdGlmIChkaXJlY3Rpb24gPiAwKSB7IGNhcmV0Kys7IH1cblx0XG5cdFx0XHRcdGZvciAoaSA9IDAsIG4gPSBzZWxmLiRhY3RpdmVJdGVtcy5sZW5ndGg7IGkgPCBuOyBpKyspIHtcblx0XHRcdFx0XHR2YWx1ZXMucHVzaCgkKHNlbGYuJGFjdGl2ZUl0ZW1zW2ldKS5hdHRyKCdkYXRhLXZhbHVlJykpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGlmIChlKSB7XG5cdFx0XHRcdFx0ZS5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdFx0XHRcdGUuc3RvcFByb3BhZ2F0aW9uKCk7XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSBpZiAoKHNlbGYuaXNGb2N1c2VkIHx8IHNlbGYuc2V0dGluZ3MubW9kZSA9PT0gJ3NpbmdsZScpICYmIHNlbGYuaXRlbXMubGVuZ3RoKSB7XG5cdFx0XHRcdGlmIChkaXJlY3Rpb24gPCAwICYmIHNlbGVjdGlvbi5zdGFydCA9PT0gMCAmJiBzZWxlY3Rpb24ubGVuZ3RoID09PSAwKSB7XG5cdFx0XHRcdFx0dmFsdWVzLnB1c2goc2VsZi5pdGVtc1tzZWxmLmNhcmV0UG9zIC0gMV0pO1xuXHRcdFx0XHR9IGVsc2UgaWYgKGRpcmVjdGlvbiA+IDAgJiYgc2VsZWN0aW9uLnN0YXJ0ID09PSBzZWxmLiRjb250cm9sX2lucHV0LnZhbCgpLmxlbmd0aCkge1xuXHRcdFx0XHRcdHZhbHVlcy5wdXNoKHNlbGYuaXRlbXNbc2VsZi5jYXJldFBvc10pO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFxuXHRcdFx0Ly8gYWxsb3cgdGhlIGNhbGxiYWNrIHRvIGFib3J0XG5cdFx0XHRpZiAoIXZhbHVlcy5sZW5ndGggfHwgKHR5cGVvZiBzZWxmLnNldHRpbmdzLm9uRGVsZXRlID09PSAnZnVuY3Rpb24nICYmIHNlbGYuc2V0dGluZ3Mub25EZWxldGUuYXBwbHkoc2VsZiwgW3ZhbHVlc10pID09PSBmYWxzZSkpIHtcblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0fVxuXHRcblx0XHRcdC8vIHBlcmZvcm0gcmVtb3ZhbFxuXHRcdFx0aWYgKHR5cGVvZiBjYXJldCAhPT0gJ3VuZGVmaW5lZCcpIHtcblx0XHRcdFx0c2VsZi5zZXRDYXJldChjYXJldCk7XG5cdFx0XHR9XG5cdFx0XHR3aGlsZSAodmFsdWVzLmxlbmd0aCkge1xuXHRcdFx0XHRzZWxmLnJlbW92ZUl0ZW0odmFsdWVzLnBvcCgpKTtcblx0XHRcdH1cblx0XG5cdFx0XHRzZWxmLnNob3dJbnB1dCgpO1xuXHRcdFx0c2VsZi5wb3NpdGlvbkRyb3Bkb3duKCk7XG5cdFx0XHRzZWxmLnJlZnJlc2hPcHRpb25zKHRydWUpO1xuXHRcblx0XHRcdC8vIHNlbGVjdCBwcmV2aW91cyBvcHRpb25cblx0XHRcdGlmIChvcHRpb25fc2VsZWN0KSB7XG5cdFx0XHRcdCRvcHRpb25fc2VsZWN0ID0gc2VsZi5nZXRPcHRpb24ob3B0aW9uX3NlbGVjdCk7XG5cdFx0XHRcdGlmICgkb3B0aW9uX3NlbGVjdC5sZW5ndGgpIHtcblx0XHRcdFx0XHRzZWxmLnNldEFjdGl2ZU9wdGlvbigkb3B0aW9uX3NlbGVjdCk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XG5cdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHR9LFxuXHRcblx0XHQvKipcblx0XHQgKiBTZWxlY3RzIHRoZSBwcmV2aW91cyAvIG5leHQgaXRlbSAoZGVwZW5kaW5nXG5cdFx0ICogb24gdGhlIGBkaXJlY3Rpb25gIGFyZ3VtZW50KS5cblx0XHQgKlxuXHRcdCAqID4gMCAtIHJpZ2h0XG5cdFx0ICogPCAwIC0gbGVmdFxuXHRcdCAqXG5cdFx0ICogQHBhcmFtIHtpbnR9IGRpcmVjdGlvblxuXHRcdCAqIEBwYXJhbSB7b2JqZWN0fSBlIChvcHRpb25hbClcblx0XHQgKi9cblx0XHRhZHZhbmNlU2VsZWN0aW9uOiBmdW5jdGlvbihkaXJlY3Rpb24sIGUpIHtcblx0XHRcdHZhciB0YWlsLCBzZWxlY3Rpb24sIGlkeCwgdmFsdWVMZW5ndGgsIGN1cnNvckF0RWRnZSwgJHRhaWw7XG5cdFx0XHR2YXIgc2VsZiA9IHRoaXM7XG5cdFxuXHRcdFx0aWYgKGRpcmVjdGlvbiA9PT0gMCkgcmV0dXJuO1xuXHRcdFx0aWYgKHNlbGYucnRsKSBkaXJlY3Rpb24gKj0gLTE7XG5cdFxuXHRcdFx0dGFpbCA9IGRpcmVjdGlvbiA+IDAgPyAnbGFzdCcgOiAnZmlyc3QnO1xuXHRcdFx0c2VsZWN0aW9uID0gZ2V0U2VsZWN0aW9uKHNlbGYuJGNvbnRyb2xfaW5wdXRbMF0pO1xuXHRcblx0XHRcdGlmIChzZWxmLmlzRm9jdXNlZCAmJiAhc2VsZi5pc0lucHV0SGlkZGVuKSB7XG5cdFx0XHRcdHZhbHVlTGVuZ3RoID0gc2VsZi4kY29udHJvbF9pbnB1dC52YWwoKS5sZW5ndGg7XG5cdFx0XHRcdGN1cnNvckF0RWRnZSA9IGRpcmVjdGlvbiA8IDBcblx0XHRcdFx0XHQ/IHNlbGVjdGlvbi5zdGFydCA9PT0gMCAmJiBzZWxlY3Rpb24ubGVuZ3RoID09PSAwXG5cdFx0XHRcdFx0OiBzZWxlY3Rpb24uc3RhcnQgPT09IHZhbHVlTGVuZ3RoO1xuXHRcblx0XHRcdFx0aWYgKGN1cnNvckF0RWRnZSAmJiAhdmFsdWVMZW5ndGgpIHtcblx0XHRcdFx0XHRzZWxmLmFkdmFuY2VDYXJldChkaXJlY3Rpb24sIGUpO1xuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHQkdGFpbCA9IHNlbGYuJGNvbnRyb2wuY2hpbGRyZW4oJy5hY3RpdmU6JyArIHRhaWwpO1xuXHRcdFx0XHRpZiAoJHRhaWwubGVuZ3RoKSB7XG5cdFx0XHRcdFx0aWR4ID0gc2VsZi4kY29udHJvbC5jaGlsZHJlbignOm5vdChpbnB1dCknKS5pbmRleCgkdGFpbCk7XG5cdFx0XHRcdFx0c2VsZi5zZXRBY3RpdmVJdGVtKG51bGwpO1xuXHRcdFx0XHRcdHNlbGYuc2V0Q2FyZXQoZGlyZWN0aW9uID4gMCA/IGlkeCArIDEgOiBpZHgpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSxcblx0XG5cdFx0LyoqXG5cdFx0ICogTW92ZXMgdGhlIGNhcmV0IGxlZnQgLyByaWdodC5cblx0XHQgKlxuXHRcdCAqIEBwYXJhbSB7aW50fSBkaXJlY3Rpb25cblx0XHQgKiBAcGFyYW0ge29iamVjdH0gZSAob3B0aW9uYWwpXG5cdFx0ICovXG5cdFx0YWR2YW5jZUNhcmV0OiBmdW5jdGlvbihkaXJlY3Rpb24sIGUpIHtcblx0XHRcdHZhciBzZWxmID0gdGhpcywgZm4sICRhZGo7XG5cdFxuXHRcdFx0aWYgKGRpcmVjdGlvbiA9PT0gMCkgcmV0dXJuO1xuXHRcblx0XHRcdGZuID0gZGlyZWN0aW9uID4gMCA/ICduZXh0JyA6ICdwcmV2Jztcblx0XHRcdGlmIChzZWxmLmlzU2hpZnREb3duKSB7XG5cdFx0XHRcdCRhZGogPSBzZWxmLiRjb250cm9sX2lucHV0W2ZuXSgpO1xuXHRcdFx0XHRpZiAoJGFkai5sZW5ndGgpIHtcblx0XHRcdFx0XHRzZWxmLmhpZGVJbnB1dCgpO1xuXHRcdFx0XHRcdHNlbGYuc2V0QWN0aXZlSXRlbSgkYWRqKTtcblx0XHRcdFx0XHRlICYmIGUucHJldmVudERlZmF1bHQoKTtcblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0c2VsZi5zZXRDYXJldChzZWxmLmNhcmV0UG9zICsgZGlyZWN0aW9uKTtcblx0XHRcdH1cblx0XHR9LFxuXHRcblx0XHQvKipcblx0XHQgKiBNb3ZlcyB0aGUgY2FyZXQgdG8gdGhlIHNwZWNpZmllZCBpbmRleC5cblx0XHQgKlxuXHRcdCAqIEBwYXJhbSB7aW50fSBpXG5cdFx0ICovXG5cdFx0c2V0Q2FyZXQ6IGZ1bmN0aW9uKGkpIHtcblx0XHRcdHZhciBzZWxmID0gdGhpcztcblx0XG5cdFx0XHRpZiAoc2VsZi5zZXR0aW5ncy5tb2RlID09PSAnc2luZ2xlJykge1xuXHRcdFx0XHRpID0gc2VsZi5pdGVtcy5sZW5ndGg7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRpID0gTWF0aC5tYXgoMCwgTWF0aC5taW4oc2VsZi5pdGVtcy5sZW5ndGgsIGkpKTtcblx0XHRcdH1cblx0XG5cdFx0XHRpZighc2VsZi5pc1BlbmRpbmcpIHtcblx0XHRcdFx0Ly8gdGhlIGlucHV0IG11c3QgYmUgbW92ZWQgYnkgbGVhdmluZyBpdCBpbiBwbGFjZSBhbmQgbW92aW5nIHRoZVxuXHRcdFx0XHQvLyBzaWJsaW5ncywgZHVlIHRvIHRoZSBmYWN0IHRoYXQgZm9jdXMgY2Fubm90IGJlIHJlc3RvcmVkIG9uY2UgbG9zdFxuXHRcdFx0XHQvLyBvbiBtb2JpbGUgd2Via2l0IGRldmljZXNcblx0XHRcdFx0dmFyIGosIG4sIGZuLCAkY2hpbGRyZW4sICRjaGlsZDtcblx0XHRcdFx0JGNoaWxkcmVuID0gc2VsZi4kY29udHJvbC5jaGlsZHJlbignOm5vdChpbnB1dCknKTtcblx0XHRcdFx0Zm9yIChqID0gMCwgbiA9ICRjaGlsZHJlbi5sZW5ndGg7IGogPCBuOyBqKyspIHtcblx0XHRcdFx0XHQkY2hpbGQgPSAkKCRjaGlsZHJlbltqXSkuZGV0YWNoKCk7XG5cdFx0XHRcdFx0aWYgKGogPCAgaSkge1xuXHRcdFx0XHRcdFx0c2VsZi4kY29udHJvbF9pbnB1dC5iZWZvcmUoJGNoaWxkKTtcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0c2VsZi4kY29udHJvbC5hcHBlbmQoJGNoaWxkKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XG5cdFx0XHRzZWxmLmNhcmV0UG9zID0gaTtcblx0XHR9LFxuXHRcblx0XHQvKipcblx0XHQgKiBEaXNhYmxlcyB1c2VyIGlucHV0IG9uIHRoZSBjb250cm9sLiBVc2VkIHdoaWxlXG5cdFx0ICogaXRlbXMgYXJlIGJlaW5nIGFzeW5jaHJvbm91c2x5IGNyZWF0ZWQuXG5cdFx0ICovXG5cdFx0bG9jazogZnVuY3Rpb24oKSB7XG5cdFx0XHR0aGlzLmNsb3NlKCk7XG5cdFx0XHR0aGlzLmlzTG9ja2VkID0gdHJ1ZTtcblx0XHRcdHRoaXMucmVmcmVzaFN0YXRlKCk7XG5cdFx0fSxcblx0XG5cdFx0LyoqXG5cdFx0ICogUmUtZW5hYmxlcyB1c2VyIGlucHV0IG9uIHRoZSBjb250cm9sLlxuXHRcdCAqL1xuXHRcdHVubG9jazogZnVuY3Rpb24oKSB7XG5cdFx0XHR0aGlzLmlzTG9ja2VkID0gZmFsc2U7XG5cdFx0XHR0aGlzLnJlZnJlc2hTdGF0ZSgpO1xuXHRcdH0sXG5cdFxuXHRcdC8qKlxuXHRcdCAqIERpc2FibGVzIHVzZXIgaW5wdXQgb24gdGhlIGNvbnRyb2wgY29tcGxldGVseS5cblx0XHQgKiBXaGlsZSBkaXNhYmxlZCwgaXQgY2Fubm90IHJlY2VpdmUgZm9jdXMuXG5cdFx0ICovXG5cdFx0ZGlzYWJsZTogZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgc2VsZiA9IHRoaXM7XG5cdFx0XHRzZWxmLiRpbnB1dC5wcm9wKCdkaXNhYmxlZCcsIHRydWUpO1xuXHRcdFx0c2VsZi4kY29udHJvbF9pbnB1dC5wcm9wKCdkaXNhYmxlZCcsIHRydWUpLnByb3AoJ3RhYmluZGV4JywgLTEpO1xuXHRcdFx0c2VsZi5pc0Rpc2FibGVkID0gdHJ1ZTtcblx0XHRcdHNlbGYubG9jaygpO1xuXHRcdH0sXG5cdFxuXHRcdC8qKlxuXHRcdCAqIEVuYWJsZXMgdGhlIGNvbnRyb2wgc28gdGhhdCBpdCBjYW4gcmVzcG9uZFxuXHRcdCAqIHRvIGZvY3VzIGFuZCB1c2VyIGlucHV0LlxuXHRcdCAqL1xuXHRcdGVuYWJsZTogZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgc2VsZiA9IHRoaXM7XG5cdFx0XHRzZWxmLiRpbnB1dC5wcm9wKCdkaXNhYmxlZCcsIGZhbHNlKTtcblx0XHRcdHNlbGYuJGNvbnRyb2xfaW5wdXQucHJvcCgnZGlzYWJsZWQnLCBmYWxzZSkucHJvcCgndGFiaW5kZXgnLCBzZWxmLnRhYkluZGV4KTtcblx0XHRcdHNlbGYuaXNEaXNhYmxlZCA9IGZhbHNlO1xuXHRcdFx0c2VsZi51bmxvY2soKTtcblx0XHR9LFxuXHRcblx0XHQvKipcblx0XHQgKiBDb21wbGV0ZWx5IGRlc3Ryb3lzIHRoZSBjb250cm9sIGFuZFxuXHRcdCAqIHVuYmluZHMgYWxsIGV2ZW50IGxpc3RlbmVycyBzbyB0aGF0IGl0IGNhblxuXHRcdCAqIGJlIGdhcmJhZ2UgY29sbGVjdGVkLlxuXHRcdCAqL1xuXHRcdGRlc3Ryb3k6IGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIHNlbGYgPSB0aGlzO1xuXHRcdFx0dmFyIGV2ZW50TlMgPSBzZWxmLmV2ZW50TlM7XG5cdFx0XHR2YXIgcmV2ZXJ0U2V0dGluZ3MgPSBzZWxmLnJldmVydFNldHRpbmdzO1xuXHRcblx0XHRcdHNlbGYudHJpZ2dlcignZGVzdHJveScpO1xuXHRcdFx0c2VsZi5vZmYoKTtcblx0XHRcdHNlbGYuJHdyYXBwZXIucmVtb3ZlKCk7XG5cdFx0XHRzZWxmLiRkcm9wZG93bi5yZW1vdmUoKTtcblx0XG5cdFx0XHRzZWxmLiRpbnB1dFxuXHRcdFx0XHQuaHRtbCgnJylcblx0XHRcdFx0LmFwcGVuZChyZXZlcnRTZXR0aW5ncy4kY2hpbGRyZW4pXG5cdFx0XHRcdC5yZW1vdmVBdHRyKCd0YWJpbmRleCcpXG5cdFx0XHRcdC5yZW1vdmVDbGFzcygnc2VsZWN0aXplZCcpXG5cdFx0XHRcdC5hdHRyKHt0YWJpbmRleDogcmV2ZXJ0U2V0dGluZ3MudGFiaW5kZXh9KVxuXHRcdFx0XHQuc2hvdygpO1xuXHRcblx0XHRcdHNlbGYuJGNvbnRyb2xfaW5wdXQucmVtb3ZlRGF0YSgnZ3JvdycpO1xuXHRcdFx0c2VsZi4kaW5wdXQucmVtb3ZlRGF0YSgnc2VsZWN0aXplJyk7XG5cdFxuXHRcdFx0JCh3aW5kb3cpLm9mZihldmVudE5TKTtcblx0XHRcdCQoZG9jdW1lbnQpLm9mZihldmVudE5TKTtcblx0XHRcdCQoZG9jdW1lbnQuYm9keSkub2ZmKGV2ZW50TlMpO1xuXHRcblx0XHRcdGRlbGV0ZSBzZWxmLiRpbnB1dFswXS5zZWxlY3RpemU7XG5cdFx0fSxcblx0XG5cdFx0LyoqXG5cdFx0ICogQSBoZWxwZXIgbWV0aG9kIGZvciByZW5kZXJpbmcgXCJpdGVtXCIgYW5kXG5cdFx0ICogXCJvcHRpb25cIiB0ZW1wbGF0ZXMsIGdpdmVuIHRoZSBkYXRhLlxuXHRcdCAqXG5cdFx0ICogQHBhcmFtIHtzdHJpbmd9IHRlbXBsYXRlTmFtZVxuXHRcdCAqIEBwYXJhbSB7b2JqZWN0fSBkYXRhXG5cdFx0ICogQHJldHVybnMge3N0cmluZ31cblx0XHQgKi9cblx0XHRyZW5kZXI6IGZ1bmN0aW9uKHRlbXBsYXRlTmFtZSwgZGF0YSkge1xuXHRcdFx0dmFyIHZhbHVlLCBpZCwgbGFiZWw7XG5cdFx0XHR2YXIgaHRtbCA9ICcnO1xuXHRcdFx0dmFyIGNhY2hlID0gZmFsc2U7XG5cdFx0XHR2YXIgc2VsZiA9IHRoaXM7XG5cdFx0XHR2YXIgcmVnZXhfdGFnID0gL15bXFx0IFxcclxcbl0qPChbYS16XVthLXowLTlcXC1fXSooPzpcXDpbYS16XVthLXowLTlcXC1fXSopPykvaTtcblx0XG5cdFx0XHRpZiAodGVtcGxhdGVOYW1lID09PSAnb3B0aW9uJyB8fCB0ZW1wbGF0ZU5hbWUgPT09ICdpdGVtJykge1xuXHRcdFx0XHR2YWx1ZSA9IGhhc2hfa2V5KGRhdGFbc2VsZi5zZXR0aW5ncy52YWx1ZUZpZWxkXSk7XG5cdFx0XHRcdGNhY2hlID0gISF2YWx1ZTtcblx0XHRcdH1cblx0XG5cdFx0XHQvLyBwdWxsIG1hcmt1cCBmcm9tIGNhY2hlIGlmIGl0IGV4aXN0c1xuXHRcdFx0aWYgKGNhY2hlKSB7XG5cdFx0XHRcdGlmICghaXNzZXQoc2VsZi5yZW5kZXJDYWNoZVt0ZW1wbGF0ZU5hbWVdKSkge1xuXHRcdFx0XHRcdHNlbGYucmVuZGVyQ2FjaGVbdGVtcGxhdGVOYW1lXSA9IHt9O1xuXHRcdFx0XHR9XG5cdFx0XHRcdGlmIChzZWxmLnJlbmRlckNhY2hlW3RlbXBsYXRlTmFtZV0uaGFzT3duUHJvcGVydHkodmFsdWUpKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHNlbGYucmVuZGVyQ2FjaGVbdGVtcGxhdGVOYW1lXVt2YWx1ZV07XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XG5cdFx0XHQvLyByZW5kZXIgbWFya3VwXG5cdFx0XHRodG1sID0gJChzZWxmLnNldHRpbmdzLnJlbmRlclt0ZW1wbGF0ZU5hbWVdLmFwcGx5KHRoaXMsIFtkYXRhLCBlc2NhcGVfaHRtbF0pKTtcblx0XG5cdFx0XHQvLyBhZGQgbWFuZGF0b3J5IGF0dHJpYnV0ZXNcblx0XHRcdGlmICh0ZW1wbGF0ZU5hbWUgPT09ICdvcHRpb24nIHx8IHRlbXBsYXRlTmFtZSA9PT0gJ29wdGlvbl9jcmVhdGUnKSB7XG5cdFx0XHRcdGh0bWwuYXR0cignZGF0YS1zZWxlY3RhYmxlJywgJycpO1xuXHRcdFx0fVxuXHRcdFx0ZWxzZSBpZiAodGVtcGxhdGVOYW1lID09PSAnb3B0Z3JvdXAnKSB7XG5cdFx0XHRcdGlkID0gZGF0YVtzZWxmLnNldHRpbmdzLm9wdGdyb3VwVmFsdWVGaWVsZF0gfHwgJyc7XG5cdFx0XHRcdGh0bWwuYXR0cignZGF0YS1ncm91cCcsIGlkKTtcblx0XHRcdH1cblx0XHRcdGlmICh0ZW1wbGF0ZU5hbWUgPT09ICdvcHRpb24nIHx8IHRlbXBsYXRlTmFtZSA9PT0gJ2l0ZW0nKSB7XG5cdFx0XHRcdGh0bWwuYXR0cignZGF0YS12YWx1ZScsIHZhbHVlIHx8ICcnKTtcblx0XHRcdH1cblx0XG5cdFx0XHQvLyB1cGRhdGUgY2FjaGVcblx0XHRcdGlmIChjYWNoZSkge1xuXHRcdFx0XHRzZWxmLnJlbmRlckNhY2hlW3RlbXBsYXRlTmFtZV1bdmFsdWVdID0gaHRtbFswXTtcblx0XHRcdH1cblx0XG5cdFx0XHRyZXR1cm4gaHRtbFswXTtcblx0XHR9LFxuXHRcblx0XHQvKipcblx0XHQgKiBDbGVhcnMgdGhlIHJlbmRlciBjYWNoZSBmb3IgYSB0ZW1wbGF0ZS4gSWZcblx0XHQgKiBubyB0ZW1wbGF0ZSBpcyBnaXZlbiwgY2xlYXJzIGFsbCByZW5kZXJcblx0XHQgKiBjYWNoZXMuXG5cdFx0ICpcblx0XHQgKiBAcGFyYW0ge3N0cmluZ30gdGVtcGxhdGVOYW1lXG5cdFx0ICovXG5cdFx0Y2xlYXJDYWNoZTogZnVuY3Rpb24odGVtcGxhdGVOYW1lKSB7XG5cdFx0XHR2YXIgc2VsZiA9IHRoaXM7XG5cdFx0XHRpZiAodHlwZW9mIHRlbXBsYXRlTmFtZSA9PT0gJ3VuZGVmaW5lZCcpIHtcblx0XHRcdFx0c2VsZi5yZW5kZXJDYWNoZSA9IHt9O1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0ZGVsZXRlIHNlbGYucmVuZGVyQ2FjaGVbdGVtcGxhdGVOYW1lXTtcblx0XHRcdH1cblx0XHR9LFxuXHRcblx0XHQvKipcblx0XHQgKiBEZXRlcm1pbmVzIHdoZXRoZXIgb3Igbm90IHRvIGRpc3BsYXkgdGhlXG5cdFx0ICogY3JlYXRlIGl0ZW0gcHJvbXB0LCBnaXZlbiBhIHVzZXIgaW5wdXQuXG5cdFx0ICpcblx0XHQgKiBAcGFyYW0ge3N0cmluZ30gaW5wdXRcblx0XHQgKiBAcmV0dXJuIHtib29sZWFufVxuXHRcdCAqL1xuXHRcdGNhbkNyZWF0ZTogZnVuY3Rpb24oaW5wdXQpIHtcblx0XHRcdHZhciBzZWxmID0gdGhpcztcblx0XHRcdGlmICghc2VsZi5zZXR0aW5ncy5jcmVhdGUpIHJldHVybiBmYWxzZTtcblx0XHRcdHZhciBmaWx0ZXIgPSBzZWxmLnNldHRpbmdzLmNyZWF0ZUZpbHRlcjtcblx0XHRcdHJldHVybiBpbnB1dC5sZW5ndGhcblx0XHRcdFx0JiYgKHR5cGVvZiBmaWx0ZXIgIT09ICdmdW5jdGlvbicgfHwgZmlsdGVyLmFwcGx5KHNlbGYsIFtpbnB1dF0pKVxuXHRcdFx0XHQmJiAodHlwZW9mIGZpbHRlciAhPT0gJ3N0cmluZycgfHwgbmV3IFJlZ0V4cChmaWx0ZXIpLnRlc3QoaW5wdXQpKVxuXHRcdFx0XHQmJiAoIShmaWx0ZXIgaW5zdGFuY2VvZiBSZWdFeHApIHx8IGZpbHRlci50ZXN0KGlucHV0KSk7XG5cdFx0fVxuXHRcblx0fSk7XG5cdFxuXHRcblx0U2VsZWN0aXplLmNvdW50ID0gMDtcblx0U2VsZWN0aXplLmRlZmF1bHRzID0ge1xuXHRcdG9wdGlvbnM6IFtdLFxuXHRcdG9wdGdyb3VwczogW10sXG5cdFxuXHRcdHBsdWdpbnM6IFtdLFxuXHRcdGRlbGltaXRlcjogJywnLFxuXHRcdHNwbGl0T246IG51bGwsIC8vIHJlZ2V4cCBvciBzdHJpbmcgZm9yIHNwbGl0dGluZyB1cCB2YWx1ZXMgZnJvbSBhIHBhc3RlIGNvbW1hbmRcblx0XHRwZXJzaXN0OiB0cnVlLFxuXHRcdGRpYWNyaXRpY3M6IHRydWUsXG5cdFx0Y3JlYXRlOiBmYWxzZSxcblx0XHRjcmVhdGVPbkJsdXI6IGZhbHNlLFxuXHRcdGNyZWF0ZUZpbHRlcjogbnVsbCxcblx0XHRoaWdobGlnaHQ6IHRydWUsXG5cdFx0b3Blbk9uRm9jdXM6IHRydWUsXG5cdFx0bWF4T3B0aW9uczogMTAwMCxcblx0XHRtYXhJdGVtczogbnVsbCxcblx0XHRoaWRlU2VsZWN0ZWQ6IG51bGwsXG5cdFx0YWRkUHJlY2VkZW5jZTogZmFsc2UsXG5cdFx0c2VsZWN0T25UYWI6IGZhbHNlLFxuXHRcdHByZWxvYWQ6IGZhbHNlLFxuXHRcdGFsbG93RW1wdHlPcHRpb246IGZhbHNlLFxuXHRcdGNsb3NlQWZ0ZXJTZWxlY3Q6IGZhbHNlLFxuXHRcblx0XHRzY3JvbGxEdXJhdGlvbjogNjAsXG5cdFx0bG9hZFRocm90dGxlOiAzMDAsXG5cdFx0bG9hZGluZ0NsYXNzOiAnbG9hZGluZycsXG5cdFxuXHRcdGRhdGFBdHRyOiAnZGF0YS1kYXRhJyxcblx0XHRvcHRncm91cEZpZWxkOiAnb3B0Z3JvdXAnLFxuXHRcdHZhbHVlRmllbGQ6ICd2YWx1ZScsXG5cdFx0bGFiZWxGaWVsZDogJ3RleHQnLFxuXHRcdG9wdGdyb3VwTGFiZWxGaWVsZDogJ2xhYmVsJyxcblx0XHRvcHRncm91cFZhbHVlRmllbGQ6ICd2YWx1ZScsXG5cdFx0bG9ja09wdGdyb3VwT3JkZXI6IGZhbHNlLFxuXHRcblx0XHRzb3J0RmllbGQ6ICckb3JkZXInLFxuXHRcdHNlYXJjaEZpZWxkOiBbJ3RleHQnXSxcblx0XHRzZWFyY2hDb25qdW5jdGlvbjogJ2FuZCcsXG5cdFxuXHRcdG1vZGU6IG51bGwsXG5cdFx0d3JhcHBlckNsYXNzOiAnc2VsZWN0aXplLWNvbnRyb2wnLFxuXHRcdGlucHV0Q2xhc3M6ICdzZWxlY3RpemUtaW5wdXQnLFxuXHRcdGRyb3Bkb3duQ2xhc3M6ICdzZWxlY3RpemUtZHJvcGRvd24nLFxuXHRcdGRyb3Bkb3duQ29udGVudENsYXNzOiAnc2VsZWN0aXplLWRyb3Bkb3duLWNvbnRlbnQnLFxuXHRcblx0XHRkcm9wZG93blBhcmVudDogbnVsbCxcblx0XG5cdFx0Y29weUNsYXNzZXNUb0Ryb3Bkb3duOiB0cnVlLFxuXHRcblx0XHQvKlxuXHRcdGxvYWQgICAgICAgICAgICAgICAgIDogbnVsbCwgLy8gZnVuY3Rpb24ocXVlcnksIGNhbGxiYWNrKSB7IC4uLiB9XG5cdFx0c2NvcmUgICAgICAgICAgICAgICAgOiBudWxsLCAvLyBmdW5jdGlvbihzZWFyY2gpIHsgLi4uIH1cblx0XHRvbkluaXRpYWxpemUgICAgICAgICA6IG51bGwsIC8vIGZ1bmN0aW9uKCkgeyAuLi4gfVxuXHRcdG9uQ2hhbmdlICAgICAgICAgICAgIDogbnVsbCwgLy8gZnVuY3Rpb24odmFsdWUpIHsgLi4uIH1cblx0XHRvbkl0ZW1BZGQgICAgICAgICAgICA6IG51bGwsIC8vIGZ1bmN0aW9uKHZhbHVlLCAkaXRlbSkgeyAuLi4gfVxuXHRcdG9uSXRlbVJlbW92ZSAgICAgICAgIDogbnVsbCwgLy8gZnVuY3Rpb24odmFsdWUpIHsgLi4uIH1cblx0XHRvbkNsZWFyICAgICAgICAgICAgICA6IG51bGwsIC8vIGZ1bmN0aW9uKCkgeyAuLi4gfVxuXHRcdG9uT3B0aW9uQWRkICAgICAgICAgIDogbnVsbCwgLy8gZnVuY3Rpb24odmFsdWUsIGRhdGEpIHsgLi4uIH1cblx0XHRvbk9wdGlvblJlbW92ZSAgICAgICA6IG51bGwsIC8vIGZ1bmN0aW9uKHZhbHVlKSB7IC4uLiB9XG5cdFx0b25PcHRpb25DbGVhciAgICAgICAgOiBudWxsLCAvLyBmdW5jdGlvbigpIHsgLi4uIH1cblx0XHRvbk9wdGlvbkdyb3VwQWRkICAgICA6IG51bGwsIC8vIGZ1bmN0aW9uKGlkLCBkYXRhKSB7IC4uLiB9XG5cdFx0b25PcHRpb25Hcm91cFJlbW92ZSAgOiBudWxsLCAvLyBmdW5jdGlvbihpZCkgeyAuLi4gfVxuXHRcdG9uT3B0aW9uR3JvdXBDbGVhciAgIDogbnVsbCwgLy8gZnVuY3Rpb24oKSB7IC4uLiB9XG5cdFx0b25Ecm9wZG93bk9wZW4gICAgICAgOiBudWxsLCAvLyBmdW5jdGlvbigkZHJvcGRvd24pIHsgLi4uIH1cblx0XHRvbkRyb3Bkb3duQ2xvc2UgICAgICA6IG51bGwsIC8vIGZ1bmN0aW9uKCRkcm9wZG93bikgeyAuLi4gfVxuXHRcdG9uVHlwZSAgICAgICAgICAgICAgIDogbnVsbCwgLy8gZnVuY3Rpb24oc3RyKSB7IC4uLiB9XG5cdFx0b25EZWxldGUgICAgICAgICAgICAgOiBudWxsLCAvLyBmdW5jdGlvbih2YWx1ZXMpIHsgLi4uIH1cblx0XHQqL1xuXHRcblx0XHRyZW5kZXI6IHtcblx0XHRcdC8qXG5cdFx0XHRpdGVtOiBudWxsLFxuXHRcdFx0b3B0Z3JvdXA6IG51bGwsXG5cdFx0XHRvcHRncm91cF9oZWFkZXI6IG51bGwsXG5cdFx0XHRvcHRpb246IG51bGwsXG5cdFx0XHRvcHRpb25fY3JlYXRlOiBudWxsXG5cdFx0XHQqL1xuXHRcdH1cblx0fTtcblx0XG5cdFxuXHQkLmZuLnNlbGVjdGl6ZSA9IGZ1bmN0aW9uKHNldHRpbmdzX3VzZXIpIHtcblx0XHR2YXIgZGVmYXVsdHMgICAgICAgICAgICAgPSAkLmZuLnNlbGVjdGl6ZS5kZWZhdWx0cztcblx0XHR2YXIgc2V0dGluZ3MgICAgICAgICAgICAgPSAkLmV4dGVuZCh7fSwgZGVmYXVsdHMsIHNldHRpbmdzX3VzZXIpO1xuXHRcdHZhciBhdHRyX2RhdGEgICAgICAgICAgICA9IHNldHRpbmdzLmRhdGFBdHRyO1xuXHRcdHZhciBmaWVsZF9sYWJlbCAgICAgICAgICA9IHNldHRpbmdzLmxhYmVsRmllbGQ7XG5cdFx0dmFyIGZpZWxkX3ZhbHVlICAgICAgICAgID0gc2V0dGluZ3MudmFsdWVGaWVsZDtcblx0XHR2YXIgZmllbGRfb3B0Z3JvdXAgICAgICAgPSBzZXR0aW5ncy5vcHRncm91cEZpZWxkO1xuXHRcdHZhciBmaWVsZF9vcHRncm91cF9sYWJlbCA9IHNldHRpbmdzLm9wdGdyb3VwTGFiZWxGaWVsZDtcblx0XHR2YXIgZmllbGRfb3B0Z3JvdXBfdmFsdWUgPSBzZXR0aW5ncy5vcHRncm91cFZhbHVlRmllbGQ7XG5cdFxuXHRcdC8qKlxuXHRcdCAqIEluaXRpYWxpemVzIHNlbGVjdGl6ZSBmcm9tIGEgPGlucHV0IHR5cGU9XCJ0ZXh0XCI+IGVsZW1lbnQuXG5cdFx0ICpcblx0XHQgKiBAcGFyYW0ge29iamVjdH0gJGlucHV0XG5cdFx0ICogQHBhcmFtIHtvYmplY3R9IHNldHRpbmdzX2VsZW1lbnRcblx0XHQgKi9cblx0XHR2YXIgaW5pdF90ZXh0Ym94ID0gZnVuY3Rpb24oJGlucHV0LCBzZXR0aW5nc19lbGVtZW50KSB7XG5cdFx0XHR2YXIgaSwgbiwgdmFsdWVzLCBvcHRpb247XG5cdFxuXHRcdFx0dmFyIGRhdGFfcmF3ID0gJGlucHV0LmF0dHIoYXR0cl9kYXRhKTtcblx0XG5cdFx0XHRpZiAoIWRhdGFfcmF3KSB7XG5cdFx0XHRcdHZhciB2YWx1ZSA9ICQudHJpbSgkaW5wdXQudmFsKCkgfHwgJycpO1xuXHRcdFx0XHRpZiAoIXNldHRpbmdzLmFsbG93RW1wdHlPcHRpb24gJiYgIXZhbHVlLmxlbmd0aCkgcmV0dXJuO1xuXHRcdFx0XHR2YWx1ZXMgPSB2YWx1ZS5zcGxpdChzZXR0aW5ncy5kZWxpbWl0ZXIpO1xuXHRcdFx0XHRmb3IgKGkgPSAwLCBuID0gdmFsdWVzLmxlbmd0aDsgaSA8IG47IGkrKykge1xuXHRcdFx0XHRcdG9wdGlvbiA9IHt9O1xuXHRcdFx0XHRcdG9wdGlvbltmaWVsZF9sYWJlbF0gPSB2YWx1ZXNbaV07XG5cdFx0XHRcdFx0b3B0aW9uW2ZpZWxkX3ZhbHVlXSA9IHZhbHVlc1tpXTtcblx0XHRcdFx0XHRzZXR0aW5nc19lbGVtZW50Lm9wdGlvbnMucHVzaChvcHRpb24pO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHNldHRpbmdzX2VsZW1lbnQuaXRlbXMgPSB2YWx1ZXM7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRzZXR0aW5nc19lbGVtZW50Lm9wdGlvbnMgPSBKU09OLnBhcnNlKGRhdGFfcmF3KTtcblx0XHRcdFx0Zm9yIChpID0gMCwgbiA9IHNldHRpbmdzX2VsZW1lbnQub3B0aW9ucy5sZW5ndGg7IGkgPCBuOyBpKyspIHtcblx0XHRcdFx0XHRzZXR0aW5nc19lbGVtZW50Lml0ZW1zLnB1c2goc2V0dGluZ3NfZWxlbWVudC5vcHRpb25zW2ldW2ZpZWxkX3ZhbHVlXSk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9O1xuXHRcblx0XHQvKipcblx0XHQgKiBJbml0aWFsaXplcyBzZWxlY3RpemUgZnJvbSBhIDxzZWxlY3Q+IGVsZW1lbnQuXG5cdFx0ICpcblx0XHQgKiBAcGFyYW0ge29iamVjdH0gJGlucHV0XG5cdFx0ICogQHBhcmFtIHtvYmplY3R9IHNldHRpbmdzX2VsZW1lbnRcblx0XHQgKi9cblx0XHR2YXIgaW5pdF9zZWxlY3QgPSBmdW5jdGlvbigkaW5wdXQsIHNldHRpbmdzX2VsZW1lbnQpIHtcblx0XHRcdHZhciBpLCBuLCB0YWdOYW1lLCAkY2hpbGRyZW4sIG9yZGVyID0gMDtcblx0XHRcdHZhciBvcHRpb25zID0gc2V0dGluZ3NfZWxlbWVudC5vcHRpb25zO1xuXHRcdFx0dmFyIG9wdGlvbnNNYXAgPSB7fTtcblx0XG5cdFx0XHR2YXIgcmVhZERhdGEgPSBmdW5jdGlvbigkZWwpIHtcblx0XHRcdFx0dmFyIGRhdGEgPSBhdHRyX2RhdGEgJiYgJGVsLmF0dHIoYXR0cl9kYXRhKTtcblx0XHRcdFx0aWYgKHR5cGVvZiBkYXRhID09PSAnc3RyaW5nJyAmJiBkYXRhLmxlbmd0aCkge1xuXHRcdFx0XHRcdHJldHVybiBKU09OLnBhcnNlKGRhdGEpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiBudWxsO1xuXHRcdFx0fTtcblx0XG5cdFx0XHR2YXIgYWRkT3B0aW9uID0gZnVuY3Rpb24oJG9wdGlvbiwgZ3JvdXApIHtcblx0XHRcdFx0JG9wdGlvbiA9ICQoJG9wdGlvbik7XG5cdFxuXHRcdFx0XHR2YXIgdmFsdWUgPSBoYXNoX2tleSgkb3B0aW9uLnZhbCgpKTtcblx0XHRcdFx0aWYgKCF2YWx1ZSAmJiAhc2V0dGluZ3MuYWxsb3dFbXB0eU9wdGlvbikgcmV0dXJuO1xuXHRcblx0XHRcdFx0Ly8gaWYgdGhlIG9wdGlvbiBhbHJlYWR5IGV4aXN0cywgaXQncyBwcm9iYWJseSBiZWVuXG5cdFx0XHRcdC8vIGR1cGxpY2F0ZWQgaW4gYW5vdGhlciBvcHRncm91cC4gaW4gdGhpcyBjYXNlLCBwdXNoXG5cdFx0XHRcdC8vIHRoZSBjdXJyZW50IGdyb3VwIHRvIHRoZSBcIm9wdGdyb3VwXCIgcHJvcGVydHkgb24gdGhlXG5cdFx0XHRcdC8vIGV4aXN0aW5nIG9wdGlvbiBzbyB0aGF0IGl0J3MgcmVuZGVyZWQgaW4gYm90aCBwbGFjZXMuXG5cdFx0XHRcdGlmIChvcHRpb25zTWFwLmhhc093blByb3BlcnR5KHZhbHVlKSkge1xuXHRcdFx0XHRcdGlmIChncm91cCkge1xuXHRcdFx0XHRcdFx0dmFyIGFyciA9IG9wdGlvbnNNYXBbdmFsdWVdW2ZpZWxkX29wdGdyb3VwXTtcblx0XHRcdFx0XHRcdGlmICghYXJyKSB7XG5cdFx0XHRcdFx0XHRcdG9wdGlvbnNNYXBbdmFsdWVdW2ZpZWxkX29wdGdyb3VwXSA9IGdyb3VwO1xuXHRcdFx0XHRcdFx0fSBlbHNlIGlmICghJC5pc0FycmF5KGFycikpIHtcblx0XHRcdFx0XHRcdFx0b3B0aW9uc01hcFt2YWx1ZV1bZmllbGRfb3B0Z3JvdXBdID0gW2FyciwgZ3JvdXBdO1xuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0YXJyLnB1c2goZ3JvdXApO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRyZXR1cm47XG5cdFx0XHRcdH1cblx0XG5cdFx0XHRcdHZhciBvcHRpb24gICAgICAgICAgICAgPSByZWFkRGF0YSgkb3B0aW9uKSB8fCB7fTtcblx0XHRcdFx0b3B0aW9uW2ZpZWxkX2xhYmVsXSAgICA9IG9wdGlvbltmaWVsZF9sYWJlbF0gfHwgJG9wdGlvbi50ZXh0KCk7XG5cdFx0XHRcdG9wdGlvbltmaWVsZF92YWx1ZV0gICAgPSBvcHRpb25bZmllbGRfdmFsdWVdIHx8IHZhbHVlO1xuXHRcdFx0XHRvcHRpb25bZmllbGRfb3B0Z3JvdXBdID0gb3B0aW9uW2ZpZWxkX29wdGdyb3VwXSB8fCBncm91cDtcblx0XG5cdFx0XHRcdG9wdGlvbnNNYXBbdmFsdWVdID0gb3B0aW9uO1xuXHRcdFx0XHRvcHRpb25zLnB1c2gob3B0aW9uKTtcblx0XG5cdFx0XHRcdGlmICgkb3B0aW9uLmlzKCc6c2VsZWN0ZWQnKSkge1xuXHRcdFx0XHRcdHNldHRpbmdzX2VsZW1lbnQuaXRlbXMucHVzaCh2YWx1ZSk7XG5cdFx0XHRcdH1cblx0XHRcdH07XG5cdFxuXHRcdFx0dmFyIGFkZEdyb3VwID0gZnVuY3Rpb24oJG9wdGdyb3VwKSB7XG5cdFx0XHRcdHZhciBpLCBuLCBpZCwgb3B0Z3JvdXAsICRvcHRpb25zO1xuXHRcblx0XHRcdFx0JG9wdGdyb3VwID0gJCgkb3B0Z3JvdXApO1xuXHRcdFx0XHRpZCA9ICRvcHRncm91cC5hdHRyKCdsYWJlbCcpO1xuXHRcblx0XHRcdFx0aWYgKGlkKSB7XG5cdFx0XHRcdFx0b3B0Z3JvdXAgPSByZWFkRGF0YSgkb3B0Z3JvdXApIHx8IHt9O1xuXHRcdFx0XHRcdG9wdGdyb3VwW2ZpZWxkX29wdGdyb3VwX2xhYmVsXSA9IGlkO1xuXHRcdFx0XHRcdG9wdGdyb3VwW2ZpZWxkX29wdGdyb3VwX3ZhbHVlXSA9IGlkO1xuXHRcdFx0XHRcdHNldHRpbmdzX2VsZW1lbnQub3B0Z3JvdXBzLnB1c2gob3B0Z3JvdXApO1xuXHRcdFx0XHR9XG5cdFxuXHRcdFx0XHQkb3B0aW9ucyA9ICQoJ29wdGlvbicsICRvcHRncm91cCk7XG5cdFx0XHRcdGZvciAoaSA9IDAsIG4gPSAkb3B0aW9ucy5sZW5ndGg7IGkgPCBuOyBpKyspIHtcblx0XHRcdFx0XHRhZGRPcHRpb24oJG9wdGlvbnNbaV0sIGlkKTtcblx0XHRcdFx0fVxuXHRcdFx0fTtcblx0XG5cdFx0XHRzZXR0aW5nc19lbGVtZW50Lm1heEl0ZW1zID0gJGlucHV0LmF0dHIoJ211bHRpcGxlJykgPyBudWxsIDogMTtcblx0XG5cdFx0XHQkY2hpbGRyZW4gPSAkaW5wdXQuY2hpbGRyZW4oKTtcblx0XHRcdGZvciAoaSA9IDAsIG4gPSAkY2hpbGRyZW4ubGVuZ3RoOyBpIDwgbjsgaSsrKSB7XG5cdFx0XHRcdHRhZ05hbWUgPSAkY2hpbGRyZW5baV0udGFnTmFtZS50b0xvd2VyQ2FzZSgpO1xuXHRcdFx0XHRpZiAodGFnTmFtZSA9PT0gJ29wdGdyb3VwJykge1xuXHRcdFx0XHRcdGFkZEdyb3VwKCRjaGlsZHJlbltpXSk7XG5cdFx0XHRcdH0gZWxzZSBpZiAodGFnTmFtZSA9PT0gJ29wdGlvbicpIHtcblx0XHRcdFx0XHRhZGRPcHRpb24oJGNoaWxkcmVuW2ldKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH07XG5cdFxuXHRcdHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24oKSB7XG5cdFx0XHRpZiAodGhpcy5zZWxlY3RpemUpIHJldHVybjtcblx0XG5cdFx0XHR2YXIgaW5zdGFuY2U7XG5cdFx0XHR2YXIgJGlucHV0ID0gJCh0aGlzKTtcblx0XHRcdHZhciB0YWdfbmFtZSA9IHRoaXMudGFnTmFtZS50b0xvd2VyQ2FzZSgpO1xuXHRcdFx0dmFyIHBsYWNlaG9sZGVyID0gJGlucHV0LmF0dHIoJ3BsYWNlaG9sZGVyJykgfHwgJGlucHV0LmF0dHIoJ2RhdGEtcGxhY2Vob2xkZXInKTtcblx0XHRcdGlmICghcGxhY2Vob2xkZXIgJiYgIXNldHRpbmdzLmFsbG93RW1wdHlPcHRpb24pIHtcblx0XHRcdFx0cGxhY2Vob2xkZXIgPSAkaW5wdXQuY2hpbGRyZW4oJ29wdGlvblt2YWx1ZT1cIlwiXScpLnRleHQoKTtcblx0XHRcdH1cblx0XG5cdFx0XHR2YXIgc2V0dGluZ3NfZWxlbWVudCA9IHtcblx0XHRcdFx0J3BsYWNlaG9sZGVyJyA6IHBsYWNlaG9sZGVyLFxuXHRcdFx0XHQnb3B0aW9ucycgICAgIDogW10sXG5cdFx0XHRcdCdvcHRncm91cHMnICAgOiBbXSxcblx0XHRcdFx0J2l0ZW1zJyAgICAgICA6IFtdXG5cdFx0XHR9O1xuXHRcblx0XHRcdGlmICh0YWdfbmFtZSA9PT0gJ3NlbGVjdCcpIHtcblx0XHRcdFx0aW5pdF9zZWxlY3QoJGlucHV0LCBzZXR0aW5nc19lbGVtZW50KTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGluaXRfdGV4dGJveCgkaW5wdXQsIHNldHRpbmdzX2VsZW1lbnQpO1xuXHRcdFx0fVxuXHRcblx0XHRcdGluc3RhbmNlID0gbmV3IFNlbGVjdGl6ZSgkaW5wdXQsICQuZXh0ZW5kKHRydWUsIHt9LCBkZWZhdWx0cywgc2V0dGluZ3NfZWxlbWVudCwgc2V0dGluZ3NfdXNlcikpO1xuXHRcdH0pO1xuXHR9O1xuXHRcblx0JC5mbi5zZWxlY3RpemUuZGVmYXVsdHMgPSBTZWxlY3RpemUuZGVmYXVsdHM7XG5cdCQuZm4uc2VsZWN0aXplLnN1cHBvcnQgPSB7XG5cdFx0dmFsaWRpdHk6IFNVUFBPUlRTX1ZBTElESVRZX0FQSVxuXHR9O1xuXHRcblx0XG5cdFNlbGVjdGl6ZS5kZWZpbmUoJ2RyYWdfZHJvcCcsIGZ1bmN0aW9uKG9wdGlvbnMpIHtcblx0XHRpZiAoISQuZm4uc29ydGFibGUpIHRocm93IG5ldyBFcnJvcignVGhlIFwiZHJhZ19kcm9wXCIgcGx1Z2luIHJlcXVpcmVzIGpRdWVyeSBVSSBcInNvcnRhYmxlXCIuJyk7XG5cdFx0aWYgKHRoaXMuc2V0dGluZ3MubW9kZSAhPT0gJ211bHRpJykgcmV0dXJuO1xuXHRcdHZhciBzZWxmID0gdGhpcztcblx0XG5cdFx0c2VsZi5sb2NrID0gKGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIG9yaWdpbmFsID0gc2VsZi5sb2NrO1xuXHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHR2YXIgc29ydGFibGUgPSBzZWxmLiRjb250cm9sLmRhdGEoJ3NvcnRhYmxlJyk7XG5cdFx0XHRcdGlmIChzb3J0YWJsZSkgc29ydGFibGUuZGlzYWJsZSgpO1xuXHRcdFx0XHRyZXR1cm4gb3JpZ2luYWwuYXBwbHkoc2VsZiwgYXJndW1lbnRzKTtcblx0XHRcdH07XG5cdFx0fSkoKTtcblx0XG5cdFx0c2VsZi51bmxvY2sgPSAoZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgb3JpZ2luYWwgPSBzZWxmLnVubG9jaztcblx0XHRcdHJldHVybiBmdW5jdGlvbigpIHtcblx0XHRcdFx0dmFyIHNvcnRhYmxlID0gc2VsZi4kY29udHJvbC5kYXRhKCdzb3J0YWJsZScpO1xuXHRcdFx0XHRpZiAoc29ydGFibGUpIHNvcnRhYmxlLmVuYWJsZSgpO1xuXHRcdFx0XHRyZXR1cm4gb3JpZ2luYWwuYXBwbHkoc2VsZiwgYXJndW1lbnRzKTtcblx0XHRcdH07XG5cdFx0fSkoKTtcblx0XG5cdFx0c2VsZi5zZXR1cCA9IChmdW5jdGlvbigpIHtcblx0XHRcdHZhciBvcmlnaW5hbCA9IHNlbGYuc2V0dXA7XG5cdFx0XHRyZXR1cm4gZnVuY3Rpb24oKSB7XG5cdFx0XHRcdG9yaWdpbmFsLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG5cdFxuXHRcdFx0XHR2YXIgJGNvbnRyb2wgPSBzZWxmLiRjb250cm9sLnNvcnRhYmxlKHtcblx0XHRcdFx0XHRpdGVtczogJ1tkYXRhLXZhbHVlXScsXG5cdFx0XHRcdFx0Zm9yY2VQbGFjZWhvbGRlclNpemU6IHRydWUsXG5cdFx0XHRcdFx0ZGlzYWJsZWQ6IHNlbGYuaXNMb2NrZWQsXG5cdFx0XHRcdFx0c3RhcnQ6IGZ1bmN0aW9uKGUsIHVpKSB7XG5cdFx0XHRcdFx0XHR1aS5wbGFjZWhvbGRlci5jc3MoJ3dpZHRoJywgdWkuaGVscGVyLmNzcygnd2lkdGgnKSk7XG5cdFx0XHRcdFx0XHQkY29udHJvbC5jc3Moe292ZXJmbG93OiAndmlzaWJsZSd9KTtcblx0XHRcdFx0XHR9LFxuXHRcdFx0XHRcdHN0b3A6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0JGNvbnRyb2wuY3NzKHtvdmVyZmxvdzogJ2hpZGRlbid9KTtcblx0XHRcdFx0XHRcdHZhciBhY3RpdmUgPSBzZWxmLiRhY3RpdmVJdGVtcyA/IHNlbGYuJGFjdGl2ZUl0ZW1zLnNsaWNlKCkgOiBudWxsO1xuXHRcdFx0XHRcdFx0dmFyIHZhbHVlcyA9IFtdO1xuXHRcdFx0XHRcdFx0JGNvbnRyb2wuY2hpbGRyZW4oJ1tkYXRhLXZhbHVlXScpLmVhY2goZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHRcdHZhbHVlcy5wdXNoKCQodGhpcykuYXR0cignZGF0YS12YWx1ZScpKTtcblx0XHRcdFx0XHRcdH0pO1xuXHRcdFx0XHRcdFx0c2VsZi5zZXRWYWx1ZSh2YWx1ZXMpO1xuXHRcdFx0XHRcdFx0c2VsZi5zZXRBY3RpdmVJdGVtKGFjdGl2ZSk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9KTtcblx0XHRcdH07XG5cdFx0fSkoKTtcblx0XG5cdH0pO1xuXHRcblx0U2VsZWN0aXplLmRlZmluZSgnZHJvcGRvd25faGVhZGVyJywgZnVuY3Rpb24ob3B0aW9ucykge1xuXHRcdHZhciBzZWxmID0gdGhpcztcblx0XG5cdFx0b3B0aW9ucyA9ICQuZXh0ZW5kKHtcblx0XHRcdHRpdGxlICAgICAgICAgOiAnVW50aXRsZWQnLFxuXHRcdFx0aGVhZGVyQ2xhc3MgICA6ICdzZWxlY3RpemUtZHJvcGRvd24taGVhZGVyJyxcblx0XHRcdHRpdGxlUm93Q2xhc3MgOiAnc2VsZWN0aXplLWRyb3Bkb3duLWhlYWRlci10aXRsZScsXG5cdFx0XHRsYWJlbENsYXNzICAgIDogJ3NlbGVjdGl6ZS1kcm9wZG93bi1oZWFkZXItbGFiZWwnLFxuXHRcdFx0Y2xvc2VDbGFzcyAgICA6ICdzZWxlY3RpemUtZHJvcGRvd24taGVhZGVyLWNsb3NlJyxcblx0XG5cdFx0XHRodG1sOiBmdW5jdGlvbihkYXRhKSB7XG5cdFx0XHRcdHJldHVybiAoXG5cdFx0XHRcdFx0JzxkaXYgY2xhc3M9XCInICsgZGF0YS5oZWFkZXJDbGFzcyArICdcIj4nICtcblx0XHRcdFx0XHRcdCc8ZGl2IGNsYXNzPVwiJyArIGRhdGEudGl0bGVSb3dDbGFzcyArICdcIj4nICtcblx0XHRcdFx0XHRcdFx0JzxzcGFuIGNsYXNzPVwiJyArIGRhdGEubGFiZWxDbGFzcyArICdcIj4nICsgZGF0YS50aXRsZSArICc8L3NwYW4+JyArXG5cdFx0XHRcdFx0XHRcdCc8YSBocmVmPVwiamF2YXNjcmlwdDp2b2lkKDApXCIgY2xhc3M9XCInICsgZGF0YS5jbG9zZUNsYXNzICsgJ1wiPiZ0aW1lczs8L2E+JyArXG5cdFx0XHRcdFx0XHQnPC9kaXY+JyArXG5cdFx0XHRcdFx0JzwvZGl2Pidcblx0XHRcdFx0KTtcblx0XHRcdH1cblx0XHR9LCBvcHRpb25zKTtcblx0XG5cdFx0c2VsZi5zZXR1cCA9IChmdW5jdGlvbigpIHtcblx0XHRcdHZhciBvcmlnaW5hbCA9IHNlbGYuc2V0dXA7XG5cdFx0XHRyZXR1cm4gZnVuY3Rpb24oKSB7XG5cdFx0XHRcdG9yaWdpbmFsLmFwcGx5KHNlbGYsIGFyZ3VtZW50cyk7XG5cdFx0XHRcdHNlbGYuJGRyb3Bkb3duX2hlYWRlciA9ICQob3B0aW9ucy5odG1sKG9wdGlvbnMpKTtcblx0XHRcdFx0c2VsZi4kZHJvcGRvd24ucHJlcGVuZChzZWxmLiRkcm9wZG93bl9oZWFkZXIpO1xuXHRcdFx0fTtcblx0XHR9KSgpO1xuXHRcblx0fSk7XG5cdFxuXHRTZWxlY3RpemUuZGVmaW5lKCdvcHRncm91cF9jb2x1bW5zJywgZnVuY3Rpb24ob3B0aW9ucykge1xuXHRcdHZhciBzZWxmID0gdGhpcztcblx0XG5cdFx0b3B0aW9ucyA9ICQuZXh0ZW5kKHtcblx0XHRcdGVxdWFsaXplV2lkdGggIDogdHJ1ZSxcblx0XHRcdGVxdWFsaXplSGVpZ2h0IDogdHJ1ZVxuXHRcdH0sIG9wdGlvbnMpO1xuXHRcblx0XHR0aGlzLmdldEFkamFjZW50T3B0aW9uID0gZnVuY3Rpb24oJG9wdGlvbiwgZGlyZWN0aW9uKSB7XG5cdFx0XHR2YXIgJG9wdGlvbnMgPSAkb3B0aW9uLmNsb3Nlc3QoJ1tkYXRhLWdyb3VwXScpLmZpbmQoJ1tkYXRhLXNlbGVjdGFibGVdJyk7XG5cdFx0XHR2YXIgaW5kZXggICAgPSAkb3B0aW9ucy5pbmRleCgkb3B0aW9uKSArIGRpcmVjdGlvbjtcblx0XG5cdFx0XHRyZXR1cm4gaW5kZXggPj0gMCAmJiBpbmRleCA8ICRvcHRpb25zLmxlbmd0aCA/ICRvcHRpb25zLmVxKGluZGV4KSA6ICQoKTtcblx0XHR9O1xuXHRcblx0XHR0aGlzLm9uS2V5RG93biA9IChmdW5jdGlvbigpIHtcblx0XHRcdHZhciBvcmlnaW5hbCA9IHNlbGYub25LZXlEb3duO1xuXHRcdFx0cmV0dXJuIGZ1bmN0aW9uKGUpIHtcblx0XHRcdFx0dmFyIGluZGV4LCAkb3B0aW9uLCAkb3B0aW9ucywgJG9wdGdyb3VwO1xuXHRcblx0XHRcdFx0aWYgKHRoaXMuaXNPcGVuICYmIChlLmtleUNvZGUgPT09IEtFWV9MRUZUIHx8IGUua2V5Q29kZSA9PT0gS0VZX1JJR0hUKSkge1xuXHRcdFx0XHRcdHNlbGYuaWdub3JlSG92ZXIgPSB0cnVlO1xuXHRcdFx0XHRcdCRvcHRncm91cCA9IHRoaXMuJGFjdGl2ZU9wdGlvbi5jbG9zZXN0KCdbZGF0YS1ncm91cF0nKTtcblx0XHRcdFx0XHRpbmRleCA9ICRvcHRncm91cC5maW5kKCdbZGF0YS1zZWxlY3RhYmxlXScpLmluZGV4KHRoaXMuJGFjdGl2ZU9wdGlvbik7XG5cdFxuXHRcdFx0XHRcdGlmKGUua2V5Q29kZSA9PT0gS0VZX0xFRlQpIHtcblx0XHRcdFx0XHRcdCRvcHRncm91cCA9ICRvcHRncm91cC5wcmV2KCdbZGF0YS1ncm91cF0nKTtcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0JG9wdGdyb3VwID0gJG9wdGdyb3VwLm5leHQoJ1tkYXRhLWdyb3VwXScpO1xuXHRcdFx0XHRcdH1cblx0XG5cdFx0XHRcdFx0JG9wdGlvbnMgPSAkb3B0Z3JvdXAuZmluZCgnW2RhdGEtc2VsZWN0YWJsZV0nKTtcblx0XHRcdFx0XHQkb3B0aW9uICA9ICRvcHRpb25zLmVxKE1hdGgubWluKCRvcHRpb25zLmxlbmd0aCAtIDEsIGluZGV4KSk7XG5cdFx0XHRcdFx0aWYgKCRvcHRpb24ubGVuZ3RoKSB7XG5cdFx0XHRcdFx0XHR0aGlzLnNldEFjdGl2ZU9wdGlvbigkb3B0aW9uKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0XHR9XG5cdFxuXHRcdFx0XHRyZXR1cm4gb3JpZ2luYWwuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcblx0XHRcdH07XG5cdFx0fSkoKTtcblx0XG5cdFx0dmFyIGdldFNjcm9sbGJhcldpZHRoID0gZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgZGl2O1xuXHRcdFx0dmFyIHdpZHRoID0gZ2V0U2Nyb2xsYmFyV2lkdGgud2lkdGg7XG5cdFx0XHR2YXIgZG9jID0gZG9jdW1lbnQ7XG5cdFxuXHRcdFx0aWYgKHR5cGVvZiB3aWR0aCA9PT0gJ3VuZGVmaW5lZCcpIHtcblx0XHRcdFx0ZGl2ID0gZG9jLmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuXHRcdFx0XHRkaXYuaW5uZXJIVE1MID0gJzxkaXYgc3R5bGU9XCJ3aWR0aDo1MHB4O2hlaWdodDo1MHB4O3Bvc2l0aW9uOmFic29sdXRlO2xlZnQ6LTUwcHg7dG9wOi01MHB4O292ZXJmbG93OmF1dG87XCI+PGRpdiBzdHlsZT1cIndpZHRoOjFweDtoZWlnaHQ6MTAwcHg7XCI+PC9kaXY+PC9kaXY+Jztcblx0XHRcdFx0ZGl2ID0gZGl2LmZpcnN0Q2hpbGQ7XG5cdFx0XHRcdGRvYy5ib2R5LmFwcGVuZENoaWxkKGRpdik7XG5cdFx0XHRcdHdpZHRoID0gZ2V0U2Nyb2xsYmFyV2lkdGgud2lkdGggPSBkaXYub2Zmc2V0V2lkdGggLSBkaXYuY2xpZW50V2lkdGg7XG5cdFx0XHRcdGRvYy5ib2R5LnJlbW92ZUNoaWxkKGRpdik7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gd2lkdGg7XG5cdFx0fTtcblx0XG5cdFx0dmFyIGVxdWFsaXplU2l6ZXMgPSBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBpLCBuLCBoZWlnaHRfbWF4LCB3aWR0aCwgd2lkdGhfbGFzdCwgd2lkdGhfcGFyZW50LCAkb3B0Z3JvdXBzO1xuXHRcblx0XHRcdCRvcHRncm91cHMgPSAkKCdbZGF0YS1ncm91cF0nLCBzZWxmLiRkcm9wZG93bl9jb250ZW50KTtcblx0XHRcdG4gPSAkb3B0Z3JvdXBzLmxlbmd0aDtcblx0XHRcdGlmICghbiB8fCAhc2VsZi4kZHJvcGRvd25fY29udGVudC53aWR0aCgpKSByZXR1cm47XG5cdFxuXHRcdFx0aWYgKG9wdGlvbnMuZXF1YWxpemVIZWlnaHQpIHtcblx0XHRcdFx0aGVpZ2h0X21heCA9IDA7XG5cdFx0XHRcdGZvciAoaSA9IDA7IGkgPCBuOyBpKyspIHtcblx0XHRcdFx0XHRoZWlnaHRfbWF4ID0gTWF0aC5tYXgoaGVpZ2h0X21heCwgJG9wdGdyb3Vwcy5lcShpKS5oZWlnaHQoKSk7XG5cdFx0XHRcdH1cblx0XHRcdFx0JG9wdGdyb3Vwcy5jc3Moe2hlaWdodDogaGVpZ2h0X21heH0pO1xuXHRcdFx0fVxuXHRcblx0XHRcdGlmIChvcHRpb25zLmVxdWFsaXplV2lkdGgpIHtcblx0XHRcdFx0d2lkdGhfcGFyZW50ID0gc2VsZi4kZHJvcGRvd25fY29udGVudC5pbm5lcldpZHRoKCkgLSBnZXRTY3JvbGxiYXJXaWR0aCgpO1xuXHRcdFx0XHR3aWR0aCA9IE1hdGgucm91bmQod2lkdGhfcGFyZW50IC8gbik7XG5cdFx0XHRcdCRvcHRncm91cHMuY3NzKHt3aWR0aDogd2lkdGh9KTtcblx0XHRcdFx0aWYgKG4gPiAxKSB7XG5cdFx0XHRcdFx0d2lkdGhfbGFzdCA9IHdpZHRoX3BhcmVudCAtIHdpZHRoICogKG4gLSAxKTtcblx0XHRcdFx0XHQkb3B0Z3JvdXBzLmVxKG4gLSAxKS5jc3Moe3dpZHRoOiB3aWR0aF9sYXN0fSk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9O1xuXHRcblx0XHRpZiAob3B0aW9ucy5lcXVhbGl6ZUhlaWdodCB8fCBvcHRpb25zLmVxdWFsaXplV2lkdGgpIHtcblx0XHRcdGhvb2suYWZ0ZXIodGhpcywgJ3Bvc2l0aW9uRHJvcGRvd24nLCBlcXVhbGl6ZVNpemVzKTtcblx0XHRcdGhvb2suYWZ0ZXIodGhpcywgJ3JlZnJlc2hPcHRpb25zJywgZXF1YWxpemVTaXplcyk7XG5cdFx0fVxuXHRcblx0XG5cdH0pO1xuXHRcblx0U2VsZWN0aXplLmRlZmluZSgncmVtb3ZlX2J1dHRvbicsIGZ1bmN0aW9uKG9wdGlvbnMpIHtcblx0XHRvcHRpb25zID0gJC5leHRlbmQoe1xuXHRcdFx0XHRsYWJlbCAgICAgOiAnJnRpbWVzOycsXG5cdFx0XHRcdHRpdGxlICAgICA6ICdSZW1vdmUnLFxuXHRcdFx0XHRjbGFzc05hbWUgOiAncmVtb3ZlJyxcblx0XHRcdFx0YXBwZW5kICAgIDogdHJ1ZVxuXHRcdFx0fSwgb3B0aW9ucyk7XG5cdFxuXHRcdFx0dmFyIHNpbmdsZUNsb3NlID0gZnVuY3Rpb24odGhpc1JlZiwgb3B0aW9ucykge1xuXHRcblx0XHRcdFx0b3B0aW9ucy5jbGFzc05hbWUgPSAncmVtb3ZlLXNpbmdsZSc7XG5cdFxuXHRcdFx0XHR2YXIgc2VsZiA9IHRoaXNSZWY7XG5cdFx0XHRcdHZhciBodG1sID0gJzxhIGhyZWY9XCJqYXZhc2NyaXB0OnZvaWQoMClcIiBjbGFzcz1cIicgKyBvcHRpb25zLmNsYXNzTmFtZSArICdcIiB0YWJpbmRleD1cIi0xXCIgdGl0bGU9XCInICsgZXNjYXBlX2h0bWwob3B0aW9ucy50aXRsZSkgKyAnXCI+JyArIG9wdGlvbnMubGFiZWwgKyAnPC9hPic7XG5cdFxuXHRcdFx0XHQvKipcblx0XHRcdFx0ICogQXBwZW5kcyBhbiBlbGVtZW50IGFzIGEgY2hpbGQgKHdpdGggcmF3IEhUTUwpLlxuXHRcdFx0XHQgKlxuXHRcdFx0XHQgKiBAcGFyYW0ge3N0cmluZ30gaHRtbF9jb250YWluZXJcblx0XHRcdFx0ICogQHBhcmFtIHtzdHJpbmd9IGh0bWxfZWxlbWVudFxuXHRcdFx0XHQgKiBAcmV0dXJuIHtzdHJpbmd9XG5cdFx0XHRcdCAqL1xuXHRcdFx0XHR2YXIgYXBwZW5kID0gZnVuY3Rpb24oaHRtbF9jb250YWluZXIsIGh0bWxfZWxlbWVudCkge1xuXHRcdFx0XHRcdHJldHVybiBodG1sX2NvbnRhaW5lciArIGh0bWxfZWxlbWVudDtcblx0XHRcdFx0fTtcblx0XG5cdFx0XHRcdHRoaXNSZWYuc2V0dXAgPSAoZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0dmFyIG9yaWdpbmFsID0gc2VsZi5zZXR1cDtcblx0XHRcdFx0XHRyZXR1cm4gZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHQvLyBvdmVycmlkZSB0aGUgaXRlbSByZW5kZXJpbmcgbWV0aG9kIHRvIGFkZCB0aGUgYnV0dG9uIHRvIGVhY2hcblx0XHRcdFx0XHRcdGlmIChvcHRpb25zLmFwcGVuZCkge1xuXHRcdFx0XHRcdFx0XHR2YXIgaWQgPSAkKHNlbGYuJGlucHV0LmNvbnRleHQpLmF0dHIoJ2lkJyk7XG5cdFx0XHRcdFx0XHRcdHZhciBzZWxlY3RpemVyID0gJCgnIycraWQpO1xuXHRcblx0XHRcdFx0XHRcdFx0dmFyIHJlbmRlcl9pdGVtID0gc2VsZi5zZXR0aW5ncy5yZW5kZXIuaXRlbTtcblx0XHRcdFx0XHRcdFx0c2VsZi5zZXR0aW5ncy5yZW5kZXIuaXRlbSA9IGZ1bmN0aW9uKGRhdGEpIHtcblx0XHRcdFx0XHRcdFx0XHRyZXR1cm4gYXBwZW5kKHJlbmRlcl9pdGVtLmFwcGx5KHRoaXNSZWYsIGFyZ3VtZW50cyksIGh0bWwpO1xuXHRcdFx0XHRcdFx0XHR9O1xuXHRcdFx0XHRcdFx0fVxuXHRcblx0XHRcdFx0XHRcdG9yaWdpbmFsLmFwcGx5KHRoaXNSZWYsIGFyZ3VtZW50cyk7XG5cdFxuXHRcdFx0XHRcdFx0Ly8gYWRkIGV2ZW50IGxpc3RlbmVyXG5cdFx0XHRcdFx0XHR0aGlzUmVmLiRjb250cm9sLm9uKCdjbGljaycsICcuJyArIG9wdGlvbnMuY2xhc3NOYW1lLCBmdW5jdGlvbihlKSB7XG5cdFx0XHRcdFx0XHRcdGUucHJldmVudERlZmF1bHQoKTtcblx0XHRcdFx0XHRcdFx0aWYgKHNlbGYuaXNMb2NrZWQpIHJldHVybjtcblx0XG5cdFx0XHRcdFx0XHRcdHNlbGYuY2xlYXIoKTtcblx0XHRcdFx0XHRcdH0pO1xuXHRcblx0XHRcdFx0XHR9O1xuXHRcdFx0XHR9KSgpO1xuXHRcdFx0fTtcblx0XG5cdFx0XHR2YXIgbXVsdGlDbG9zZSA9IGZ1bmN0aW9uKHRoaXNSZWYsIG9wdGlvbnMpIHtcblx0XG5cdFx0XHRcdHZhciBzZWxmID0gdGhpc1JlZjtcblx0XHRcdFx0dmFyIGh0bWwgPSAnPGEgaHJlZj1cImphdmFzY3JpcHQ6dm9pZCgwKVwiIGNsYXNzPVwiJyArIG9wdGlvbnMuY2xhc3NOYW1lICsgJ1wiIHRhYmluZGV4PVwiLTFcIiB0aXRsZT1cIicgKyBlc2NhcGVfaHRtbChvcHRpb25zLnRpdGxlKSArICdcIj4nICsgb3B0aW9ucy5sYWJlbCArICc8L2E+Jztcblx0XG5cdFx0XHRcdC8qKlxuXHRcdFx0XHQgKiBBcHBlbmRzIGFuIGVsZW1lbnQgYXMgYSBjaGlsZCAod2l0aCByYXcgSFRNTCkuXG5cdFx0XHRcdCAqXG5cdFx0XHRcdCAqIEBwYXJhbSB7c3RyaW5nfSBodG1sX2NvbnRhaW5lclxuXHRcdFx0XHQgKiBAcGFyYW0ge3N0cmluZ30gaHRtbF9lbGVtZW50XG5cdFx0XHRcdCAqIEByZXR1cm4ge3N0cmluZ31cblx0XHRcdFx0ICovXG5cdFx0XHRcdHZhciBhcHBlbmQgPSBmdW5jdGlvbihodG1sX2NvbnRhaW5lciwgaHRtbF9lbGVtZW50KSB7XG5cdFx0XHRcdFx0dmFyIHBvcyA9IGh0bWxfY29udGFpbmVyLnNlYXJjaCgvKDxcXC9bXj5dKz5cXHMqKSQvKTtcblx0XHRcdFx0XHRyZXR1cm4gaHRtbF9jb250YWluZXIuc3Vic3RyaW5nKDAsIHBvcykgKyBodG1sX2VsZW1lbnQgKyBodG1sX2NvbnRhaW5lci5zdWJzdHJpbmcocG9zKTtcblx0XHRcdFx0fTtcblx0XG5cdFx0XHRcdHRoaXNSZWYuc2V0dXAgPSAoZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0dmFyIG9yaWdpbmFsID0gc2VsZi5zZXR1cDtcblx0XHRcdFx0XHRyZXR1cm4gZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHQvLyBvdmVycmlkZSB0aGUgaXRlbSByZW5kZXJpbmcgbWV0aG9kIHRvIGFkZCB0aGUgYnV0dG9uIHRvIGVhY2hcblx0XHRcdFx0XHRcdGlmIChvcHRpb25zLmFwcGVuZCkge1xuXHRcdFx0XHRcdFx0XHR2YXIgcmVuZGVyX2l0ZW0gPSBzZWxmLnNldHRpbmdzLnJlbmRlci5pdGVtO1xuXHRcdFx0XHRcdFx0XHRzZWxmLnNldHRpbmdzLnJlbmRlci5pdGVtID0gZnVuY3Rpb24oZGF0YSkge1xuXHRcdFx0XHRcdFx0XHRcdHJldHVybiBhcHBlbmQocmVuZGVyX2l0ZW0uYXBwbHkodGhpc1JlZiwgYXJndW1lbnRzKSwgaHRtbCk7XG5cdFx0XHRcdFx0XHRcdH07XG5cdFx0XHRcdFx0XHR9XG5cdFxuXHRcdFx0XHRcdFx0b3JpZ2luYWwuYXBwbHkodGhpc1JlZiwgYXJndW1lbnRzKTtcblx0XG5cdFx0XHRcdFx0XHQvLyBhZGQgZXZlbnQgbGlzdGVuZXJcblx0XHRcdFx0XHRcdHRoaXNSZWYuJGNvbnRyb2wub24oJ2NsaWNrJywgJy4nICsgb3B0aW9ucy5jbGFzc05hbWUsIGZ1bmN0aW9uKGUpIHtcblx0XHRcdFx0XHRcdFx0ZS5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdFx0XHRcdFx0XHRpZiAoc2VsZi5pc0xvY2tlZCkgcmV0dXJuO1xuXHRcblx0XHRcdFx0XHRcdFx0dmFyICRpdGVtID0gJChlLmN1cnJlbnRUYXJnZXQpLnBhcmVudCgpO1xuXHRcdFx0XHRcdFx0XHRzZWxmLnNldEFjdGl2ZUl0ZW0oJGl0ZW0pO1xuXHRcdFx0XHRcdFx0XHRpZiAoc2VsZi5kZWxldGVTZWxlY3Rpb24oKSkge1xuXHRcdFx0XHRcdFx0XHRcdHNlbGYuc2V0Q2FyZXQoc2VsZi5pdGVtcy5sZW5ndGgpO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9KTtcblx0XG5cdFx0XHRcdFx0fTtcblx0XHRcdFx0fSkoKTtcblx0XHRcdH07XG5cdFxuXHRcdFx0aWYgKHRoaXMuc2V0dGluZ3MubW9kZSA9PT0gJ3NpbmdsZScpIHtcblx0XHRcdFx0c2luZ2xlQ2xvc2UodGhpcywgb3B0aW9ucyk7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdG11bHRpQ2xvc2UodGhpcywgb3B0aW9ucyk7XG5cdFx0XHR9XG5cdH0pO1xuXHRcblx0XG5cdFNlbGVjdGl6ZS5kZWZpbmUoJ3Jlc3RvcmVfb25fYmFja3NwYWNlJywgZnVuY3Rpb24ob3B0aW9ucykge1xuXHRcdHZhciBzZWxmID0gdGhpcztcblx0XG5cdFx0b3B0aW9ucy50ZXh0ID0gb3B0aW9ucy50ZXh0IHx8IGZ1bmN0aW9uKG9wdGlvbikge1xuXHRcdFx0cmV0dXJuIG9wdGlvblt0aGlzLnNldHRpbmdzLmxhYmVsRmllbGRdO1xuXHRcdH07XG5cdFxuXHRcdHRoaXMub25LZXlEb3duID0gKGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIG9yaWdpbmFsID0gc2VsZi5vbktleURvd247XG5cdFx0XHRyZXR1cm4gZnVuY3Rpb24oZSkge1xuXHRcdFx0XHR2YXIgaW5kZXgsIG9wdGlvbjtcblx0XHRcdFx0aWYgKGUua2V5Q29kZSA9PT0gS0VZX0JBQ0tTUEFDRSAmJiB0aGlzLiRjb250cm9sX2lucHV0LnZhbCgpID09PSAnJyAmJiAhdGhpcy4kYWN0aXZlSXRlbXMubGVuZ3RoKSB7XG5cdFx0XHRcdFx0aW5kZXggPSB0aGlzLmNhcmV0UG9zIC0gMTtcblx0XHRcdFx0XHRpZiAoaW5kZXggPj0gMCAmJiBpbmRleCA8IHRoaXMuaXRlbXMubGVuZ3RoKSB7XG5cdFx0XHRcdFx0XHRvcHRpb24gPSB0aGlzLm9wdGlvbnNbdGhpcy5pdGVtc1tpbmRleF1dO1xuXHRcdFx0XHRcdFx0aWYgKHRoaXMuZGVsZXRlU2VsZWN0aW9uKGUpKSB7XG5cdFx0XHRcdFx0XHRcdHRoaXMuc2V0VGV4dGJveFZhbHVlKG9wdGlvbnMudGV4dC5hcHBseSh0aGlzLCBbb3B0aW9uXSkpO1xuXHRcdFx0XHRcdFx0XHR0aGlzLnJlZnJlc2hPcHRpb25zKHRydWUpO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0ZS5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdFx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gb3JpZ2luYWwuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcblx0XHRcdH07XG5cdFx0fSkoKTtcblx0fSk7XG5cdFxuXG5cdHJldHVybiBTZWxlY3RpemU7XG59KSk7IiwiLyohXHJcbiAqIGNsaXBib2FyZC5qcyB2MS41LjEyXHJcbiAqIGh0dHBzOi8vemVub3JvY2hhLmdpdGh1Yi5pby9jbGlwYm9hcmQuanNcclxuICpcclxuICogTGljZW5zZWQgTUlUIMKpIFplbm8gUm9jaGFcclxuICovXHJcbihmdW5jdGlvbihmKXtpZih0eXBlb2YgZXhwb3J0cz09PVwib2JqZWN0XCImJnR5cGVvZiBtb2R1bGUhPT1cInVuZGVmaW5lZFwiKXttb2R1bGUuZXhwb3J0cz1mKCl9ZWxzZSBpZih0eXBlb2YgZGVmaW5lPT09XCJmdW5jdGlvblwiJiZkZWZpbmUuYW1kKXtkZWZpbmUoW10sZil9ZWxzZXt2YXIgZztpZih0eXBlb2Ygd2luZG93IT09XCJ1bmRlZmluZWRcIil7Zz13aW5kb3d9ZWxzZSBpZih0eXBlb2YgZ2xvYmFsIT09XCJ1bmRlZmluZWRcIil7Zz1nbG9iYWx9ZWxzZSBpZih0eXBlb2Ygc2VsZiE9PVwidW5kZWZpbmVkXCIpe2c9c2VsZn1lbHNle2c9dGhpc31nLkNsaXBib2FyZCA9IGYoKX19KShmdW5jdGlvbigpe3ZhciBkZWZpbmUsbW9kdWxlLGV4cG9ydHM7cmV0dXJuIChmdW5jdGlvbiBlKHQsbixyKXtmdW5jdGlvbiBzKG8sdSl7aWYoIW5bb10pe2lmKCF0W29dKXt2YXIgYT10eXBlb2YgcmVxdWlyZT09XCJmdW5jdGlvblwiJiZyZXF1aXJlO2lmKCF1JiZhKXJldHVybiBhKG8sITApO2lmKGkpcmV0dXJuIGkobywhMCk7dmFyIGY9bmV3IEVycm9yKFwiQ2Fubm90IGZpbmQgbW9kdWxlICdcIitvK1wiJ1wiKTt0aHJvdyBmLmNvZGU9XCJNT0RVTEVfTk9UX0ZPVU5EXCIsZn12YXIgbD1uW29dPXtleHBvcnRzOnt9fTt0W29dWzBdLmNhbGwobC5leHBvcnRzLGZ1bmN0aW9uKGUpe3ZhciBuPXRbb11bMV1bZV07cmV0dXJuIHMobj9uOmUpfSxsLGwuZXhwb3J0cyxlLHQsbixyKX1yZXR1cm4gbltvXS5leHBvcnRzfXZhciBpPXR5cGVvZiByZXF1aXJlPT1cImZ1bmN0aW9uXCImJnJlcXVpcmU7Zm9yKHZhciBvPTA7bzxyLmxlbmd0aDtvKyspcyhyW29dKTtyZXR1cm4gc30pKHsxOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcclxudmFyIG1hdGNoZXMgPSByZXF1aXJlKCdtYXRjaGVzLXNlbGVjdG9yJylcclxuXHJcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGVsZW1lbnQsIHNlbGVjdG9yLCBjaGVja1lvU2VsZikge1xyXG4gIHZhciBwYXJlbnQgPSBjaGVja1lvU2VsZiA/IGVsZW1lbnQgOiBlbGVtZW50LnBhcmVudE5vZGVcclxuXHJcbiAgd2hpbGUgKHBhcmVudCAmJiBwYXJlbnQgIT09IGRvY3VtZW50KSB7XHJcbiAgICBpZiAobWF0Y2hlcyhwYXJlbnQsIHNlbGVjdG9yKSkgcmV0dXJuIHBhcmVudDtcclxuICAgIHBhcmVudCA9IHBhcmVudC5wYXJlbnROb2RlXHJcbiAgfVxyXG59XHJcblxyXG59LHtcIm1hdGNoZXMtc2VsZWN0b3JcIjo1fV0sMjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XHJcbnZhciBjbG9zZXN0ID0gcmVxdWlyZSgnY2xvc2VzdCcpO1xyXG5cclxuLyoqXHJcbiAqIERlbGVnYXRlcyBldmVudCB0byBhIHNlbGVjdG9yLlxyXG4gKlxyXG4gKiBAcGFyYW0ge0VsZW1lbnR9IGVsZW1lbnRcclxuICogQHBhcmFtIHtTdHJpbmd9IHNlbGVjdG9yXHJcbiAqIEBwYXJhbSB7U3RyaW5nfSB0eXBlXHJcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrXHJcbiAqIEBwYXJhbSB7Qm9vbGVhbn0gdXNlQ2FwdHVyZVxyXG4gKiBAcmV0dXJuIHtPYmplY3R9XHJcbiAqL1xyXG5mdW5jdGlvbiBkZWxlZ2F0ZShlbGVtZW50LCBzZWxlY3RvciwgdHlwZSwgY2FsbGJhY2ssIHVzZUNhcHR1cmUpIHtcclxuICAgIHZhciBsaXN0ZW5lckZuID0gbGlzdGVuZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcclxuXHJcbiAgICBlbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIodHlwZSwgbGlzdGVuZXJGbiwgdXNlQ2FwdHVyZSk7XHJcblxyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICBkZXN0cm95OiBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgZWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKHR5cGUsIGxpc3RlbmVyRm4sIHVzZUNhcHR1cmUpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG5cclxuLyoqXHJcbiAqIEZpbmRzIGNsb3Nlc3QgbWF0Y2ggYW5kIGludm9rZXMgY2FsbGJhY2suXHJcbiAqXHJcbiAqIEBwYXJhbSB7RWxlbWVudH0gZWxlbWVudFxyXG4gKiBAcGFyYW0ge1N0cmluZ30gc2VsZWN0b3JcclxuICogQHBhcmFtIHtTdHJpbmd9IHR5cGVcclxuICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2tcclxuICogQHJldHVybiB7RnVuY3Rpb259XHJcbiAqL1xyXG5mdW5jdGlvbiBsaXN0ZW5lcihlbGVtZW50LCBzZWxlY3RvciwgdHlwZSwgY2FsbGJhY2spIHtcclxuICAgIHJldHVybiBmdW5jdGlvbihlKSB7XHJcbiAgICAgICAgZS5kZWxlZ2F0ZVRhcmdldCA9IGNsb3Nlc3QoZS50YXJnZXQsIHNlbGVjdG9yLCB0cnVlKTtcclxuXHJcbiAgICAgICAgaWYgKGUuZGVsZWdhdGVUYXJnZXQpIHtcclxuICAgICAgICAgICAgY2FsbGJhY2suY2FsbChlbGVtZW50LCBlKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuXHJcbm1vZHVsZS5leHBvcnRzID0gZGVsZWdhdGU7XHJcblxyXG59LHtcImNsb3Nlc3RcIjoxfV0sMzpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XHJcbi8qKlxyXG4gKiBDaGVjayBpZiBhcmd1bWVudCBpcyBhIEhUTUwgZWxlbWVudC5cclxuICpcclxuICogQHBhcmFtIHtPYmplY3R9IHZhbHVlXHJcbiAqIEByZXR1cm4ge0Jvb2xlYW59XHJcbiAqL1xyXG5leHBvcnRzLm5vZGUgPSBmdW5jdGlvbih2YWx1ZSkge1xyXG4gICAgcmV0dXJuIHZhbHVlICE9PSB1bmRlZmluZWRcclxuICAgICAgICAmJiB2YWx1ZSBpbnN0YW5jZW9mIEhUTUxFbGVtZW50XHJcbiAgICAgICAgJiYgdmFsdWUubm9kZVR5cGUgPT09IDE7XHJcbn07XHJcblxyXG4vKipcclxuICogQ2hlY2sgaWYgYXJndW1lbnQgaXMgYSBsaXN0IG9mIEhUTUwgZWxlbWVudHMuXHJcbiAqXHJcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWx1ZVxyXG4gKiBAcmV0dXJuIHtCb29sZWFufVxyXG4gKi9cclxuZXhwb3J0cy5ub2RlTGlzdCA9IGZ1bmN0aW9uKHZhbHVlKSB7XHJcbiAgICB2YXIgdHlwZSA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh2YWx1ZSk7XHJcblxyXG4gICAgcmV0dXJuIHZhbHVlICE9PSB1bmRlZmluZWRcclxuICAgICAgICAmJiAodHlwZSA9PT0gJ1tvYmplY3QgTm9kZUxpc3RdJyB8fCB0eXBlID09PSAnW29iamVjdCBIVE1MQ29sbGVjdGlvbl0nKVxyXG4gICAgICAgICYmICgnbGVuZ3RoJyBpbiB2YWx1ZSlcclxuICAgICAgICAmJiAodmFsdWUubGVuZ3RoID09PSAwIHx8IGV4cG9ydHMubm9kZSh2YWx1ZVswXSkpO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIENoZWNrIGlmIGFyZ3VtZW50IGlzIGEgc3RyaW5nLlxyXG4gKlxyXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsdWVcclxuICogQHJldHVybiB7Qm9vbGVhbn1cclxuICovXHJcbmV4cG9ydHMuc3RyaW5nID0gZnVuY3Rpb24odmFsdWUpIHtcclxuICAgIHJldHVybiB0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnXHJcbiAgICAgICAgfHwgdmFsdWUgaW5zdGFuY2VvZiBTdHJpbmc7XHJcbn07XHJcblxyXG4vKipcclxuICogQ2hlY2sgaWYgYXJndW1lbnQgaXMgYSBmdW5jdGlvbi5cclxuICpcclxuICogQHBhcmFtIHtPYmplY3R9IHZhbHVlXHJcbiAqIEByZXR1cm4ge0Jvb2xlYW59XHJcbiAqL1xyXG5leHBvcnRzLmZuID0gZnVuY3Rpb24odmFsdWUpIHtcclxuICAgIHZhciB0eXBlID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHZhbHVlKTtcclxuXHJcbiAgICByZXR1cm4gdHlwZSA9PT0gJ1tvYmplY3QgRnVuY3Rpb25dJztcclxufTtcclxuXHJcbn0se31dLDQ6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xyXG52YXIgaXMgPSByZXF1aXJlKCcuL2lzJyk7XHJcbnZhciBkZWxlZ2F0ZSA9IHJlcXVpcmUoJ2RlbGVnYXRlJyk7XHJcblxyXG4vKipcclxuICogVmFsaWRhdGVzIGFsbCBwYXJhbXMgYW5kIGNhbGxzIHRoZSByaWdodFxyXG4gKiBsaXN0ZW5lciBmdW5jdGlvbiBiYXNlZCBvbiBpdHMgdGFyZ2V0IHR5cGUuXHJcbiAqXHJcbiAqIEBwYXJhbSB7U3RyaW5nfEhUTUxFbGVtZW50fEhUTUxDb2xsZWN0aW9ufE5vZGVMaXN0fSB0YXJnZXRcclxuICogQHBhcmFtIHtTdHJpbmd9IHR5cGVcclxuICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2tcclxuICogQHJldHVybiB7T2JqZWN0fVxyXG4gKi9cclxuZnVuY3Rpb24gbGlzdGVuKHRhcmdldCwgdHlwZSwgY2FsbGJhY2spIHtcclxuICAgIGlmICghdGFyZ2V0ICYmICF0eXBlICYmICFjYWxsYmFjaykge1xyXG4gICAgICAgIHRocm93IG5ldyBFcnJvcignTWlzc2luZyByZXF1aXJlZCBhcmd1bWVudHMnKTtcclxuICAgIH1cclxuXHJcbiAgICBpZiAoIWlzLnN0cmluZyh0eXBlKSkge1xyXG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1NlY29uZCBhcmd1bWVudCBtdXN0IGJlIGEgU3RyaW5nJyk7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKCFpcy5mbihjYWxsYmFjaykpIHtcclxuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdUaGlyZCBhcmd1bWVudCBtdXN0IGJlIGEgRnVuY3Rpb24nKTtcclxuICAgIH1cclxuXHJcbiAgICBpZiAoaXMubm9kZSh0YXJnZXQpKSB7XHJcbiAgICAgICAgcmV0dXJuIGxpc3Rlbk5vZGUodGFyZ2V0LCB0eXBlLCBjYWxsYmFjayk7XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmIChpcy5ub2RlTGlzdCh0YXJnZXQpKSB7XHJcbiAgICAgICAgcmV0dXJuIGxpc3Rlbk5vZGVMaXN0KHRhcmdldCwgdHlwZSwgY2FsbGJhY2spO1xyXG4gICAgfVxyXG4gICAgZWxzZSBpZiAoaXMuc3RyaW5nKHRhcmdldCkpIHtcclxuICAgICAgICByZXR1cm4gbGlzdGVuU2VsZWN0b3IodGFyZ2V0LCB0eXBlLCBjYWxsYmFjayk7XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdGaXJzdCBhcmd1bWVudCBtdXN0IGJlIGEgU3RyaW5nLCBIVE1MRWxlbWVudCwgSFRNTENvbGxlY3Rpb24sIG9yIE5vZGVMaXN0Jyk7XHJcbiAgICB9XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBBZGRzIGFuIGV2ZW50IGxpc3RlbmVyIHRvIGEgSFRNTCBlbGVtZW50XHJcbiAqIGFuZCByZXR1cm5zIGEgcmVtb3ZlIGxpc3RlbmVyIGZ1bmN0aW9uLlxyXG4gKlxyXG4gKiBAcGFyYW0ge0hUTUxFbGVtZW50fSBub2RlXHJcbiAqIEBwYXJhbSB7U3RyaW5nfSB0eXBlXHJcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrXHJcbiAqIEByZXR1cm4ge09iamVjdH1cclxuICovXHJcbmZ1bmN0aW9uIGxpc3Rlbk5vZGUobm9kZSwgdHlwZSwgY2FsbGJhY2spIHtcclxuICAgIG5vZGUuYWRkRXZlbnRMaXN0ZW5lcih0eXBlLCBjYWxsYmFjayk7XHJcblxyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICBkZXN0cm95OiBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgbm9kZS5yZW1vdmVFdmVudExpc3RlbmVyKHR5cGUsIGNhbGxiYWNrKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBBZGQgYW4gZXZlbnQgbGlzdGVuZXIgdG8gYSBsaXN0IG9mIEhUTUwgZWxlbWVudHNcclxuICogYW5kIHJldHVybnMgYSByZW1vdmUgbGlzdGVuZXIgZnVuY3Rpb24uXHJcbiAqXHJcbiAqIEBwYXJhbSB7Tm9kZUxpc3R8SFRNTENvbGxlY3Rpb259IG5vZGVMaXN0XHJcbiAqIEBwYXJhbSB7U3RyaW5nfSB0eXBlXHJcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrXHJcbiAqIEByZXR1cm4ge09iamVjdH1cclxuICovXHJcbmZ1bmN0aW9uIGxpc3Rlbk5vZGVMaXN0KG5vZGVMaXN0LCB0eXBlLCBjYWxsYmFjaykge1xyXG4gICAgQXJyYXkucHJvdG90eXBlLmZvckVhY2guY2FsbChub2RlTGlzdCwgZnVuY3Rpb24obm9kZSkge1xyXG4gICAgICAgIG5vZGUuYWRkRXZlbnRMaXN0ZW5lcih0eXBlLCBjYWxsYmFjayk7XHJcbiAgICB9KTtcclxuXHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIGRlc3Ryb3k6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICBBcnJheS5wcm90b3R5cGUuZm9yRWFjaC5jYWxsKG5vZGVMaXN0LCBmdW5jdGlvbihub2RlKSB7XHJcbiAgICAgICAgICAgICAgICBub2RlLnJlbW92ZUV2ZW50TGlzdGVuZXIodHlwZSwgY2FsbGJhY2spO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBBZGQgYW4gZXZlbnQgbGlzdGVuZXIgdG8gYSBzZWxlY3RvclxyXG4gKiBhbmQgcmV0dXJucyBhIHJlbW92ZSBsaXN0ZW5lciBmdW5jdGlvbi5cclxuICpcclxuICogQHBhcmFtIHtTdHJpbmd9IHNlbGVjdG9yXHJcbiAqIEBwYXJhbSB7U3RyaW5nfSB0eXBlXHJcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrXHJcbiAqIEByZXR1cm4ge09iamVjdH1cclxuICovXHJcbmZ1bmN0aW9uIGxpc3RlblNlbGVjdG9yKHNlbGVjdG9yLCB0eXBlLCBjYWxsYmFjaykge1xyXG4gICAgcmV0dXJuIGRlbGVnYXRlKGRvY3VtZW50LmJvZHksIHNlbGVjdG9yLCB0eXBlLCBjYWxsYmFjayk7XHJcbn1cclxuXHJcbm1vZHVsZS5leHBvcnRzID0gbGlzdGVuO1xyXG5cclxufSx7XCIuL2lzXCI6MyxcImRlbGVnYXRlXCI6Mn1dLDU6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xyXG5cclxuLyoqXHJcbiAqIEVsZW1lbnQgcHJvdG90eXBlLlxyXG4gKi9cclxuXHJcbnZhciBwcm90byA9IEVsZW1lbnQucHJvdG90eXBlO1xyXG5cclxuLyoqXHJcbiAqIFZlbmRvciBmdW5jdGlvbi5cclxuICovXHJcblxyXG52YXIgdmVuZG9yID0gcHJvdG8ubWF0Y2hlc1NlbGVjdG9yXHJcbiAgfHwgcHJvdG8ud2Via2l0TWF0Y2hlc1NlbGVjdG9yXHJcbiAgfHwgcHJvdG8ubW96TWF0Y2hlc1NlbGVjdG9yXHJcbiAgfHwgcHJvdG8ubXNNYXRjaGVzU2VsZWN0b3JcclxuICB8fCBwcm90by5vTWF0Y2hlc1NlbGVjdG9yO1xyXG5cclxuLyoqXHJcbiAqIEV4cG9zZSBgbWF0Y2goKWAuXHJcbiAqL1xyXG5cclxubW9kdWxlLmV4cG9ydHMgPSBtYXRjaDtcclxuXHJcbi8qKlxyXG4gKiBNYXRjaCBgZWxgIHRvIGBzZWxlY3RvcmAuXHJcbiAqXHJcbiAqIEBwYXJhbSB7RWxlbWVudH0gZWxcclxuICogQHBhcmFtIHtTdHJpbmd9IHNlbGVjdG9yXHJcbiAqIEByZXR1cm4ge0Jvb2xlYW59XHJcbiAqIEBhcGkgcHVibGljXHJcbiAqL1xyXG5cclxuZnVuY3Rpb24gbWF0Y2goZWwsIHNlbGVjdG9yKSB7XHJcbiAgaWYgKHZlbmRvcikgcmV0dXJuIHZlbmRvci5jYWxsKGVsLCBzZWxlY3Rvcik7XHJcbiAgdmFyIG5vZGVzID0gZWwucGFyZW50Tm9kZS5xdWVyeVNlbGVjdG9yQWxsKHNlbGVjdG9yKTtcclxuICBmb3IgKHZhciBpID0gMDsgaSA8IG5vZGVzLmxlbmd0aDsgKytpKSB7XHJcbiAgICBpZiAobm9kZXNbaV0gPT0gZWwpIHJldHVybiB0cnVlO1xyXG4gIH1cclxuICByZXR1cm4gZmFsc2U7XHJcbn1cclxufSx7fV0sNjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XHJcbmZ1bmN0aW9uIHNlbGVjdChlbGVtZW50KSB7XHJcbiAgICB2YXIgc2VsZWN0ZWRUZXh0O1xyXG5cclxuICAgIGlmIChlbGVtZW50Lm5vZGVOYW1lID09PSAnSU5QVVQnIHx8IGVsZW1lbnQubm9kZU5hbWUgPT09ICdURVhUQVJFQScpIHtcclxuICAgICAgICBlbGVtZW50LmZvY3VzKCk7XHJcbiAgICAgICAgZWxlbWVudC5zZXRTZWxlY3Rpb25SYW5nZSgwLCBlbGVtZW50LnZhbHVlLmxlbmd0aCk7XHJcblxyXG4gICAgICAgIHNlbGVjdGVkVGV4dCA9IGVsZW1lbnQudmFsdWU7XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgICBpZiAoZWxlbWVudC5oYXNBdHRyaWJ1dGUoJ2NvbnRlbnRlZGl0YWJsZScpKSB7XHJcbiAgICAgICAgICAgIGVsZW1lbnQuZm9jdXMoKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHZhciBzZWxlY3Rpb24gPSB3aW5kb3cuZ2V0U2VsZWN0aW9uKCk7XHJcbiAgICAgICAgdmFyIHJhbmdlID0gZG9jdW1lbnQuY3JlYXRlUmFuZ2UoKTtcclxuXHJcbiAgICAgICAgcmFuZ2Uuc2VsZWN0Tm9kZUNvbnRlbnRzKGVsZW1lbnQpO1xyXG4gICAgICAgIHNlbGVjdGlvbi5yZW1vdmVBbGxSYW5nZXMoKTtcclxuICAgICAgICBzZWxlY3Rpb24uYWRkUmFuZ2UocmFuZ2UpO1xyXG5cclxuICAgICAgICBzZWxlY3RlZFRleHQgPSBzZWxlY3Rpb24udG9TdHJpbmcoKTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gc2VsZWN0ZWRUZXh0O1xyXG59XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IHNlbGVjdDtcclxuXHJcbn0se31dLDc6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xyXG5mdW5jdGlvbiBFICgpIHtcclxuXHQvLyBLZWVwIHRoaXMgZW1wdHkgc28gaXQncyBlYXNpZXIgdG8gaW5oZXJpdCBmcm9tXHJcbiAgLy8gKHZpYSBodHRwczovL2dpdGh1Yi5jb20vbGlwc21hY2sgZnJvbSBodHRwczovL2dpdGh1Yi5jb20vc2NvdHRjb3JnYW4vdGlueS1lbWl0dGVyL2lzc3Vlcy8zKVxyXG59XHJcblxyXG5FLnByb3RvdHlwZSA9IHtcclxuXHRvbjogZnVuY3Rpb24gKG5hbWUsIGNhbGxiYWNrLCBjdHgpIHtcclxuICAgIHZhciBlID0gdGhpcy5lIHx8ICh0aGlzLmUgPSB7fSk7XHJcblxyXG4gICAgKGVbbmFtZV0gfHwgKGVbbmFtZV0gPSBbXSkpLnB1c2goe1xyXG4gICAgICBmbjogY2FsbGJhY2ssXHJcbiAgICAgIGN0eDogY3R4XHJcbiAgICB9KTtcclxuXHJcbiAgICByZXR1cm4gdGhpcztcclxuICB9LFxyXG5cclxuICBvbmNlOiBmdW5jdGlvbiAobmFtZSwgY2FsbGJhY2ssIGN0eCkge1xyXG4gICAgdmFyIHNlbGYgPSB0aGlzO1xyXG4gICAgZnVuY3Rpb24gbGlzdGVuZXIgKCkge1xyXG4gICAgICBzZWxmLm9mZihuYW1lLCBsaXN0ZW5lcik7XHJcbiAgICAgIGNhbGxiYWNrLmFwcGx5KGN0eCwgYXJndW1lbnRzKTtcclxuICAgIH07XHJcblxyXG4gICAgbGlzdGVuZXIuXyA9IGNhbGxiYWNrXHJcbiAgICByZXR1cm4gdGhpcy5vbihuYW1lLCBsaXN0ZW5lciwgY3R4KTtcclxuICB9LFxyXG5cclxuICBlbWl0OiBmdW5jdGlvbiAobmFtZSkge1xyXG4gICAgdmFyIGRhdGEgPSBbXS5zbGljZS5jYWxsKGFyZ3VtZW50cywgMSk7XHJcbiAgICB2YXIgZXZ0QXJyID0gKCh0aGlzLmUgfHwgKHRoaXMuZSA9IHt9KSlbbmFtZV0gfHwgW10pLnNsaWNlKCk7XHJcbiAgICB2YXIgaSA9IDA7XHJcbiAgICB2YXIgbGVuID0gZXZ0QXJyLmxlbmd0aDtcclxuXHJcbiAgICBmb3IgKGk7IGkgPCBsZW47IGkrKykge1xyXG4gICAgICBldnRBcnJbaV0uZm4uYXBwbHkoZXZ0QXJyW2ldLmN0eCwgZGF0YSk7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHRoaXM7XHJcbiAgfSxcclxuXHJcbiAgb2ZmOiBmdW5jdGlvbiAobmFtZSwgY2FsbGJhY2spIHtcclxuICAgIHZhciBlID0gdGhpcy5lIHx8ICh0aGlzLmUgPSB7fSk7XHJcbiAgICB2YXIgZXZ0cyA9IGVbbmFtZV07XHJcbiAgICB2YXIgbGl2ZUV2ZW50cyA9IFtdO1xyXG5cclxuICAgIGlmIChldnRzICYmIGNhbGxiYWNrKSB7XHJcbiAgICAgIGZvciAodmFyIGkgPSAwLCBsZW4gPSBldnRzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XHJcbiAgICAgICAgaWYgKGV2dHNbaV0uZm4gIT09IGNhbGxiYWNrICYmIGV2dHNbaV0uZm4uXyAhPT0gY2FsbGJhY2spXHJcbiAgICAgICAgICBsaXZlRXZlbnRzLnB1c2goZXZ0c1tpXSk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvLyBSZW1vdmUgZXZlbnQgZnJvbSBxdWV1ZSB0byBwcmV2ZW50IG1lbW9yeSBsZWFrXHJcbiAgICAvLyBTdWdnZXN0ZWQgYnkgaHR0cHM6Ly9naXRodWIuY29tL2xhemRcclxuICAgIC8vIFJlZjogaHR0cHM6Ly9naXRodWIuY29tL3Njb3R0Y29yZ2FuL3RpbnktZW1pdHRlci9jb21taXQvYzZlYmZhYTliYzk3M2IzM2QxMTBhODRhMzA3NzQyYjdjZjk0Yzk1MyNjb21taXRjb21tZW50LTUwMjQ5MTBcclxuXHJcbiAgICAobGl2ZUV2ZW50cy5sZW5ndGgpXHJcbiAgICAgID8gZVtuYW1lXSA9IGxpdmVFdmVudHNcclxuICAgICAgOiBkZWxldGUgZVtuYW1lXTtcclxuXHJcbiAgICByZXR1cm4gdGhpcztcclxuICB9XHJcbn07XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IEU7XHJcblxyXG59LHt9XSw4OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcclxuKGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcclxuICAgIGlmICh0eXBlb2YgZGVmaW5lID09PSBcImZ1bmN0aW9uXCIgJiYgZGVmaW5lLmFtZCkge1xyXG4gICAgICAgIGRlZmluZShbJ21vZHVsZScsICdzZWxlY3QnXSwgZmFjdG9yeSk7XHJcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBleHBvcnRzICE9PSBcInVuZGVmaW5lZFwiKSB7XHJcbiAgICAgICAgZmFjdG9yeShtb2R1bGUsIHJlcXVpcmUoJ3NlbGVjdCcpKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgICAgdmFyIG1vZCA9IHtcclxuICAgICAgICAgICAgZXhwb3J0czoge31cclxuICAgICAgICB9O1xyXG4gICAgICAgIGZhY3RvcnkobW9kLCBnbG9iYWwuc2VsZWN0KTtcclxuICAgICAgICBnbG9iYWwuY2xpcGJvYXJkQWN0aW9uID0gbW9kLmV4cG9ydHM7XHJcbiAgICB9XHJcbn0pKHRoaXMsIGZ1bmN0aW9uIChtb2R1bGUsIF9zZWxlY3QpIHtcclxuICAgICd1c2Ugc3RyaWN0JztcclxuXHJcbiAgICB2YXIgX3NlbGVjdDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9zZWxlY3QpO1xyXG5cclxuICAgIGZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7XHJcbiAgICAgICAgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHtcclxuICAgICAgICAgICAgZGVmYXVsdDogb2JqXHJcbiAgICAgICAgfTtcclxuICAgIH1cclxuXHJcbiAgICB2YXIgX3R5cGVvZiA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSBcInN5bWJvbFwiID8gZnVuY3Rpb24gKG9iaikge1xyXG4gICAgICAgIHJldHVybiB0eXBlb2Ygb2JqO1xyXG4gICAgfSA6IGZ1bmN0aW9uIChvYmopIHtcclxuICAgICAgICByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqO1xyXG4gICAgfTtcclxuXHJcbiAgICBmdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7XHJcbiAgICAgICAgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgdmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHtcclxuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTtcclxuICAgICAgICAgICAgICAgIGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTtcclxuICAgICAgICAgICAgICAgIGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7XHJcbiAgICAgICAgICAgIGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7XHJcbiAgICAgICAgICAgIGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpO1xyXG4gICAgICAgICAgICByZXR1cm4gQ29uc3RydWN0b3I7XHJcbiAgICAgICAgfTtcclxuICAgIH0oKTtcclxuXHJcbiAgICB2YXIgQ2xpcGJvYXJkQWN0aW9uID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zXHJcbiAgICAgICAgICovXHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIENsaXBib2FyZEFjdGlvbihvcHRpb25zKSB7XHJcbiAgICAgICAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBDbGlwYm9hcmRBY3Rpb24pO1xyXG5cclxuICAgICAgICAgICAgdGhpcy5yZXNvbHZlT3B0aW9ucyhvcHRpb25zKTtcclxuICAgICAgICAgICAgdGhpcy5pbml0U2VsZWN0aW9uKCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBEZWZpbmVzIGJhc2UgcHJvcGVydGllcyBwYXNzZWQgZnJvbSBjb25zdHJ1Y3Rvci5cclxuICAgICAgICAgKiBAcGFyYW0ge09iamVjdH0gb3B0aW9uc1xyXG4gICAgICAgICAqL1xyXG5cclxuXHJcbiAgICAgICAgQ2xpcGJvYXJkQWN0aW9uLnByb3RvdHlwZS5yZXNvbHZlT3B0aW9ucyA9IGZ1bmN0aW9uIHJlc29sdmVPcHRpb25zKCkge1xyXG4gICAgICAgICAgICB2YXIgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPD0gMCB8fCBhcmd1bWVudHNbMF0gPT09IHVuZGVmaW5lZCA/IHt9IDogYXJndW1lbnRzWzBdO1xyXG5cclxuICAgICAgICAgICAgdGhpcy5hY3Rpb24gPSBvcHRpb25zLmFjdGlvbjtcclxuICAgICAgICAgICAgdGhpcy5lbWl0dGVyID0gb3B0aW9ucy5lbWl0dGVyO1xyXG4gICAgICAgICAgICB0aGlzLnRhcmdldCA9IG9wdGlvbnMudGFyZ2V0O1xyXG4gICAgICAgICAgICB0aGlzLnRleHQgPSBvcHRpb25zLnRleHQ7XHJcbiAgICAgICAgICAgIHRoaXMudHJpZ2dlciA9IG9wdGlvbnMudHJpZ2dlcjtcclxuXHJcbiAgICAgICAgICAgIHRoaXMuc2VsZWN0ZWRUZXh0ID0gJyc7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgQ2xpcGJvYXJkQWN0aW9uLnByb3RvdHlwZS5pbml0U2VsZWN0aW9uID0gZnVuY3Rpb24gaW5pdFNlbGVjdGlvbigpIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMudGV4dCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zZWxlY3RGYWtlKCk7XHJcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy50YXJnZXQpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuc2VsZWN0VGFyZ2V0KCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICBDbGlwYm9hcmRBY3Rpb24ucHJvdG90eXBlLnNlbGVjdEZha2UgPSBmdW5jdGlvbiBzZWxlY3RGYWtlKCkge1xyXG4gICAgICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG5cclxuICAgICAgICAgICAgdmFyIGlzUlRMID0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmdldEF0dHJpYnV0ZSgnZGlyJykgPT0gJ3J0bCc7XHJcblxyXG4gICAgICAgICAgICB0aGlzLnJlbW92ZUZha2UoKTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMuZmFrZUhhbmRsZXJDYWxsYmFjayA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBfdGhpcy5yZW1vdmVGYWtlKCk7XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIHRoaXMuZmFrZUhhbmRsZXIgPSBkb2N1bWVudC5ib2R5LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgdGhpcy5mYWtlSGFuZGxlckNhbGxiYWNrKSB8fCB0cnVlO1xyXG5cclxuICAgICAgICAgICAgdGhpcy5mYWtlRWxlbSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3RleHRhcmVhJyk7XHJcbiAgICAgICAgICAgIC8vIFByZXZlbnQgem9vbWluZyBvbiBpT1NcclxuICAgICAgICAgICAgdGhpcy5mYWtlRWxlbS5zdHlsZS5mb250U2l6ZSA9ICcxMnB0JztcclxuICAgICAgICAgICAgLy8gUmVzZXQgYm94IG1vZGVsXHJcbiAgICAgICAgICAgIHRoaXMuZmFrZUVsZW0uc3R5bGUuYm9yZGVyID0gJzAnO1xyXG4gICAgICAgICAgICB0aGlzLmZha2VFbGVtLnN0eWxlLnBhZGRpbmcgPSAnMCc7XHJcbiAgICAgICAgICAgIHRoaXMuZmFrZUVsZW0uc3R5bGUubWFyZ2luID0gJzAnO1xyXG4gICAgICAgICAgICAvLyBNb3ZlIGVsZW1lbnQgb3V0IG9mIHNjcmVlbiBob3Jpem9udGFsbHlcclxuICAgICAgICAgICAgdGhpcy5mYWtlRWxlbS5zdHlsZS5wb3NpdGlvbiA9ICdhYnNvbHV0ZSc7XHJcbiAgICAgICAgICAgIHRoaXMuZmFrZUVsZW0uc3R5bGVbaXNSVEwgPyAncmlnaHQnIDogJ2xlZnQnXSA9ICctOTk5OXB4JztcclxuICAgICAgICAgICAgLy8gTW92ZSBlbGVtZW50IHRvIHRoZSBzYW1lIHBvc2l0aW9uIHZlcnRpY2FsbHlcclxuICAgICAgICAgICAgdGhpcy5mYWtlRWxlbS5zdHlsZS50b3AgPSAod2luZG93LnBhZ2VZT2Zmc2V0IHx8IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zY3JvbGxUb3ApICsgJ3B4JztcclxuICAgICAgICAgICAgdGhpcy5mYWtlRWxlbS5zZXRBdHRyaWJ1dGUoJ3JlYWRvbmx5JywgJycpO1xyXG4gICAgICAgICAgICB0aGlzLmZha2VFbGVtLnZhbHVlID0gdGhpcy50ZXh0O1xyXG5cclxuICAgICAgICAgICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZCh0aGlzLmZha2VFbGVtKTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMuc2VsZWN0ZWRUZXh0ID0gKDAsIF9zZWxlY3QyLmRlZmF1bHQpKHRoaXMuZmFrZUVsZW0pO1xyXG4gICAgICAgICAgICB0aGlzLmNvcHlUZXh0KCk7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgQ2xpcGJvYXJkQWN0aW9uLnByb3RvdHlwZS5yZW1vdmVGYWtlID0gZnVuY3Rpb24gcmVtb3ZlRmFrZSgpIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMuZmFrZUhhbmRsZXIpIHtcclxuICAgICAgICAgICAgICAgIGRvY3VtZW50LmJvZHkucmVtb3ZlRXZlbnRMaXN0ZW5lcignY2xpY2snLCB0aGlzLmZha2VIYW5kbGVyQ2FsbGJhY2spO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5mYWtlSGFuZGxlciA9IG51bGw7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmZha2VIYW5kbGVyQ2FsbGJhY2sgPSBudWxsO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAodGhpcy5mYWtlRWxlbSkge1xyXG4gICAgICAgICAgICAgICAgZG9jdW1lbnQuYm9keS5yZW1vdmVDaGlsZCh0aGlzLmZha2VFbGVtKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuZmFrZUVsZW0gPSBudWxsO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgQ2xpcGJvYXJkQWN0aW9uLnByb3RvdHlwZS5zZWxlY3RUYXJnZXQgPSBmdW5jdGlvbiBzZWxlY3RUYXJnZXQoKSB7XHJcbiAgICAgICAgICAgIHRoaXMuc2VsZWN0ZWRUZXh0ID0gKDAsIF9zZWxlY3QyLmRlZmF1bHQpKHRoaXMudGFyZ2V0KTtcclxuICAgICAgICAgICAgdGhpcy5jb3B5VGV4dCgpO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIENsaXBib2FyZEFjdGlvbi5wcm90b3R5cGUuY29weVRleHQgPSBmdW5jdGlvbiBjb3B5VGV4dCgpIHtcclxuICAgICAgICAgICAgdmFyIHN1Y2NlZWRlZCA9IHVuZGVmaW5lZDtcclxuXHJcbiAgICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgICAgICBzdWNjZWVkZWQgPSBkb2N1bWVudC5leGVjQ29tbWFuZCh0aGlzLmFjdGlvbik7XHJcbiAgICAgICAgICAgIH0gY2F0Y2ggKGVycikge1xyXG4gICAgICAgICAgICAgICAgc3VjY2VlZGVkID0gZmFsc2U7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHRoaXMuaGFuZGxlUmVzdWx0KHN1Y2NlZWRlZCk7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgQ2xpcGJvYXJkQWN0aW9uLnByb3RvdHlwZS5oYW5kbGVSZXN1bHQgPSBmdW5jdGlvbiBoYW5kbGVSZXN1bHQoc3VjY2VlZGVkKSB7XHJcbiAgICAgICAgICAgIGlmIChzdWNjZWVkZWQpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuZW1pdHRlci5lbWl0KCdzdWNjZXNzJywge1xyXG4gICAgICAgICAgICAgICAgICAgIGFjdGlvbjogdGhpcy5hY3Rpb24sXHJcbiAgICAgICAgICAgICAgICAgICAgdGV4dDogdGhpcy5zZWxlY3RlZFRleHQsXHJcbiAgICAgICAgICAgICAgICAgICAgdHJpZ2dlcjogdGhpcy50cmlnZ2VyLFxyXG4gICAgICAgICAgICAgICAgICAgIGNsZWFyU2VsZWN0aW9uOiB0aGlzLmNsZWFyU2VsZWN0aW9uLmJpbmQodGhpcylcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5lbWl0dGVyLmVtaXQoJ2Vycm9yJywge1xyXG4gICAgICAgICAgICAgICAgICAgIGFjdGlvbjogdGhpcy5hY3Rpb24sXHJcbiAgICAgICAgICAgICAgICAgICAgdHJpZ2dlcjogdGhpcy50cmlnZ2VyLFxyXG4gICAgICAgICAgICAgICAgICAgIGNsZWFyU2VsZWN0aW9uOiB0aGlzLmNsZWFyU2VsZWN0aW9uLmJpbmQodGhpcylcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgQ2xpcGJvYXJkQWN0aW9uLnByb3RvdHlwZS5jbGVhclNlbGVjdGlvbiA9IGZ1bmN0aW9uIGNsZWFyU2VsZWN0aW9uKCkge1xyXG4gICAgICAgICAgICBpZiAodGhpcy50YXJnZXQpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMudGFyZ2V0LmJsdXIoKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgd2luZG93LmdldFNlbGVjdGlvbigpLnJlbW92ZUFsbFJhbmdlcygpO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIENsaXBib2FyZEFjdGlvbi5wcm90b3R5cGUuZGVzdHJveSA9IGZ1bmN0aW9uIGRlc3Ryb3koKSB7XHJcbiAgICAgICAgICAgIHRoaXMucmVtb3ZlRmFrZSgpO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIF9jcmVhdGVDbGFzcyhDbGlwYm9hcmRBY3Rpb24sIFt7XHJcbiAgICAgICAgICAgIGtleTogJ2FjdGlvbicsXHJcbiAgICAgICAgICAgIHNldDogZnVuY3Rpb24gc2V0KCkge1xyXG4gICAgICAgICAgICAgICAgdmFyIGFjdGlvbiA9IGFyZ3VtZW50cy5sZW5ndGggPD0gMCB8fCBhcmd1bWVudHNbMF0gPT09IHVuZGVmaW5lZCA/ICdjb3B5JyA6IGFyZ3VtZW50c1swXTtcclxuXHJcbiAgICAgICAgICAgICAgICB0aGlzLl9hY3Rpb24gPSBhY3Rpb247XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuX2FjdGlvbiAhPT0gJ2NvcHknICYmIHRoaXMuX2FjdGlvbiAhPT0gJ2N1dCcpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgXCJhY3Rpb25cIiB2YWx1ZSwgdXNlIGVpdGhlciBcImNvcHlcIiBvciBcImN1dFwiJyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2FjdGlvbjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sIHtcclxuICAgICAgICAgICAga2V5OiAndGFyZ2V0JyxcclxuICAgICAgICAgICAgc2V0OiBmdW5jdGlvbiBzZXQodGFyZ2V0KSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodGFyZ2V0ICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodGFyZ2V0ICYmICh0eXBlb2YgdGFyZ2V0ID09PSAndW5kZWZpbmVkJyA/ICd1bmRlZmluZWQnIDogX3R5cGVvZih0YXJnZXQpKSA9PT0gJ29iamVjdCcgJiYgdGFyZ2V0Lm5vZGVUeXBlID09PSAxKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmFjdGlvbiA9PT0gJ2NvcHknICYmIHRhcmdldC5oYXNBdHRyaWJ1dGUoJ2Rpc2FibGVkJykpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBcInRhcmdldFwiIGF0dHJpYnV0ZS4gUGxlYXNlIHVzZSBcInJlYWRvbmx5XCIgaW5zdGVhZCBvZiBcImRpc2FibGVkXCIgYXR0cmlidXRlJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmFjdGlvbiA9PT0gJ2N1dCcgJiYgKHRhcmdldC5oYXNBdHRyaWJ1dGUoJ3JlYWRvbmx5JykgfHwgdGFyZ2V0Lmhhc0F0dHJpYnV0ZSgnZGlzYWJsZWQnKSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBcInRhcmdldFwiIGF0dHJpYnV0ZS4gWW91IGNhblxcJ3QgY3V0IHRleHQgZnJvbSBlbGVtZW50cyB3aXRoIFwicmVhZG9ubHlcIiBvciBcImRpc2FibGVkXCIgYXR0cmlidXRlcycpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl90YXJnZXQgPSB0YXJnZXQ7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIFwidGFyZ2V0XCIgdmFsdWUsIHVzZSBhIHZhbGlkIEVsZW1lbnQnKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3RhcmdldDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1dKTtcclxuXHJcbiAgICAgICAgcmV0dXJuIENsaXBib2FyZEFjdGlvbjtcclxuICAgIH0oKTtcclxuXHJcbiAgICBtb2R1bGUuZXhwb3J0cyA9IENsaXBib2FyZEFjdGlvbjtcclxufSk7XHJcblxyXG59LHtcInNlbGVjdFwiOjZ9XSw5OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcclxuKGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcclxuICAgIGlmICh0eXBlb2YgZGVmaW5lID09PSBcImZ1bmN0aW9uXCIgJiYgZGVmaW5lLmFtZCkge1xyXG4gICAgICAgIGRlZmluZShbJ21vZHVsZScsICcuL2NsaXBib2FyZC1hY3Rpb24nLCAndGlueS1lbWl0dGVyJywgJ2dvb2QtbGlzdGVuZXInXSwgZmFjdG9yeSk7XHJcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBleHBvcnRzICE9PSBcInVuZGVmaW5lZFwiKSB7XHJcbiAgICAgICAgZmFjdG9yeShtb2R1bGUsIHJlcXVpcmUoJy4vY2xpcGJvYXJkLWFjdGlvbicpLCByZXF1aXJlKCd0aW55LWVtaXR0ZXInKSwgcmVxdWlyZSgnZ29vZC1saXN0ZW5lcicpKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgICAgdmFyIG1vZCA9IHtcclxuICAgICAgICAgICAgZXhwb3J0czoge31cclxuICAgICAgICB9O1xyXG4gICAgICAgIGZhY3RvcnkobW9kLCBnbG9iYWwuY2xpcGJvYXJkQWN0aW9uLCBnbG9iYWwudGlueUVtaXR0ZXIsIGdsb2JhbC5nb29kTGlzdGVuZXIpO1xyXG4gICAgICAgIGdsb2JhbC5jbGlwYm9hcmQgPSBtb2QuZXhwb3J0cztcclxuICAgIH1cclxufSkodGhpcywgZnVuY3Rpb24gKG1vZHVsZSwgX2NsaXBib2FyZEFjdGlvbiwgX3RpbnlFbWl0dGVyLCBfZ29vZExpc3RlbmVyKSB7XHJcbiAgICAndXNlIHN0cmljdCc7XHJcblxyXG4gICAgdmFyIF9jbGlwYm9hcmRBY3Rpb24yID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY2xpcGJvYXJkQWN0aW9uKTtcclxuXHJcbiAgICB2YXIgX3RpbnlFbWl0dGVyMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3RpbnlFbWl0dGVyKTtcclxuXHJcbiAgICB2YXIgX2dvb2RMaXN0ZW5lcjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9nb29kTGlzdGVuZXIpO1xyXG5cclxuICAgIGZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7XHJcbiAgICAgICAgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHtcclxuICAgICAgICAgICAgZGVmYXVsdDogb2JqXHJcbiAgICAgICAgfTtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7XHJcbiAgICAgICAgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkge1xyXG4gICAgICAgIGlmICghc2VsZikge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHtcclxuICAgICAgICBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7XHJcbiAgICAgICAgICAgIGNvbnN0cnVjdG9yOiB7XHJcbiAgICAgICAgICAgICAgICB2YWx1ZTogc3ViQ2xhc3MsXHJcbiAgICAgICAgICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcclxuICAgICAgICAgICAgICAgIHdyaXRhYmxlOiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgICAgICBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7XHJcbiAgICB9XHJcblxyXG4gICAgdmFyIENsaXBib2FyZCA9IGZ1bmN0aW9uIChfRW1pdHRlcikge1xyXG4gICAgICAgIF9pbmhlcml0cyhDbGlwYm9hcmQsIF9FbWl0dGVyKTtcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQHBhcmFtIHtTdHJpbmd8SFRNTEVsZW1lbnR8SFRNTENvbGxlY3Rpb258Tm9kZUxpc3R9IHRyaWdnZXJcclxuICAgICAgICAgKiBAcGFyYW0ge09iamVjdH0gb3B0aW9uc1xyXG4gICAgICAgICAqL1xyXG5cclxuICAgICAgICBmdW5jdGlvbiBDbGlwYm9hcmQodHJpZ2dlciwgb3B0aW9ucykge1xyXG4gICAgICAgICAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgQ2xpcGJvYXJkKTtcclxuXHJcbiAgICAgICAgICAgIHZhciBfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIF9FbWl0dGVyLmNhbGwodGhpcykpO1xyXG5cclxuICAgICAgICAgICAgX3RoaXMucmVzb2x2ZU9wdGlvbnMob3B0aW9ucyk7XHJcbiAgICAgICAgICAgIF90aGlzLmxpc3RlbkNsaWNrKHRyaWdnZXIpO1xyXG4gICAgICAgICAgICByZXR1cm4gX3RoaXM7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBEZWZpbmVzIGlmIGF0dHJpYnV0ZXMgd291bGQgYmUgcmVzb2x2ZWQgdXNpbmcgaW50ZXJuYWwgc2V0dGVyIGZ1bmN0aW9uc1xyXG4gICAgICAgICAqIG9yIGN1c3RvbSBmdW5jdGlvbnMgdGhhdCB3ZXJlIHBhc3NlZCBpbiB0aGUgY29uc3RydWN0b3IuXHJcbiAgICAgICAgICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnNcclxuICAgICAgICAgKi9cclxuXHJcblxyXG4gICAgICAgIENsaXBib2FyZC5wcm90b3R5cGUucmVzb2x2ZU9wdGlvbnMgPSBmdW5jdGlvbiByZXNvbHZlT3B0aW9ucygpIHtcclxuICAgICAgICAgICAgdmFyIG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoIDw9IDAgfHwgYXJndW1lbnRzWzBdID09PSB1bmRlZmluZWQgPyB7fSA6IGFyZ3VtZW50c1swXTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMuYWN0aW9uID0gdHlwZW9mIG9wdGlvbnMuYWN0aW9uID09PSAnZnVuY3Rpb24nID8gb3B0aW9ucy5hY3Rpb24gOiB0aGlzLmRlZmF1bHRBY3Rpb247XHJcbiAgICAgICAgICAgIHRoaXMudGFyZ2V0ID0gdHlwZW9mIG9wdGlvbnMudGFyZ2V0ID09PSAnZnVuY3Rpb24nID8gb3B0aW9ucy50YXJnZXQgOiB0aGlzLmRlZmF1bHRUYXJnZXQ7XHJcbiAgICAgICAgICAgIHRoaXMudGV4dCA9IHR5cGVvZiBvcHRpb25zLnRleHQgPT09ICdmdW5jdGlvbicgPyBvcHRpb25zLnRleHQgOiB0aGlzLmRlZmF1bHRUZXh0O1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIENsaXBib2FyZC5wcm90b3R5cGUubGlzdGVuQ2xpY2sgPSBmdW5jdGlvbiBsaXN0ZW5DbGljayh0cmlnZ2VyKSB7XHJcbiAgICAgICAgICAgIHZhciBfdGhpczIgPSB0aGlzO1xyXG5cclxuICAgICAgICAgICAgdGhpcy5saXN0ZW5lciA9ICgwLCBfZ29vZExpc3RlbmVyMi5kZWZhdWx0KSh0cmlnZ2VyLCAnY2xpY2snLCBmdW5jdGlvbiAoZSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIF90aGlzMi5vbkNsaWNrKGUpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICBDbGlwYm9hcmQucHJvdG90eXBlLm9uQ2xpY2sgPSBmdW5jdGlvbiBvbkNsaWNrKGUpIHtcclxuICAgICAgICAgICAgdmFyIHRyaWdnZXIgPSBlLmRlbGVnYXRlVGFyZ2V0IHx8IGUuY3VycmVudFRhcmdldDtcclxuXHJcbiAgICAgICAgICAgIGlmICh0aGlzLmNsaXBib2FyZEFjdGlvbikge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5jbGlwYm9hcmRBY3Rpb24gPSBudWxsO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB0aGlzLmNsaXBib2FyZEFjdGlvbiA9IG5ldyBfY2xpcGJvYXJkQWN0aW9uMi5kZWZhdWx0KHtcclxuICAgICAgICAgICAgICAgIGFjdGlvbjogdGhpcy5hY3Rpb24odHJpZ2dlciksXHJcbiAgICAgICAgICAgICAgICB0YXJnZXQ6IHRoaXMudGFyZ2V0KHRyaWdnZXIpLFxyXG4gICAgICAgICAgICAgICAgdGV4dDogdGhpcy50ZXh0KHRyaWdnZXIpLFxyXG4gICAgICAgICAgICAgICAgdHJpZ2dlcjogdHJpZ2dlcixcclxuICAgICAgICAgICAgICAgIGVtaXR0ZXI6IHRoaXNcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgQ2xpcGJvYXJkLnByb3RvdHlwZS5kZWZhdWx0QWN0aW9uID0gZnVuY3Rpb24gZGVmYXVsdEFjdGlvbih0cmlnZ2VyKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBnZXRBdHRyaWJ1dGVWYWx1ZSgnYWN0aW9uJywgdHJpZ2dlcik7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgQ2xpcGJvYXJkLnByb3RvdHlwZS5kZWZhdWx0VGFyZ2V0ID0gZnVuY3Rpb24gZGVmYXVsdFRhcmdldCh0cmlnZ2VyKSB7XHJcbiAgICAgICAgICAgIHZhciBzZWxlY3RvciA9IGdldEF0dHJpYnV0ZVZhbHVlKCd0YXJnZXQnLCB0cmlnZ2VyKTtcclxuXHJcbiAgICAgICAgICAgIGlmIChzZWxlY3Rvcikge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3Ioc2VsZWN0b3IpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgQ2xpcGJvYXJkLnByb3RvdHlwZS5kZWZhdWx0VGV4dCA9IGZ1bmN0aW9uIGRlZmF1bHRUZXh0KHRyaWdnZXIpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGdldEF0dHJpYnV0ZVZhbHVlKCd0ZXh0JywgdHJpZ2dlcik7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgQ2xpcGJvYXJkLnByb3RvdHlwZS5kZXN0cm95ID0gZnVuY3Rpb24gZGVzdHJveSgpIHtcclxuICAgICAgICAgICAgdGhpcy5saXN0ZW5lci5kZXN0cm95KCk7XHJcblxyXG4gICAgICAgICAgICBpZiAodGhpcy5jbGlwYm9hcmRBY3Rpb24pIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuY2xpcGJvYXJkQWN0aW9uLmRlc3Ryb3koKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuY2xpcGJvYXJkQWN0aW9uID0gbnVsbDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHJldHVybiBDbGlwYm9hcmQ7XHJcbiAgICB9KF90aW55RW1pdHRlcjIuZGVmYXVsdCk7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBIZWxwZXIgZnVuY3Rpb24gdG8gcmV0cmlldmUgYXR0cmlidXRlIHZhbHVlLlxyXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IHN1ZmZpeFxyXG4gICAgICogQHBhcmFtIHtFbGVtZW50fSBlbGVtZW50XHJcbiAgICAgKi9cclxuICAgIGZ1bmN0aW9uIGdldEF0dHJpYnV0ZVZhbHVlKHN1ZmZpeCwgZWxlbWVudCkge1xyXG4gICAgICAgIHZhciBhdHRyaWJ1dGUgPSAnZGF0YS1jbGlwYm9hcmQtJyArIHN1ZmZpeDtcclxuXHJcbiAgICAgICAgaWYgKCFlbGVtZW50Lmhhc0F0dHJpYnV0ZShhdHRyaWJ1dGUpKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBlbGVtZW50LmdldEF0dHJpYnV0ZShhdHRyaWJ1dGUpO1xyXG4gICAgfVxyXG5cclxuICAgIG1vZHVsZS5leHBvcnRzID0gQ2xpcGJvYXJkO1xyXG59KTtcclxuXHJcbn0se1wiLi9jbGlwYm9hcmQtYWN0aW9uXCI6OCxcImdvb2QtbGlzdGVuZXJcIjo0LFwidGlueS1lbWl0dGVyXCI6N31dfSx7fSxbOV0pKDkpXHJcbn0pOyIsIiggZnVuY3Rpb24oIHdpbmRvdywgdW5kZWZpbmVkICkge1xyXG5cdCd1c2Ugc3RyaWN0JztcclxuXHJcblx0LyoqXHJcblx0ICogSGFuZGxlcyBtYW5hZ2luZyBhbGwgZXZlbnRzIGZvciB3aGF0ZXZlciB5b3UgcGx1ZyBpdCBpbnRvLiBQcmlvcml0aWVzIGZvciBob29rcyBhcmUgYmFzZWQgb24gbG93ZXN0IHRvIGhpZ2hlc3QgaW5cclxuXHQgKiB0aGF0LCBsb3dlc3QgcHJpb3JpdHkgaG9va3MgYXJlIGZpcmVkIGZpcnN0LlxyXG5cdCAqL1xyXG5cdHZhciBFdmVudE1hbmFnZXIgPSBmdW5jdGlvbigpIHtcclxuXHRcdHZhciBzbGljZSA9IEFycmF5LnByb3RvdHlwZS5zbGljZTtcclxuXHRcdFxyXG5cdFx0LyoqXHJcblx0XHQgKiBNYWludGFpbiBhIHJlZmVyZW5jZSB0byB0aGUgb2JqZWN0IHNjb3BlIHNvIG91ciBwdWJsaWMgbWV0aG9kcyBuZXZlciBnZXQgY29uZnVzaW5nLlxyXG5cdFx0ICovXHJcblx0XHR2YXIgTWV0aG9kc0F2YWlsYWJsZSA9IHtcclxuXHRcdFx0cmVtb3ZlRmlsdGVyIDogcmVtb3ZlRmlsdGVyLFxyXG5cdFx0XHRhcHBseUZpbHRlcnMgOiBhcHBseUZpbHRlcnMsXHJcblx0XHRcdGFkZEZpbHRlciA6IGFkZEZpbHRlcixcclxuXHRcdFx0cmVtb3ZlQWN0aW9uIDogcmVtb3ZlQWN0aW9uLFxyXG5cdFx0XHRkb0FjdGlvbiA6IGRvQWN0aW9uLFxyXG5cdFx0XHRhZGRBY3Rpb24gOiBhZGRBY3Rpb25cclxuXHRcdH07XHJcblxyXG5cdFx0LyoqXHJcblx0XHQgKiBDb250YWlucyB0aGUgaG9va3MgdGhhdCBnZXQgcmVnaXN0ZXJlZCB3aXRoIHRoaXMgRXZlbnRNYW5hZ2VyLiBUaGUgYXJyYXkgZm9yIHN0b3JhZ2UgdXRpbGl6ZXMgYSBcImZsYXRcIlxyXG5cdFx0ICogb2JqZWN0IGxpdGVyYWwgc3VjaCB0aGF0IGxvb2tpbmcgdXAgdGhlIGhvb2sgdXRpbGl6ZXMgdGhlIG5hdGl2ZSBvYmplY3QgbGl0ZXJhbCBoYXNoLlxyXG5cdFx0ICovXHJcblx0XHR2YXIgU1RPUkFHRSA9IHtcclxuXHRcdFx0YWN0aW9ucyA6IHt9LFxyXG5cdFx0XHRmaWx0ZXJzIDoge31cclxuXHRcdH07XHJcblxyXG5cdFx0LyoqXHJcblx0XHQgKiBBZGRzIGFuIGFjdGlvbiB0byB0aGUgZXZlbnQgbWFuYWdlci5cclxuXHRcdCAqXHJcblx0XHQgKiBAcGFyYW0gYWN0aW9uIE11c3QgY29udGFpbiBuYW1lc3BhY2UuaWRlbnRpZmllclxyXG5cdFx0ICogQHBhcmFtIGNhbGxiYWNrIE11c3QgYmUgYSB2YWxpZCBjYWxsYmFjayBmdW5jdGlvbiBiZWZvcmUgdGhpcyBhY3Rpb24gaXMgYWRkZWRcclxuXHRcdCAqIEBwYXJhbSBbcHJpb3JpdHk9MTBdIFVzZWQgdG8gY29udHJvbCB3aGVuIHRoZSBmdW5jdGlvbiBpcyBleGVjdXRlZCBpbiByZWxhdGlvbiB0byBvdGhlciBjYWxsYmFja3MgYm91bmQgdG8gdGhlIHNhbWUgaG9va1xyXG5cdFx0ICogQHBhcmFtIFtjb250ZXh0XSBTdXBwbHkgYSB2YWx1ZSB0byBiZSB1c2VkIGZvciB0aGlzXHJcblx0XHQgKi9cclxuXHRcdGZ1bmN0aW9uIGFkZEFjdGlvbiggYWN0aW9uLCBjYWxsYmFjaywgcHJpb3JpdHksIGNvbnRleHQgKSB7XHJcblx0XHRcdGlmKCB0eXBlb2YgYWN0aW9uID09PSAnc3RyaW5nJyAmJiB0eXBlb2YgY2FsbGJhY2sgPT09ICdmdW5jdGlvbicgKSB7XHJcblx0XHRcdFx0cHJpb3JpdHkgPSBwYXJzZUludCggKCBwcmlvcml0eSB8fCAxMCApLCAxMCApO1xyXG5cdFx0XHRcdF9hZGRIb29rKCAnYWN0aW9ucycsIGFjdGlvbiwgY2FsbGJhY2ssIHByaW9yaXR5LCBjb250ZXh0ICk7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdHJldHVybiBNZXRob2RzQXZhaWxhYmxlO1xyXG5cdFx0fVxyXG5cclxuXHRcdC8qKlxyXG5cdFx0ICogUGVyZm9ybXMgYW4gYWN0aW9uIGlmIGl0IGV4aXN0cy4gWW91IGNhbiBwYXNzIGFzIG1hbnkgYXJndW1lbnRzIGFzIHlvdSB3YW50IHRvIHRoaXMgZnVuY3Rpb247IHRoZSBvbmx5IHJ1bGUgaXNcclxuXHRcdCAqIHRoYXQgdGhlIGZpcnN0IGFyZ3VtZW50IG11c3QgYWx3YXlzIGJlIHRoZSBhY3Rpb24uXHJcblx0XHQgKi9cclxuXHRcdGZ1bmN0aW9uIGRvQWN0aW9uKCAvKiBhY3Rpb24sIGFyZzEsIGFyZzIsIC4uLiAqLyApIHtcclxuXHRcdFx0dmFyIGFyZ3MgPSBzbGljZS5jYWxsKCBhcmd1bWVudHMgKTtcclxuXHRcdFx0dmFyIGFjdGlvbiA9IGFyZ3Muc2hpZnQoKTtcclxuXHJcblx0XHRcdGlmKCB0eXBlb2YgYWN0aW9uID09PSAnc3RyaW5nJyApIHtcclxuXHRcdFx0XHRfcnVuSG9vayggJ2FjdGlvbnMnLCBhY3Rpb24sIGFyZ3MgKTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0cmV0dXJuIE1ldGhvZHNBdmFpbGFibGU7XHJcblx0XHR9XHJcblxyXG5cdFx0LyoqXHJcblx0XHQgKiBSZW1vdmVzIHRoZSBzcGVjaWZpZWQgYWN0aW9uIGlmIGl0IGNvbnRhaW5zIGEgbmFtZXNwYWNlLmlkZW50aWZpZXIgJiBleGlzdHMuXHJcblx0XHQgKlxyXG5cdFx0ICogQHBhcmFtIGFjdGlvbiBUaGUgYWN0aW9uIHRvIHJlbW92ZVxyXG5cdFx0ICogQHBhcmFtIFtjYWxsYmFja10gQ2FsbGJhY2sgZnVuY3Rpb24gdG8gcmVtb3ZlXHJcblx0XHQgKi9cclxuXHRcdGZ1bmN0aW9uIHJlbW92ZUFjdGlvbiggYWN0aW9uLCBjYWxsYmFjayApIHtcclxuXHRcdFx0aWYoIHR5cGVvZiBhY3Rpb24gPT09ICdzdHJpbmcnICkge1xyXG5cdFx0XHRcdF9yZW1vdmVIb29rKCAnYWN0aW9ucycsIGFjdGlvbiwgY2FsbGJhY2sgKTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0cmV0dXJuIE1ldGhvZHNBdmFpbGFibGU7XHJcblx0XHR9XHJcblxyXG5cdFx0LyoqXHJcblx0XHQgKiBBZGRzIGEgZmlsdGVyIHRvIHRoZSBldmVudCBtYW5hZ2VyLlxyXG5cdFx0ICpcclxuXHRcdCAqIEBwYXJhbSBmaWx0ZXIgTXVzdCBjb250YWluIG5hbWVzcGFjZS5pZGVudGlmaWVyXHJcblx0XHQgKiBAcGFyYW0gY2FsbGJhY2sgTXVzdCBiZSBhIHZhbGlkIGNhbGxiYWNrIGZ1bmN0aW9uIGJlZm9yZSB0aGlzIGFjdGlvbiBpcyBhZGRlZFxyXG5cdFx0ICogQHBhcmFtIFtwcmlvcml0eT0xMF0gVXNlZCB0byBjb250cm9sIHdoZW4gdGhlIGZ1bmN0aW9uIGlzIGV4ZWN1dGVkIGluIHJlbGF0aW9uIHRvIG90aGVyIGNhbGxiYWNrcyBib3VuZCB0byB0aGUgc2FtZSBob29rXHJcblx0XHQgKiBAcGFyYW0gW2NvbnRleHRdIFN1cHBseSBhIHZhbHVlIHRvIGJlIHVzZWQgZm9yIHRoaXNcclxuXHRcdCAqL1xyXG5cdFx0ZnVuY3Rpb24gYWRkRmlsdGVyKCBmaWx0ZXIsIGNhbGxiYWNrLCBwcmlvcml0eSwgY29udGV4dCApIHtcclxuXHRcdFx0aWYoIHR5cGVvZiBmaWx0ZXIgPT09ICdzdHJpbmcnICYmIHR5cGVvZiBjYWxsYmFjayA9PT0gJ2Z1bmN0aW9uJyApIHtcclxuXHRcdFx0XHRwcmlvcml0eSA9IHBhcnNlSW50KCAoIHByaW9yaXR5IHx8IDEwICksIDEwICk7XHJcblx0XHRcdFx0X2FkZEhvb2soICdmaWx0ZXJzJywgZmlsdGVyLCBjYWxsYmFjaywgcHJpb3JpdHksIGNvbnRleHQgKTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0cmV0dXJuIE1ldGhvZHNBdmFpbGFibGU7XHJcblx0XHR9XHJcblxyXG5cdFx0LyoqXHJcblx0XHQgKiBQZXJmb3JtcyBhIGZpbHRlciBpZiBpdCBleGlzdHMuIFlvdSBzaG91bGQgb25seSBldmVyIHBhc3MgMSBhcmd1bWVudCB0byBiZSBmaWx0ZXJlZC4gVGhlIG9ubHkgcnVsZSBpcyB0aGF0XHJcblx0XHQgKiB0aGUgZmlyc3QgYXJndW1lbnQgbXVzdCBhbHdheXMgYmUgdGhlIGZpbHRlci5cclxuXHRcdCAqL1xyXG5cdFx0ZnVuY3Rpb24gYXBwbHlGaWx0ZXJzKCAvKiBmaWx0ZXIsIGZpbHRlcmVkIGFyZywgYXJnMiwgLi4uICovICkge1xyXG5cdFx0XHR2YXIgYXJncyA9IHNsaWNlLmNhbGwoIGFyZ3VtZW50cyApO1xyXG5cdFx0XHR2YXIgZmlsdGVyID0gYXJncy5zaGlmdCgpO1xyXG5cclxuXHRcdFx0aWYoIHR5cGVvZiBmaWx0ZXIgPT09ICdzdHJpbmcnICkge1xyXG5cdFx0XHRcdHJldHVybiBfcnVuSG9vayggJ2ZpbHRlcnMnLCBmaWx0ZXIsIGFyZ3MgKTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0cmV0dXJuIE1ldGhvZHNBdmFpbGFibGU7XHJcblx0XHR9XHJcblxyXG5cdFx0LyoqXHJcblx0XHQgKiBSZW1vdmVzIHRoZSBzcGVjaWZpZWQgZmlsdGVyIGlmIGl0IGNvbnRhaW5zIGEgbmFtZXNwYWNlLmlkZW50aWZpZXIgJiBleGlzdHMuXHJcblx0XHQgKlxyXG5cdFx0ICogQHBhcmFtIGZpbHRlciBUaGUgYWN0aW9uIHRvIHJlbW92ZVxyXG5cdFx0ICogQHBhcmFtIFtjYWxsYmFja10gQ2FsbGJhY2sgZnVuY3Rpb24gdG8gcmVtb3ZlXHJcblx0XHQgKi9cclxuXHRcdGZ1bmN0aW9uIHJlbW92ZUZpbHRlciggZmlsdGVyLCBjYWxsYmFjayApIHtcclxuXHRcdFx0aWYoIHR5cGVvZiBmaWx0ZXIgPT09ICdzdHJpbmcnKSB7XHJcblx0XHRcdFx0X3JlbW92ZUhvb2soICdmaWx0ZXJzJywgZmlsdGVyLCBjYWxsYmFjayApO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRyZXR1cm4gTWV0aG9kc0F2YWlsYWJsZTtcclxuXHRcdH1cclxuXHJcblx0XHQvKipcclxuXHRcdCAqIFJlbW92ZXMgdGhlIHNwZWNpZmllZCBob29rIGJ5IHJlc2V0dGluZyB0aGUgdmFsdWUgb2YgaXQuXHJcblx0XHQgKlxyXG5cdFx0ICogQHBhcmFtIHR5cGUgVHlwZSBvZiBob29rLCBlaXRoZXIgJ2FjdGlvbnMnIG9yICdmaWx0ZXJzJ1xyXG5cdFx0ICogQHBhcmFtIGhvb2sgVGhlIGhvb2sgKG5hbWVzcGFjZS5pZGVudGlmaWVyKSB0byByZW1vdmVcclxuXHRcdCAqIEBwcml2YXRlXHJcblx0XHQgKi9cclxuXHRcdGZ1bmN0aW9uIF9yZW1vdmVIb29rKCB0eXBlLCBob29rLCBjYWxsYmFjaywgY29udGV4dCApIHtcclxuXHRcdFx0dmFyIGhhbmRsZXJzLCBoYW5kbGVyLCBpO1xyXG5cdFx0XHRcclxuXHRcdFx0aWYgKCAhU1RPUkFHRVsgdHlwZSBdWyBob29rIF0gKSB7XHJcblx0XHRcdFx0cmV0dXJuO1xyXG5cdFx0XHR9XHJcblx0XHRcdGlmICggIWNhbGxiYWNrICkge1xyXG5cdFx0XHRcdFNUT1JBR0VbIHR5cGUgXVsgaG9vayBdID0gW107XHJcblx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0aGFuZGxlcnMgPSBTVE9SQUdFWyB0eXBlIF1bIGhvb2sgXTtcclxuXHRcdFx0XHRpZiAoICFjb250ZXh0ICkge1xyXG5cdFx0XHRcdFx0Zm9yICggaSA9IGhhbmRsZXJzLmxlbmd0aDsgaS0tOyApIHtcclxuXHRcdFx0XHRcdFx0aWYgKCBoYW5kbGVyc1tpXS5jYWxsYmFjayA9PT0gY2FsbGJhY2sgKSB7XHJcblx0XHRcdFx0XHRcdFx0aGFuZGxlcnMuc3BsaWNlKCBpLCAxICk7XHJcblx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9XHJcblx0XHRcdFx0ZWxzZSB7XHJcblx0XHRcdFx0XHRmb3IgKCBpID0gaGFuZGxlcnMubGVuZ3RoOyBpLS07ICkge1xyXG5cdFx0XHRcdFx0XHRoYW5kbGVyID0gaGFuZGxlcnNbaV07XHJcblx0XHRcdFx0XHRcdGlmICggaGFuZGxlci5jYWxsYmFjayA9PT0gY2FsbGJhY2sgJiYgaGFuZGxlci5jb250ZXh0ID09PSBjb250ZXh0KSB7XHJcblx0XHRcdFx0XHRcdFx0aGFuZGxlcnMuc3BsaWNlKCBpLCAxICk7XHJcblx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHJcblx0XHQvKipcclxuXHRcdCAqIEFkZHMgdGhlIGhvb2sgdG8gdGhlIGFwcHJvcHJpYXRlIHN0b3JhZ2UgY29udGFpbmVyXHJcblx0XHQgKlxyXG5cdFx0ICogQHBhcmFtIHR5cGUgJ2FjdGlvbnMnIG9yICdmaWx0ZXJzJ1xyXG5cdFx0ICogQHBhcmFtIGhvb2sgVGhlIGhvb2sgKG5hbWVzcGFjZS5pZGVudGlmaWVyKSB0byBhZGQgdG8gb3VyIGV2ZW50IG1hbmFnZXJcclxuXHRcdCAqIEBwYXJhbSBjYWxsYmFjayBUaGUgZnVuY3Rpb24gdGhhdCB3aWxsIGJlIGNhbGxlZCB3aGVuIHRoZSBob29rIGlzIGV4ZWN1dGVkLlxyXG5cdFx0ICogQHBhcmFtIHByaW9yaXR5IFRoZSBwcmlvcml0eSBvZiB0aGlzIGhvb2suIE11c3QgYmUgYW4gaW50ZWdlci5cclxuXHRcdCAqIEBwYXJhbSBbY29udGV4dF0gQSB2YWx1ZSB0byBiZSB1c2VkIGZvciB0aGlzXHJcblx0XHQgKiBAcHJpdmF0ZVxyXG5cdFx0ICovXHJcblx0XHRmdW5jdGlvbiBfYWRkSG9vayggdHlwZSwgaG9vaywgY2FsbGJhY2ssIHByaW9yaXR5LCBjb250ZXh0ICkge1xyXG5cdFx0XHR2YXIgaG9va09iamVjdCA9IHtcclxuXHRcdFx0XHRjYWxsYmFjayA6IGNhbGxiYWNrLFxyXG5cdFx0XHRcdHByaW9yaXR5IDogcHJpb3JpdHksXHJcblx0XHRcdFx0Y29udGV4dCA6IGNvbnRleHRcclxuXHRcdFx0fTtcclxuXHJcblx0XHRcdC8vIFV0aWxpemUgJ3Byb3AgaXRzZWxmJyA6IGh0dHA6Ly9qc3BlcmYuY29tL2hhc293bnByb3BlcnR5LXZzLWluLXZzLXVuZGVmaW5lZC8xOVxyXG5cdFx0XHR2YXIgaG9va3MgPSBTVE9SQUdFWyB0eXBlIF1bIGhvb2sgXTtcclxuXHRcdFx0aWYoIGhvb2tzICkge1xyXG5cdFx0XHRcdGhvb2tzLnB1c2goIGhvb2tPYmplY3QgKTtcclxuXHRcdFx0XHRob29rcyA9IF9ob29rSW5zZXJ0U29ydCggaG9va3MgKTtcclxuXHRcdFx0fVxyXG5cdFx0XHRlbHNlIHtcclxuXHRcdFx0XHRob29rcyA9IFsgaG9va09iamVjdCBdO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRTVE9SQUdFWyB0eXBlIF1bIGhvb2sgXSA9IGhvb2tzO1xyXG5cdFx0fVxyXG5cclxuXHRcdC8qKlxyXG5cdFx0ICogVXNlIGFuIGluc2VydCBzb3J0IGZvciBrZWVwaW5nIG91ciBob29rcyBvcmdhbml6ZWQgYmFzZWQgb24gcHJpb3JpdHkuIFRoaXMgZnVuY3Rpb24gaXMgcmlkaWN1bG91c2x5IGZhc3RlclxyXG5cdFx0ICogdGhhbiBidWJibGUgc29ydCwgZXRjOiBodHRwOi8vanNwZXJmLmNvbS9qYXZhc2NyaXB0LXNvcnRcclxuXHRcdCAqXHJcblx0XHQgKiBAcGFyYW0gaG9va3MgVGhlIGN1c3RvbSBhcnJheSBjb250YWluaW5nIGFsbCBvZiB0aGUgYXBwcm9wcmlhdGUgaG9va3MgdG8gcGVyZm9ybSBhbiBpbnNlcnQgc29ydCBvbi5cclxuXHRcdCAqIEBwcml2YXRlXHJcblx0XHQgKi9cclxuXHRcdGZ1bmN0aW9uIF9ob29rSW5zZXJ0U29ydCggaG9va3MgKSB7XHJcblx0XHRcdHZhciB0bXBIb29rLCBqLCBwcmV2SG9vaztcclxuXHRcdFx0Zm9yKCB2YXIgaSA9IDEsIGxlbiA9IGhvb2tzLmxlbmd0aDsgaSA8IGxlbjsgaSsrICkge1xyXG5cdFx0XHRcdHRtcEhvb2sgPSBob29rc1sgaSBdO1xyXG5cdFx0XHRcdGogPSBpO1xyXG5cdFx0XHRcdHdoaWxlKCAoIHByZXZIb29rID0gaG9va3NbIGogLSAxIF0gKSAmJiAgcHJldkhvb2sucHJpb3JpdHkgPiB0bXBIb29rLnByaW9yaXR5ICkge1xyXG5cdFx0XHRcdFx0aG9va3NbIGogXSA9IGhvb2tzWyBqIC0gMSBdO1xyXG5cdFx0XHRcdFx0LS1qO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0XHRob29rc1sgaiBdID0gdG1wSG9vaztcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0cmV0dXJuIGhvb2tzO1xyXG5cdFx0fVxyXG5cclxuXHRcdC8qKlxyXG5cdFx0ICogUnVucyB0aGUgc3BlY2lmaWVkIGhvb2suIElmIGl0IGlzIGFuIGFjdGlvbiwgdGhlIHZhbHVlIGlzIG5vdCBtb2RpZmllZCBidXQgaWYgaXQgaXMgYSBmaWx0ZXIsIGl0IGlzLlxyXG5cdFx0ICpcclxuXHRcdCAqIEBwYXJhbSB0eXBlICdhY3Rpb25zJyBvciAnZmlsdGVycydcclxuXHRcdCAqIEBwYXJhbSBob29rIFRoZSBob29rICggbmFtZXNwYWNlLmlkZW50aWZpZXIgKSB0byBiZSByYW4uXHJcblx0XHQgKiBAcGFyYW0gYXJncyBBcmd1bWVudHMgdG8gcGFzcyB0byB0aGUgYWN0aW9uL2ZpbHRlci4gSWYgaXQncyBhIGZpbHRlciwgYXJncyBpcyBhY3R1YWxseSBhIHNpbmdsZSBwYXJhbWV0ZXIuXHJcblx0XHQgKiBAcHJpdmF0ZVxyXG5cdFx0ICovXHJcblx0XHRmdW5jdGlvbiBfcnVuSG9vayggdHlwZSwgaG9vaywgYXJncyApIHtcclxuXHRcdFx0dmFyIGhhbmRsZXJzID0gU1RPUkFHRVsgdHlwZSBdWyBob29rIF0sIGksIGxlbjtcclxuXHRcdFx0XHJcblx0XHRcdGlmICggIWhhbmRsZXJzICkge1xyXG5cdFx0XHRcdHJldHVybiAodHlwZSA9PT0gJ2ZpbHRlcnMnKSA/IGFyZ3NbMF0gOiBmYWxzZTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0bGVuID0gaGFuZGxlcnMubGVuZ3RoO1xyXG5cdFx0XHRpZiAoIHR5cGUgPT09ICdmaWx0ZXJzJyApIHtcclxuXHRcdFx0XHRmb3IgKCBpID0gMDsgaSA8IGxlbjsgaSsrICkge1xyXG5cdFx0XHRcdFx0YXJnc1sgMCBdID0gaGFuZGxlcnNbIGkgXS5jYWxsYmFjay5hcHBseSggaGFuZGxlcnNbIGkgXS5jb250ZXh0LCBhcmdzICk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdGZvciAoIGkgPSAwOyBpIDwgbGVuOyBpKysgKSB7XHJcblx0XHRcdFx0XHRoYW5kbGVyc1sgaSBdLmNhbGxiYWNrLmFwcGx5KCBoYW5kbGVyc1sgaSBdLmNvbnRleHQsIGFyZ3MgKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdHJldHVybiAoIHR5cGUgPT09ICdmaWx0ZXJzJyApID8gYXJnc1sgMCBdIDogdHJ1ZTtcclxuXHRcdH1cclxuXHJcblx0XHQvLyByZXR1cm4gYWxsIG9mIHRoZSBwdWJsaWNseSBhdmFpbGFibGUgbWV0aG9kc1xyXG5cdFx0cmV0dXJuIE1ldGhvZHNBdmFpbGFibGU7XHJcblxyXG5cdH07XHJcblx0XHJcblx0d2luZG93LndwID0gd2luZG93LndwIHx8IHt9O1xyXG5cdHdpbmRvdy53cC5ob29rcyA9IG5ldyBFdmVudE1hbmFnZXIoKTtcclxuXHJcbn0gKSggd2luZG93ICk7XHJcbiIsIihmdW5jdGlvbigkKSB7XG5cblx0JCgnLnByZXR0eS1zZWxlY3QnKS5zZWxlY3RpemUoKTtcblxuXHQvLyBDb3B5IG1lcmdlIHRhZ1xuXG5cdHZhciBtZXJnZV90YWdfY2xpcGJvYXJkID0gbmV3IENsaXBib2FyZCgnI25vdGlmaWNhdGlvbl9tZXJnZV90YWdzIC5pbnNpZGUgdWwgbGkgY29kZScpO1xuXG5cdG1lcmdlX3RhZ19jbGlwYm9hcmQub24oJ3N1Y2Nlc3MnLCBmdW5jdGlvbihlKSB7XG5cblx0ICAgIHZhciAkY29kZSA9ICQoZS50cmlnZ2VyKSxcblx0XHQgICAgdGFnICAgPSAkY29kZS50ZXh0KCk7XG5cblx0XHQkY29kZS50ZXh0KCBub3RpZmljYXRpb24uY29waWVkICk7XG5cblx0XHRzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuXHRcdFx0JGNvZGUudGV4dCggdGFnICk7XG5cdFx0fSwgODAwKTtcblxuXHR9KTtcblxuXHQvLyBHZXQgZnJlc2ggbWVyZ2UgdGFncyBmb3Igc2VsZWN0ZWQgdHJpZ2dlclxuXG5cdCQoJyNub3RpZmljYXRpb25fdHJpZ2dlcl9zZWxlY3QnKS5zZWxlY3RpemUoKS5jaGFuZ2UoZnVuY3Rpb24oKSB7XG5cblx0XHR2YXIgJHNlbGVjdCAgICA9ICQodGhpcyksXG5cdFx0XHQkY29udGFpbmVyID0gJCgnI25vdGlmaWNhdGlvbl9tZXJnZV90YWdzIC5pbnNpZGUnKSxcblx0XHRcdCRtZXRhYm94ICAgPSAkKCcjbm90aWZpY2F0aW9uX21lcmdlX3RhZ3MnKTtcblxuXHRcdCRtZXRhYm94LmZhZGVUbygyMDAsIDAuNSk7XG5cblx0XHR2YXIgZGF0YSA9IHtcblx0XHRcdCdhY3Rpb24nOiAnbm90aWZpY2F0aW9uX2dldF9tZXJnZV90YWdzJyxcblx0XHRcdCd0cmlnZ2VyJzogJHNlbGVjdC52YWwoKVxuXHRcdH07XG5cblx0ICAgICQucG9zdChhamF4dXJsLCBkYXRhLCBmdW5jdGlvbihyZXNwb25zZSkge1xuXG5cdCAgICBcdGlmICggcmVzcG9uc2Uuc3VjY2VzcyA9PSBmYWxzZSApIHtcblx0ICAgIFx0XHQkY29udGFpbmVyLmh0bWwoICc8cD4nICsgcmVzcG9uc2UuZGF0YSArICc8L3A+JyApO1xuXHQgICAgXHRcdHZhciB0YWdzID0ge307XG5cdCAgICBcdH0gZWxzZSB7XG5cblx0XHRcdFx0dWwgPSAkKFwiPHVsPlwiKTtcblxuXHRcdFx0XHR2YXIgdGFncyA9IHJlc3BvbnNlLmRhdGE7XG5cblx0XHRcdFx0JC5lYWNoKHRhZ3MsIGZ1bmN0aW9uKCBuLCB0YWcgKSB7XG5cdFx0XHRcdFx0dWwuYXBwZW5kKCc8bGk+PGNvZGUgZGF0YS1jbGlwYm9hcmQtdGV4dD1cInsnICsgdGFnICsgJ31cIj57JyArIHRhZyArICd9PC9jb2RlPjwvbGk+Jyk7XG5cdFx0XHRcdH0pO1xuXG5cdFx0XHRcdCRjb250YWluZXIuaHRtbCh1bCk7XG5cblx0ICAgIFx0fVxuXG5cdCAgICBcdHdwLmhvb2tzLmRvQWN0aW9uKCAnbm90aWZpY2F0aW9uLmNoYW5nZWRfdHJpZ2dlcicsICRzZWxlY3QudmFsKCksIHRhZ3MgKTtcblxuXHQgICAgXHQkbWV0YWJveC5mYWRlVG8oMjAwLCAxKTtcblxuXHRcdH0pO1xuXG5cdH0pO1xuXG5cdC8vIFVwZGF0ZSByZWNpcGllbnQgcm93czogbnVtYmVyIGFuZCByZW1vdmUgYnV0dG9uXG5cblx0dmFyIHVwZGF0ZV9yZWNpcGllbnRzID0gZnVuY3Rpb24oKSB7XG5cblx0XHR2YXIgaSA9IDA7XG5cblx0XHRpZiAoICQoJyNub3RpZmljYXRpb25fcmVjaXBpZW50cyAucmVjaXBpZW50JykubGVuZ3RoID09IDEgKSB7XG5cdFx0XHR2YXIgZGlzYWJsZSA9IHRydWU7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHZhciBkaXNhYmxlID0gZmFsc2U7XG5cdFx0fVxuXG5cdFx0JCgnI25vdGlmaWNhdGlvbl9yZWNpcGllbnRzIC5yZWNpcGllbnQnKS5lYWNoKCBmdW5jdGlvbigpIHtcblxuXHRcdFx0dmFyICRyb3cgICAgICAgICAgID0gJCh0aGlzKSxcblx0XHRcdFx0JHJlbW92ZV9idXR0b24gPSAkcm93LmZpbmQoJy5hY3Rpb25zIC5kYXNoaWNvbnMtdHJhc2gnKSxcblx0XHRcdFx0JGlucHV0cyAgICAgICAgPSAkcm93LmZpbmQoJ2lucHV0LCBzZWxlY3QnKTtcblxuXHRcdFx0aWYgKCBkaXNhYmxlICkge1xuXHRcdFx0XHQkcmVtb3ZlX2J1dHRvbi5hZGRDbGFzcygnZGlzYWJsZWQnKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdCRyZW1vdmVfYnV0dG9uLnJlbW92ZUNsYXNzKCdkaXNhYmxlZCcpO1xuXHRcdFx0fVxuXG5cdFx0XHQkaW5wdXRzLmVhY2goIGZ1bmN0aW9uKCkge1xuXG5cdFx0XHRcdHZhciAkaW5wdXQgICAgPSAkKHRoaXMpLFxuXHRcdFx0XHRcdHBhcnRfbmFtZSA9ICRpbnB1dC5hdHRyKCduYW1lJyk7XG5cblx0XHRcdFx0JGlucHV0LmF0dHIoICduYW1lJywgcGFydF9uYW1lLnJlcGxhY2UoIC9ub3RpZmljYXRpb25fcmVjaXBpZW50XFxbWzAtOV0rXFxdLywgJ25vdGlmaWNhdGlvbl9yZWNpcGllbnRbJytpKyddJyApICk7XG5cblx0XHRcdH0gKTtcblxuXHRcdFx0aSsrO1xuXG5cdFx0fSApO1xuXG5cdH1cblxuXHQvLyBBZGQgcmVjaXBpZW50XG5cblx0dmFyIGFkZF9yZWNpcGllbnQgPSBmdW5jdGlvbiggdHlwZSwgdmFsdWUgKSB7XG5cblx0XHR0eXBlICA9IHR5cGVvZiB0eXBlICE9PSAndW5kZWZpbmVkJyA/IHR5cGUgOiAnJztcblx0XHR2YWx1ZSA9IHR5cGVvZiB2YWx1ZSAhPT0gJ3VuZGVmaW5lZCcgPyB2YWx1ZSA6ICcnO1xuXG5cdFx0dmFyICRjb250YWluZXIgPSAkKCcjbm90aWZpY2F0aW9uX3JlY2lwaWVudHMgLnJlY2lwaWVudHMnKTtcblxuXHRcdCRjb250YWluZXIuZmFkZVRvKDIwMCwgMC41KTtcblxuXHRcdHZhciBkYXRhID0ge1xuXHRcdFx0J2FjdGlvbic6ICdub3RpZmljYXRpb25fYWRkX3JlY2lwaWVudCcsXG5cdFx0XHQndHlwZSc6ICAgdHlwZSxcblx0XHRcdCd2YWx1ZSc6ICB2YWx1ZVxuXHRcdH07XG5cblx0ICAgICQucG9zdChhamF4dXJsLCBkYXRhLCBmdW5jdGlvbihyZXNwb25zZSkge1xuXG5cdCAgICBcdGlmICggcmVzcG9uc2Uuc3VjY2VzcyA9PSBmYWxzZSApIHtcblx0ICAgIFx0XHRhbGVydCggcmVzcG9uc2UuZGF0YSApO1xuXHQgICAgXHR9IGVsc2Uge1xuXG5cdCAgICBcdFx0dmFyICRyb3cgPSAkKHJlc3BvbnNlLmRhdGEpO1xuXHRcdFx0XHQkY29udGFpbmVyLmFwcGVuZCgkcm93KTtcblxuXHQgICAgXHR9XG5cblx0ICAgIFx0JGNvbnRhaW5lci5mYWRlVG8oMjAwLCAxKTtcblxuXHQgICAgXHR1cGRhdGVfcmVjaXBpZW50cygpO1xuXG5cdFx0fSk7XG5cblx0fTtcblxuXHQkKCcjbm90aWZpY2F0aW9uX3JlY2lwaWVudHMnKS5vbiggJ2NsaWNrJywgJyNub3RpZmljYXRpb25fYWRkX3JlY2lwaWVudCcsIGZ1bmN0aW9uKCBldmVudCApIHtcblxuXHRcdGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cblx0XHRhZGRfcmVjaXBpZW50KCk7XG5cblx0fSk7XG5cblx0Ly8gUmVtb3ZlIHJlY2lwaWVudFxuXG5cdCQoJyNub3RpZmljYXRpb25fcmVjaXBpZW50cycpLm9uKCAnY2xpY2snLCAnLnJlY2lwaWVudCAuYWN0aW9ucyAuZGFzaGljb25zLXRyYXNoJywgZnVuY3Rpb24oIGV2ZW50ICkge1xuXG5cdFx0ZXZlbnQucHJldmVudERlZmF1bHQoKTtcblxuXHRcdHZhciAkYnV0dG9uICAgID0gJCh0aGlzKSxcblx0XHRcdCRjb250YWluZXIgPSAkYnV0dG9uLnBhcmVudHMoJy5yZWNpcGllbnQnKS5maXJzdCgpO1xuXG5cdFx0aWYgKCAkYnV0dG9uLmhhc0NsYXNzKCdkaXNhYmxlZCcpICkge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdCRjb250YWluZXIuYW5pbWF0ZSh7bGVmdDogJzUwcHgnLCBvcGFjaXR5OiAwfSwgNDAwLCAnbGluZWFyJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAkKHRoaXMpLnJlbW92ZSgpO1xuICAgICAgICAgICAgdXBkYXRlX3JlY2lwaWVudHMoKTtcbiAgICAgICAgfSApO1xuXG5cdH0pO1xuXG5cdC8vIEdldCBpbnB1dCBmaWVsZCBmb3IgcmVjaXBpZW50XG5cblx0JCgnI25vdGlmaWNhdGlvbl9yZWNpcGllbnRzJykub24oICdjaGFuZ2UnLCAnLnJlY2lwaWVudCAuZ3JvdXAgc2VsZWN0JywgZnVuY3Rpb24oKSB7XG5cblx0XHR2YXIgJHNlbGVjdCAgICA9ICQodGhpcyksXG5cdFx0XHQkaW5wdXQgICAgID0gJHNlbGVjdC5wYXJlbnQoKS5uZXh0KCcudmFsdWUnKS5maW5kKCdpbnB1dCwgc2VsZWN0JykuZmlyc3QoKSxcblx0XHRcdCRjb250YWluZXIgPSAkaW5wdXQucGFyZW50KCk7XG5cblx0XHQkY29udGFpbmVyLmZhZGVUbygyMDAsIDAuNSk7XG5cblx0XHR2YXIgZGF0YSA9IHtcblx0XHRcdCdhY3Rpb24nOiAnbm90aWZpY2F0aW9uX2dldF9yZWNpcGllbnRfaW5wdXQnLFxuXHRcdFx0J3JlY2lwaWVudF9uYW1lJzogJHNlbGVjdC52YWwoKVxuXHRcdH07XG5cblx0ICAgICQucG9zdChhamF4dXJsLCBkYXRhLCBmdW5jdGlvbihyZXNwb25zZSkge1xuXG5cdCAgICBcdGlmICggcmVzcG9uc2Uuc3VjY2VzcyA9PSBmYWxzZSApIHtcblx0ICAgIFx0XHRhbGVydCggcmVzcG9uc2UuZGF0YSApO1xuXHQgICAgXHR9IGVsc2Uge1xuXG5cdCAgICBcdFx0dmFyICRpbnB1dCA9ICQocmVzcG9uc2UuZGF0YSk7XG5cdFx0XHRcdCRjb250YWluZXIuaHRtbCgkaW5wdXQpO1xuXG5cdFx0XHRcdGlmICggdHlwZW9mICRpbnB1dC5kYXRhKCd1cGRhdGUnKSAhPT0gJ3VuZGVmaW5lZCcgKSB7XG5cdFx0XHRcdFx0d3AuaG9va3MuZG9BY3Rpb24oICdub3RpZmljYXRpb24udXBkYXRlX2lucHV0JywgJGlucHV0LCAkaW5wdXQuZGF0YSgndmFsdWUnKSwgJGlucHV0LmRhdGEoJ3VwZGF0ZScpICk7XG5cdFx0XHRcdH1cblxuXHQgICAgXHR9XG5cblx0ICAgIFx0JGNvbnRhaW5lci5mYWRlVG8oMjAwLCAxKTtcblxuXHQgICAgXHR1cGRhdGVfcmVjaXBpZW50cygpO1xuXG5cdFx0fSk7XG5cblx0fSk7XG5cblx0Ly8gUHJvY2VzcyBhbGwgcmVjaXBpZW50IGZpZWxkcyB3aGljaCBuZWVkcyBsaXZlIHVwZGF0ZVxuXG5cdHZhciB1cGRhdGVfYWxsX2lucHV0cyA9IGZ1bmN0aW9uKCkge1xuXG5cdFx0JCgnI25vdGlmaWNhdGlvbl9yZWNpcGllbnRzIC5yZWNpcGllbnQnKS5lYWNoKCBmdW5jdGlvbigpIHtcblxuXHRcdFx0dmFyICRpbnB1dCA9ICQodGhpcykuZmluZCgnLmZpZWxkLnZhbHVlIHNlbGVjdCwgLmZpZWxkLnZhbHVlIGlucHV0Jyk7XG5cblx0XHRcdGlmICggdHlwZW9mICRpbnB1dC5kYXRhKCd1cGRhdGUnKSAhPT0gJ3VuZGVmaW5lZCcgKSB7XG5cdFx0XHRcdHdwLmhvb2tzLmRvQWN0aW9uKCAnbm90aWZpY2F0aW9uLnVwZGF0ZV9pbnB1dCcsICRpbnB1dCwgJGlucHV0LmRhdGEoJ3ZhbHVlJyksICRpbnB1dC5kYXRhKCd1cGRhdGUnKSApO1xuXHRcdFx0fVxuXG5cdFx0fSApO1xuXG5cdH07XG5cblx0JChkb2N1bWVudCkucmVhZHkoIHVwZGF0ZV9hbGxfaW5wdXRzICk7XG5cdHdwLmhvb2tzLmFkZEFjdGlvbiggJ25vdGlmaWNhdGlvbi5jaGFuZ2VkX3RyaWdnZXInLCB1cGRhdGVfYWxsX2lucHV0cyApO1xuXG5cdC8vIFVwZGF0ZSBtZXJnZSB0YWdzIGlucHV0XG5cblx0d3AuaG9va3MuYWRkQWN0aW9uKCAnbm90aWZpY2F0aW9uLnVwZGF0ZV9pbnB1dCcsIGZ1bmN0aW9uKCAkaW5wdXQsIHZhbHVlLCB1cGRhdGVfdHlwZSApIHtcblxuXHRcdGlmICggdXBkYXRlX3R5cGUgPT0gJ2VtYWlsX21lcmdlX3RhZ3MnICkge1xuXG5cdFx0XHR2YXIgdHJpZ2dlciAgICA9ICQoJyNub3RpZmljYXRpb25fdHJpZ2dlcl9zZWxlY3QnKS52YWwoKSxcblx0XHRcdFx0JGNvbnRhaW5lciA9ICRpbnB1dC5wYXJlbnQoKTtcblxuXHRcdFx0JGNvbnRhaW5lci5mYWRlVG8oMjAwLCAwLjUpO1xuXG5cdFx0XHR2YXIgZGF0YSA9IHtcblx0XHRcdFx0J2FjdGlvbic6ICAnbm90aWZpY2F0aW9uX2dldF9lbWFpbF9tZXJnZV90YWdzJyxcblx0XHRcdFx0J3RyaWdnZXInOiB0cmlnZ2VyXG5cdFx0XHR9O1xuXG5cdFx0ICAgICQucG9zdChhamF4dXJsLCBkYXRhLCBmdW5jdGlvbihyZXNwb25zZSkge1xuXG5cdFx0ICAgIFx0aWYgKCByZXNwb25zZS5zdWNjZXNzID09IGZhbHNlICkge1xuXHRcdCAgICBcdFx0YWxlcnQoIHJlc3BvbnNlLmRhdGEgKTtcblx0XHQgICAgXHR9IGVsc2Uge1xuXG5cdFx0ICAgIFx0XHQvLyBjbGVhciBvcHRpb25zIGZpcnN0XG5cdFx0ICAgIFx0XHQkaW5wdXQuZmluZCgnb3B0aW9uJykucmVtb3ZlKCk7XG5cblx0XHQgICAgXHRcdC8vIGFkZCBlbXB0eSBvcHRpb24gZm9yIGNsYXJpdHlcblx0XHQgICAgXHRcdCRpbnB1dC5hcHBlbmQoICQoJzxvcHRpb24+JykgKTtcblxuXHRcdCAgICBcdFx0JC5lYWNoKHJlc3BvbnNlLmRhdGEsIGZ1bmN0aW9uKHRhZ192YWx1ZSwgdGFnX25hbWUpIHtcblxuXHRcdCAgICBcdFx0XHR2YXIgYXR0cyA9IHtcblx0XHRcdFx0XHQgICAgICAgIHZhbHVlOiB0YWdfdmFsdWUsXG5cdFx0XHRcdFx0ICAgICAgICB0ZXh0IDogdGFnX25hbWVcblx0XHRcdFx0XHQgICAgfTtcblxuXHRcdFx0XHRcdCAgICBpZiAoIHRhZ192YWx1ZSA9PSB2YWx1ZSApIHtcblx0XHRcdFx0XHQgICAgXHRhdHRzLnNlbGVjdGVkID0gJ3NlbGVjdGVkJztcblx0XHRcdFx0XHQgICAgfVxuXG5cdFx0XHRcdFx0ICAgICRpbnB1dC5hcHBlbmQoICQoJzxvcHRpb24+JywgYXR0cykgKTtcblxuXHRcdFx0XHRcdH0pO1xuXG5cdFx0ICAgIFx0fVxuXG5cdFx0ICAgIFx0JGNvbnRhaW5lci5mYWRlVG8oMjAwLCAxKTtcblxuXHRcdFx0fSk7XG5cblx0XHR9XG5cblx0fSApO1xuXG5cdC8vIFVwZGF0ZSBub3RpZmljYXRpb24gZGVmYXVsdHM6IHRpdGxlLCB0ZW1wbGF0ZSBhbmQgcmVjaXBpZW50c1xuXG5cdHdwLmhvb2tzLmFkZEFjdGlvbiggJ25vdGlmaWNhdGlvbi5jaGFuZ2VkX3RyaWdnZXInLCBmdW5jdGlvbiggdHJpZ2dlcl9zbHVnLCB0YWdzICkge1xuXG5cdFx0aWYgKCB0aW55bWNlLmFjdGl2ZUVkaXRvci5nZXRDb250ZW50KCkgPT0gJycgKSB7XG5cblx0XHRcdHZhciBkYXRhID0ge1xuXHRcdFx0XHQnYWN0aW9uJzogICdub3RpZmljYXRpb25fZ2V0X2RlZmF1bHRzJyxcblx0XHRcdFx0J3RyaWdnZXInOiB0cmlnZ2VyX3NsdWdcblx0XHRcdH07XG5cblx0XHRcdCQucG9zdChhamF4dXJsLCBkYXRhLCBmdW5jdGlvbihyZXNwb25zZSkge1xuXG5cdFx0ICAgIFx0aWYgKCByZXNwb25zZS5zdWNjZXNzID09IGZhbHNlICkge1xuXHRcdCAgICBcdFx0YWxlcnQoIHJlc3BvbnNlLmRhdGEgKTtcblx0XHQgICAgXHR9IGVsc2Uge1xuXG5cdFx0ICAgIFx0XHR2YXIgZGVmYXVsdHMgPSByZXNwb25zZS5kYXRhO1xuXG5cdFx0ICAgIFx0XHRpZiAoIGRlZmF1bHRzLnRpdGxlICkge1xuXHRcdCAgICBcdFx0XHQkKCAnI3RpdGxlJyApLnZhbCggZGVmYXVsdHMudGl0bGUgKS5mb2N1cygpO1xuXHRcdCAgICBcdFx0fVxuXG5cdFx0ICAgIFx0XHRpZiAoIGRlZmF1bHRzLnRlbXBsYXRlICkge1xuXHRcdCAgICBcdFx0XHR0aW55bWNlLmFjdGl2ZUVkaXRvci5zZXRDb250ZW50KCBkZWZhdWx0cy50ZW1wbGF0ZSApO1xuXHRcdCAgICBcdFx0fVxuXG5cdFx0ICAgIFx0XHRpZiAoIGRlZmF1bHRzLnJlY2lwaWVudHMgKSB7XG5cblx0XHQgICAgXHRcdFx0JCgnI25vdGlmaWNhdGlvbl9yZWNpcGllbnRzIC5yZWNpcGllbnRzIC5yZWNpcGllbnQnKS5maXJzdCgpLnJlbW92ZSgpO1xuXG5cdFx0ICAgIFx0XHRcdCQuZWFjaCggZGVmYXVsdHMucmVjaXBpZW50cywgZnVuY3Rpb24oIHR5cGUsIHZhbHVlICkge1xuXHRcdFx0XHRcdFx0XHRhZGRfcmVjaXBpZW50KCB0eXBlLCB2YWx1ZSApO1xuXHRcdFx0XHRcdFx0fSApO1xuXG5cdFx0ICAgIFx0XHR9XG5cblx0XHQgICAgXHR9XG5cblx0XHRcdH0pO1xuXG5cdFx0fVxuXG5cdH0gKTtcblxuXHQvLyBEaXNtaXNzIGJlZyBtZXNzYWdlXG5cblx0JCggJy5ub3RpZmljYXRpb24tbm90aWNlJyApLm9uKCAnY2xpY2snLCAnLmRpc21pc3MtYmVnLW1lc3NhZ2UnLCBmdW5jdGlvbiggZXZlbnQgKSB7XG5cblx0XHRldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXG5cdFx0dmFyICRidXR0b24gPSAkKCB0aGlzICk7XG5cblx0XHR2YXIgZGF0YSA9IHtcblx0XHRcdCdhY3Rpb24nOiAgJ25vdGlmaWNhdGlvbl9kaXNtaXNzX2JlZ19tZXNzYWdlJyxcblx0XHRcdCdub25jZSc6ICRidXR0b24uZGF0YSggJ25vbmNlJyApXG5cdFx0fTtcblxuXHRcdCQucG9zdCggYWpheHVybCwgZGF0YSwgZnVuY3Rpb24oIHJlc3BvbnNlICkge1xuXHQgICAgXHQkYnV0dG9uLnBhcmVudHMoICcubm90aWZpY2F0aW9uLW5vdGljZScgKS5zbGlkZVVwKCk7XG5cdFx0fSk7XG5cblx0fSk7XG5cblx0Ly8gUGx1Z2luIHJlbW92YWxcblxuXHQkKCAnI3RoZS1saXN0IHRyW2RhdGEtc2x1Zz1cIm5vdGlmaWNhdGlvblwiXSAuZGVhY3RpdmF0ZSBhJyApLmNsaWNrKCBmdW5jdGlvbiggZXZlbnQgKSB7XG5cdFx0ZXZlbnQucHJldmVudERlZmF1bHQoKTtcblx0fSApO1xuXG5cdCQoICdib2R5JyApLm9uKCAnc3VibWl0JywgJyNub3RpZmljYXRpb24tcGx1Z2luLWZlZWRiYWNrLWZvcm0nLCBmdW5jdGlvbiggZXZlbnQgKSB7XG5cblx0XHRldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXG5cdFx0dmFyICRmb3JtID0gJCh0aGlzKTtcblxuXHRcdCRmb3JtLmZpbmQoICcuc3Bpbm5lcicgKS5hZGRDbGFzcyggJ2lzLWFjdGl2ZScgKTtcblxuXHRcdHZhciBkYXRhID0ge1xuXHRcdFx0J2FjdGlvbic6ICdub3RpZmljYXRpb25fc2VuZF9mZWVkYmFjaycsXG5cdFx0XHQnZm9ybScgIDogJGZvcm0uc2VyaWFsaXplQXJyYXkoKVxuXHRcdH07XG5cblx0XHQkLnBvc3QoIGFqYXh1cmwsIGRhdGEsIGZ1bmN0aW9uKCByZXNwb25zZSApIHtcblx0XHRcdHdpbmRvdy5sb2NhdGlvbi5ocmVmID0gJCggJyN0aGUtbGlzdCB0cltkYXRhLXNsdWc9XCJub3RpZmljYXRpb25cIl0gLmRlYWN0aXZhdGUgYScgKS5kYXRhKCAnZGVhY3RpdmF0ZScgKTtcblx0XHR9KTtcblxuXHR9ICk7XG5cbn0pKGpRdWVyeSk7XG4iXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=
